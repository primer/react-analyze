{
  "root": "/Users/sid/code/primer/memex",
  "imports": [
    {
      "path": "src/client/app.tsx",
      "line_start": 8,
      "line_end": 8,
      "name": "registerPortalRoot",
      "specifier": "@primer/react",
      "text": "\n\nimport {registerPortalRoot, themeGet, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/app.tsx",
      "line_start": 8,
      "line_end": 8,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\n\nimport {registerPortalRoot, themeGet, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/app.tsx",
      "line_start": 8,
      "line_end": 8,
      "name": "useTheme",
      "specifier": "@primer/react",
      "text": "\n\nimport {registerPortalRoot, themeGet, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/memex.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BaseStyles",
      "specifier": "@primer/react",
      "text": "\n\nimport {BaseStyles, ThemeProvider} from '@primer/react'"
    },
    {
      "path": "src/client/memex.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ThemeProvider",
      "specifier": "@primer/react",
      "text": "\n\nimport {BaseStyles, ThemeProvider} from '@primer/react'"
    },
    {
      "path": "src/client/project-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/project-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/project-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionListItemProps, AnchoredOverlay, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionListItemProps, AnchoredOverlay, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionListItemProps, AnchoredOverlay, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionListItemProps, AnchoredOverlay, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Dialog",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogButtonProps, DialogHeaderProps, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "DialogButtonProps",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogButtonProps, DialogHeaderProps, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "DialogHeaderProps",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogButtonProps, DialogHeaderProps, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "DialogProps",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogButtonProps, DialogHeaderProps, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/base-settings-page.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/base-settings-page.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Label, StyledOcticon, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/column-settings-saved-message.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "import {Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/column-settings-saved-message.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Portal",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "PortalProps",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TooltipProps",
      "specifier": "@primer/react",
      "text": "import {Portal, PortalProps, sx, SxProp, themeGet, TooltipProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/interactive-item-title.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/issue-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Label, LabelProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/issue-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "LabelProps",
      "specifier": "@primer/react",
      "text": "import {Label, LabelProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/item-state-unified.tsx",
      "line_start": 14,
      "line_end": 14,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/item-state-unified.tsx",
      "line_start": 14,
      "line_end": 14,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/item-state.tsx",
      "line_start": 12,
      "line_end": 12,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/item-state.tsx",
      "line_start": 12,
      "line_end": 12,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/linked-pr-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Label, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/linked-pr-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Label, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/potentially-dirty.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/potentially-dirty.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/presence-avatars.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Link, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Link, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Link, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Link, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Link, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "import {Heading, Popover, ProgressBar} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Popover",
      "specifier": "@primer/react",
      "text": "import {Heading, Popover, ProgressBar} from '@primer/react'"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ProgressBar",
      "specifier": "@primer/react",
      "text": "import {Heading, Popover, ProgressBar} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AnchoredOverlayProps",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SelectPanel",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, AnchoredOverlayProps, Box, SelectPanel, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 4,
      "line_end": 4,
      "name": "ItemInput",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList/List",
      "text": "\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "line_start": 5,
      "line_end": 5,
      "name": "useProvidedRefOrCreate",
      "specifier": "@primer/react/lib-esm/hooks/useProvidedRefOrCreate",
      "text": "\nimport {useProvidedRefOrCreate} from '@primer/react/lib-esm/hooks/useProvidedRefOrCreate'"
    },
    {
      "path": "src/client/components/repository-icon.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/repository-icon.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ConfirmationDialog",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ConfirmationDialogProps",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "import {Box, Button, ConfirmationDialog, ConfirmationDialogProps, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggested-item-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggested-item-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggested-item-picker.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "import {TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-for-repository.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-for-repository.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {themeGet, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {themeGet, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {themeGet, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/time.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "// copy/paste from issues-app: https://github.com/github/issues-app/blob/bbba3f9b727faee1c3cf0bac104cccbf35d00181/components/Time.tsx\nimport {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/time.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextProps",
      "specifier": "@primer/react",
      "text": "// copy/paste from issues-app: https://github.com/github/issues-app/blob/bbba3f9b727faee1c3cf0bac104cccbf35d00181/components/Time.tsx\nimport {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "import {ActionList, AnchoredOverlay} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, TabNav as PrimerTabNav, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TabNav",
      "alias": "PrimerTabNav",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, TabNav as PrimerTabNav, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, TabNav as PrimerTabNav, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "import {useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BaseStyles",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, ThemeProvider, ThemeProviderProps, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ThemeProvider",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, ThemeProvider, ThemeProviderProps, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ThemeProviderProps",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, ThemeProvider, ThemeProviderProps, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "useTheme",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, ThemeProvider, ThemeProviderProps, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-archive-memex-items-with-confirmation.ts",
      "line_start": 1,
      "line_end": 1,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "import {useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/use-remove-memex-items-with-id.ts",
      "line_start": 1,
      "line_end": 1,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "import {useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Checkbox",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Checkbox, Link, Spinner, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Checkbox",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Checkbox, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/archive/archive-page.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archive-page.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "PageLayout",
      "specifier": "@primer/react/lib-esm/PageLayout/PageLayout",
      "text": "\nimport {PageLayout} from '@primer/react/lib-esm/PageLayout/PageLayout'"
    },
    {
      "path": "src/client/components/archive/archived-items.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/archive/archived-items.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, Label, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, Label, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, Label, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, Label, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, Label, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-pill.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-pill.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, AnchoredOverlay, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "import {ActionList, AnchoredOverlay, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, AnchoredOverlay, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-field-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, SelectPanel} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-field-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, SelectPanel} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-field-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SelectPanel",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, SelectPanel} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-set-field-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, SideNav, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, SideNav, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SideNav",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, SideNav, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, SideNav, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, SideNav, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/automation-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/automation/use-automation-color.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useColorSchemeVar",
      "specifier": "@primer/react",
      "text": "\nimport {useColorSchemeVar} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/add-new-column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/add-new-column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/board.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/sash.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/autosize-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, TextInput, TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/autosize-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "import {Box, TextInput, TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/autosize-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "import {Box, TextInput, TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/autosize-text-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/blankslate.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/blankslate.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/borderless-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {BoxProps, sx, SxProp, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/borderless-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "import {BoxProps, sx, SxProp, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/borderless-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {BoxProps, sx, SxProp, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/borderless-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "import {BoxProps, sx, SxProp, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/borderless-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {BoxProps, sx, SxProp, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/dropdown-caret.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Button, ButtonProps, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/dropdown-caret.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ButtonProps",
      "specifier": "@primer/react",
      "text": "\nimport {Button, ButtonProps, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/dropdown-caret.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Button, ButtonProps, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/emoji-picker.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/highlighted-text.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/highlighted-text.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextProps",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/highlighted-text.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/icon-button-with-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "import {IconButton, IconButtonProps, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/icon-button-with-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "IconButtonProps",
      "specifier": "@primer/react",
      "text": "import {IconButton, IconButtonProps, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/icon-button-with-tooltip.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "import {IconButton, IconButtonProps, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/keyboard-key.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/memex-item-icon.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/named-portal-root.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, registerPortalRoot} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/named-portal-root.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "registerPortalRoot",
      "specifier": "@primer/react",
      "text": "import {Box, registerPortalRoot} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/picker-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "import {sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/picker-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/picker-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/placeholders.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/portal.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BaseStyles",
      "specifier": "@primer/react",
      "text": "import {BaseStyles} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, CaretProps, PointerBox, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "CaretProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, CaretProps, PointerBox, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "PointerBox",
      "specifier": "@primer/react",
      "text": "\nimport {Box, CaretProps, PointerBox, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, CaretProps, PointerBox, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, CaretProps, PointerBox, Spinner, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/toggle-switch.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/toggle-switch.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/validation-error-popover.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Popover",
      "specifier": "@primer/react",
      "text": "import {Popover, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/validation-error-popover.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "useTheme",
      "specifier": "@primer/react",
      "text": "import {Popover, useTheme} from '@primer/react'"
    },
    {
      "path": "src/client/components/dom/sanitized-html-span.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/dom/sanitized-html-span.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextProps",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/error-boundaries/blankslate-error-message.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/error-boundaries/blankslate-error-message.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/error-boundaries/project-error-fallback.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/click-to-filter.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/click-to-filter.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, StyledOcticon, sx, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/filter-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, CounterLabel, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, CounterLabel, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, CounterLabel, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, CounterLabel, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/find-in-project/find-in-project-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/find-in-project/find-in-project-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/find-in-project/find-in-project-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "AvatarStack",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, AvatarStack, IconButton, Link, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "import {Box, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "line_start": 8,
      "line_end": 8,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/insights/insights-layout.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, PageLayout} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-layout.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "PageLayout",
      "specifier": "@primer/react",
      "text": "import {Box, PageLayout} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/progress.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/progress.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/list/progress.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/omnibar/omnibar-container.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar-container.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar-drawer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar-placeholder.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar-placeholder.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "ButtonProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "FormControl",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionListItemProps,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonProps,\n  FormControl,\n  StyledOcticon,\n  TextInput\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/column-drop-zone-sash.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group-row-drop-zone-sash.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BaseStyles",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {BaseStyles, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/repo-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/repo-list.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/repo-searcher.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/repo-searcher.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "import {Box, TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/row-drop-zone-sash.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/selected-repository-pill.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/selected-repository-pill.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, StyledOcticon, Text, TextInputProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-header.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-header.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-row.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-search-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {IconButton, sx, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-search-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "\nimport {IconButton, sx, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/table-search-button.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {IconButton, sx, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/use-row-drag-drop.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "import {Link} from '@primer/react'"
    },
    {
      "path": "src/client/components/react-router/action-list-nav-link-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListLinkItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react-router/action-list-nav-link-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListLinkItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListLinkItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react-router/action-list-nav-link-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, IconButton, StyledOcticon, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Flash",
      "specifier": "@primer/react",
      "text": "import {Flash, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Flash, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "import {Flash, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Dialog",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogHeaderProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "DialogHeaderProps",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogHeaderProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, Heading, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Flash, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Flash, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Flash",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Flash, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Button, Flash, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/no-iterations-placeholder.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/no-iterations-placeholder.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/settings-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, PageLayout} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/settings-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "PageLayout",
      "specifier": "@primer/react",
      "text": "import {Box, PageLayout} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ButtonGroup",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, ButtonGroup, IconButton, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/body.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/body.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Avatar, Box, Button, Label, Link, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "UnderlineNav",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Link, Text, TextInput, UnderlineNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Overlay",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Overlay, Text, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Checkbox",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Checkbox, Link, Spinner, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StateLabel, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StateLabel",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StateLabel, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StateLabel, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, AnchoredOverlay, Box, Button, IconButton, Tooltip, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Button, SelectPanel, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SelectPanel",
      "specifier": "@primer/react",
      "text": "\nimport {Button, SelectPanel, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {Button, SelectPanel, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "line_start": 4,
      "line_end": 4,
      "name": "ItemInput",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList/List",
      "text": "\nimport type {ItemInput} from '@primer/react/lib-esm/deprecated/ActionList/List'"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Button, IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Checkbox, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Checkbox",
      "specifier": "@primer/react",
      "text": "import {Box, Checkbox, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Checkbox, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, Checkbox, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Dialog",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "DialogProps",
      "specifier": "@primer/react/lib-esm/Dialog/Dialog",
      "text": "\nimport {Dialog, DialogProps} from '@primer/react/lib-esm/Dialog/Dialog'"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "ButtonGroup",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Link",
      "alias": "PrimerLink",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "line_start": 12,
      "line_end": 24,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  AnchoredOverlay,\n  Box,\n  Button,\n  ButtonGroup,\n  Label,\n  Link as PrimerLink,\n  StyledOcticon,\n  Text,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/route-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/route-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/top-bar/route-title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "line_start": 10,
      "line_end": 10,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "line_start": 10,
      "line_end": 10,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "line_start": 10,
      "line_end": 10,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/menu-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {IconButton} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList} from '@primer/react'"
    },
    {
      "path": "src/client/components/view-options-menu/view-changes-button.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/common/use-autocomplete.ts",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "\nimport {TextInputProps} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/editors/use-assignees-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "import {Avatar} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/editors/use-assignees-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/hooks/editors/use-iteration-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "import {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/hooks/editors/use-labels-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/editors/use-labels-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/hooks/editors/use-milestone-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/hooks/editors/use-milestone-editor.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/hooks/editors/use-select-panel.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "\nimport {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/hooks/editors/use-select-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "GroupedListProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList/List",
      "text": "\nimport {GroupedListProps} from '@primer/react/lib-esm/deprecated/ActionList/List'"
    },
    {
      "path": "src/client/hooks/editors/use-select-panel.tsx",
      "line_start": 4,
      "line_end": 4,
      "name": "SelectPanelProps",
      "specifier": "@primer/react/lib-esm/SelectPanel/SelectPanel",
      "text": "\nimport {SelectPanelProps} from '@primer/react/lib-esm/SelectPanel/SelectPanel'"
    },
    {
      "path": "src/client/hooks/editors/use-single-select-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList",
      "text": "import {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "AvatarStack",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 9,
      "line_end": 21,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Avatar,\n  AvatarStack,\n  Box,\n  BoxProps,\n  IconButton,\n  StyledOcticon,\n  Text,\n  themeGet,\n  Tooltip\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "line_start": 22,
      "line_end": 22,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/board/card/title.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "import {Link} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/card/title.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/board/column/column-frame.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column-frame.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column-frame.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, CounterLabel, IconButton, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/draft-column.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/editable-column-name.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/board/column/editable-column-name.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/board/hooks/use-delete-board-column.ts",
      "line_start": 1,
      "line_end": 1,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "import {useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Button, IconButton, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Button, IconButton, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Button, IconButton, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Button, IconButton, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Button, IconButton, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-confirm-close-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ConfirmationDialog",
      "specifier": "@primer/react",
      "text": "\nimport {ConfirmationDialog, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-confirm-close-dialog.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ConfirmationDialog, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-overlay.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "import {AnchoredOverlay, AnchoredOverlayProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-overlay.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AnchoredOverlayProps",
      "specifier": "@primer/react",
      "text": "import {AnchoredOverlay, AnchoredOverlayProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "sx",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, StyledOcticon, sx, SxProp, themeGet, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "FormControl",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "TextInputProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "TextInputWithTokens",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "line_start": 2,
      "line_end": 13,
      "name": "TokenProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  Box,\n  FormControl,\n  IconButton,\n  StyledOcticon,\n  SxProp,\n  Text,\n  TextInput,\n  TextInputProps,\n  TextInputWithTokens,\n  TokenProps\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "import {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/hidden-description.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Box, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/date-picker/types.ts",
      "line_start": 1,
      "line_end": 1,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "import {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Box, Overlay, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Box, Overlay, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Box, Overlay, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Overlay",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Box, Overlay, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Box, Overlay, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/inline-autocomplete.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/inline-autocomplete.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/types.ts",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionListItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ButtonProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "LinkButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, ButtonProps, LinkButton, Spinner, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Textarea",
      "specifier": "@primer/react",
      "text": "\nimport {Textarea, TextareaProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-input.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextareaProps",
      "specifier": "@primer/react",
      "text": "\nimport {Textarea, TextareaProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "line_start": 16,
      "line_end": 16,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "line_start": 16,
      "line_end": 16,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {Box, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-viewer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-viewer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Box, Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/view-switch.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/markdown-editor/view-switch.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/select-menu/select-menu-error.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/table/grid-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/table/grid-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "import {Box, BoxProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/error-messages/base-chart-error.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/error-messages/base-chart-error.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/error-messages/base-chart-error.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, BoxProps, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/error-messages/invalid-config-error.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/action-buttons.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/action-buttons.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Box, Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, IconButton, Overlay, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, IconButton, Overlay, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, IconButton, Overlay, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Overlay",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, IconButton, Overlay, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Heading, IconButton, Overlay, useFocusTrap} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/validation.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, SxProp, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/validation.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "\nimport {Box, SxProp, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/validation.tsx",
      "line_start": 7,
      "line_end": 7,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, SxProp, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, Text, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionMenu, Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/period-navigation/insight-custom-date-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/period-navigation/insight-custom-date-picker.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/period-navigation/period-navigation.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SubNav",
      "specifier": "@primer/react",
      "text": "import {SubNav} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/chart-link.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/chart-link.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Tooltip",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, Box, Button, Tooltip} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, IconButton, TextInput, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/base-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/dropdown-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/dropdown-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {Box, SxProp} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/label-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/link-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "import {Link, LinkProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/link-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "LinkProps",
      "specifier": "@primer/react",
      "text": "import {Link, LinkProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/linked-pull-requests-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/milestone.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/text-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/text-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextProps",
      "specifier": "@primer/react",
      "text": "import {Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/tracks-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/user-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/user-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AvatarStack",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/cells/user-group.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/editors/select-panel-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "OverlayProps",
      "specifier": "@primer/react",
      "text": "import {OverlayProps, TouchOrMouseEvent} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/editors/select-panel-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TouchOrMouseEvent",
      "specifier": "@primer/react",
      "text": "import {OverlayProps, TouchOrMouseEvent} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/editors/select-panel-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SelectPanel",
      "specifier": "@primer/react/lib-esm/SelectPanel/SelectPanel",
      "text": "\nimport {SelectPanel, SelectPanelProps} from '@primer/react/lib-esm/SelectPanel/SelectPanel'"
    },
    {
      "path": "src/client/components/react_table/editors/select-panel-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "SelectPanelProps",
      "specifier": "@primer/react/lib-esm/SelectPanel/SelectPanel",
      "text": "\nimport {SelectPanel, SelectPanelProps} from '@primer/react/lib-esm/SelectPanel/SelectPanel'"
    },
    {
      "path": "src/client/components/react_table/editors/single-select-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ItemProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList/Item",
      "text": "import {ItemProps} from '@primer/react/lib-esm/deprecated/ActionList/Item'"
    },
    {
      "path": "src/client/components/react_table/editors/text-cell-editor.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/editors/title-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/editors/title-editor.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/assignees-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, CounterLabel} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/assignees-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "AvatarStack",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, CounterLabel} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/assignees-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "import {Avatar, AvatarStack, CounterLabel} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/default-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, Label, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/default-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, Label, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/default-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, Label, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/iteration-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/iteration-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/repository-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "CounterLabel",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/repository-group-header-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {CounterLabel, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/table-group-contents.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/table-group-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/table-group-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/group/table-group-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/dummy-table-header-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/styled-grid-cell.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "BoxProps",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "ConfirmationDialog",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "FormControl",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "line_start": 14,
      "line_end": 27,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  BoxProps,\n  ConfirmationDialog,\n  FormControl,\n  IconButton,\n  Link,\n  StyledOcticon,\n  Text,\n  TextInput,\n  themeGet\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/iteration-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/iteration-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/single-select-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/single-select-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/title-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/react_table/renderers/tracks-renderer.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Button} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/access-settings-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Heading} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/access-settings-view.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "import {Box, Heading} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "FormControl",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, FormControl, Heading, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Avatar, Box, Button, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, ActionMenu, Box, useFocusTrap, useFocusZone} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Avatar",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "import {Avatar, Box, Button, Link, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "useFocusTrap",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 3,
      "line_end": 13,
      "name": "useFocusZone",
      "specifier": "@primer/react",
      "text": "\nimport {\n  ActionList,\n  ActionMenu,\n  Box,\n  Button,\n  StyledOcticon,\n  Text,\n  TextInput,\n  useFocusTrap,\n  useFocusZone\n} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "line_start": 14,
      "line_end": 14,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Spinner, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Spinner, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Spinner, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "useConfirm",
      "specifier": "@primer/react",
      "text": "import {Box, Heading, Spinner, useConfirm} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Heading",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, Heading, Link, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/add-break-button.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/add-break-button.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "SxProp",
      "specifier": "@primer/react",
      "text": "import {SxProp, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {SxProp, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionMenu",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, ActionMenu, Box, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Box, Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport type {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Link",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, IconButton, Link, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "themeGet",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, themeGet} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "AnchoredOverlay",
      "specifier": "@primer/react",
      "text": "\nimport {AnchoredOverlay, Box, Button, ButtonGroup} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {AnchoredOverlay, Box, Button, ButtonGroup} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {AnchoredOverlay, Box, Button, ButtonGroup} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "ButtonGroup",
      "specifier": "@primer/react",
      "text": "\nimport {AnchoredOverlay, Box, Button, ButtonGroup} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-options.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Button",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "IconButton",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextInput",
      "specifier": "@primer/react",
      "text": "\nimport {Box, Button, IconButton, Text, TextInput} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/index.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {ActionList, StyledOcticon, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-emoji-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-emoji-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-reference-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionList",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-reference-suggestions.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "ActionListItemProps",
      "specifier": "@primer/react",
      "text": "import {ActionList, ActionListItemProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/assignees-field.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "import {Box, Text} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "BetterSystemStyleObject",
      "specifier": "@primer/react/lib-esm/sx",
      "text": "\nimport {BetterSystemStyleObject} from '@primer/react/lib-esm/sx'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/index.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/iteration-field.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "\nimport {Label, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/iteration-field.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Label, StyledOcticon} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/labels-field.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "import {Box} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/sidebar-select-panel.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Spinner",
      "specifier": "@primer/react",
      "text": "import {Spinner} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/sidebar-select-panel.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "GroupedListProps",
      "specifier": "@primer/react/lib-esm/deprecated/ActionList/List",
      "text": "\nimport {GroupedListProps} from '@primer/react/lib-esm/deprecated/ActionList/List'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/sidebar-select-panel.tsx",
      "line_start": 3,
      "line_end": 3,
      "name": "SelectPanel",
      "specifier": "@primer/react/lib-esm/SelectPanel/SelectPanel",
      "text": "\nimport {SelectPanel} from '@primer/react/lib-esm/SelectPanel/SelectPanel'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/sidebar-text-input.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "PointerBox",
      "specifier": "@primer/react",
      "text": "import {PointerBox} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/single-select-field.tsx",
      "line_start": 1,
      "line_end": 1,
      "name": "Label",
      "specifier": "@primer/react",
      "text": "import {Label} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Box",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "StyledOcticon",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "Text",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, TextProps} from '@primer/react'"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "line_start": 2,
      "line_end": 2,
      "name": "TextProps",
      "specifier": "@primer/react",
      "text": "\nimport {Box, StyledOcticon, Text, TextProps} from '@primer/react'"
    }
  ],
  "usage": [
    {
      "path": "src/client/memex.tsx",
      "name": "ThemeProvider",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...getThemePropsFromThemePreferences(getInitialState().themePreferences)}"
        }
      ],
      "line_start": 46,
      "line_end": 48,
      "text": "\n    <ThemeProvider {...getThemePropsFromThemePreferences(getInitialState().themePreferences)}>\n      <BaseStyles display=\"contents\">{children}</BaseStyles>\n    </ThemeProvider>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/memex.tsx",
      "name": "BaseStyles",
      "props": [
        {
          "name": "display",
          "kind": "StringLiteral",
          "text": "\"contents\""
        }
      ],
      "line_start": 47,
      "line_end": 47,
      "text": "<BaseStyles display=\"contents\">{children}</BaseStyles>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/project-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"memex-project-view-root\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('app-root')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        flexDirection: 'column',\n        flex: 'auto',\n        position: 'relative',\n        zIndex: 1,\n        display: isRouteHidden ? 'none' : 'flex'\n      }}"
        }
      ],
      "line_start": 29,
      "line_end": 42,
      "text": "\n    <Box\n      id=\"memex-project-view-root\"\n      {...testIdProps('app-root')}\n      sx={{\n        flexDirection: 'column',\n        flex: 'auto',\n        position: 'relative',\n        zIndex: 1,\n        display: isRouteHidden ? 'none' : 'flex'\n      }}\n    >\n      <ViewNavigation />\n      <MainView />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/project-view.tsx",
      "name": "Box",
      "props": [],
      "line_start": 95,
      "line_end": 109,
      "text": "<Box>\n            <Text sx={{fontSize: 1, mx: 2, color: 'fg.onEmphasis'}}>This view has been deleted.</Text>\n            {views.length < MAX_VIEWS_PER_PAGE ? (\n              <ToastAction\n                {...testIdProps('deleted-view-toast-action')}\n                marginBottom={0}\n                marginTop={0}\n                onClick={() => {\n                  duplicateCurrentViewState(currentView.number, undefined, {ui: DeletedViewToastUI})\n                }}\n              >\n                {currentView.isViewStateDirty ? 'Save a copy to make changes.' : 'Duplicate it to make changes.'}\n              </ToastAction>\n            ) : null}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/project-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, mx: 2, color: 'fg.onEmphasis'}}"
        }
      ],
      "line_start": 96,
      "line_end": 96,
      "text": "<Text sx={{fontSize: 1, mx: 2, color: 'fg.onEmphasis'}}>This view has been deleted.</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/project-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 126,
      "line_end": 126,
      "text": "<Text as=\"h2\">This view no longer exists</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/project-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 127,
      "line_end": 129,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n        Select another view to use this project.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{borderBottom: '1px solid', borderColor: 'border.default', alignItems: 'stretch', display: 'flex'}}"
        }
      ],
      "line_start": 186,
      "line_end": 198,
      "text": "<Box sx={{borderBottom: '1px solid', borderColor: 'border.default', alignItems: 'stretch', display: 'flex'}}>\n        <Box sx={{p: 16, pr: 14, pl: 22, display: 'flex'}}>\n          <SearchIcon />\n        </Box>\n\n        <MenuInput\n          ref={searchInputRef}\n          onAccept={onActivateSelectedItem}\n          value={queryValue}\n          onChange={setQueryValue}\n          onFocus={onSearchInputFocus}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 16, pr: 14, pl: 22, display: 'flex'}}"
        }
      ],
      "line_start": 187,
      "line_end": 189,
      "text": "<Box sx={{p: 16, pr: 14, pl: 22, display: 'flex'}}>\n          <SearchIcon />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"ul\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          m: 0,\n          p: 2,\n          listStyleType: 'none',\n          overflowY: 'auto',\n          flexGrow: 1\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('command-menu-filtered-commands')}"
        }
      ],
      "line_start": 200,
      "line_end": 229,
      "text": "<Box\n        as=\"ul\"\n        sx={{\n          m: 0,\n          p: 2,\n          listStyleType: 'none',\n          overflowY: 'auto',\n          flexGrow: 1\n        }}\n        {...testIdProps('command-menu-filtered-commands')}\n      >\n        {scoredMenuItems.filteredItems.map((menuItem, i) => (\n          <MenuItem\n            key={menuItem[1].description}\n            menuItem={menuItem}\n            onPointerMove={() => pointerSetSelectedItemIndex(i)}\n            onPointerLeave={() => pointerSetSelectedItemIndex(null)}\n            currentPath={path}\n            isSelected={selectedMenuItem === menuItem}\n            onClick={onActivateMenuItem}\n            shouldScrollToSelectedMenuItem={shouldScrollToSelectedMenuItem}\n            positionData={scoredMenuItems.positionData.get(menuItem)}\n            showPath={\n              shortcutsEnabled &&\n              (isShortcutMode || isCommandTree(menuItem[1]) || menuItem[0][menuItem[0].length - 1] !== BACKSPACE_STR)\n            }\n            showFullPath={isPaletteMode}\n          />\n        ))}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        alignItems: 'stretch',\n        borderTop: '1px solid',\n        borderColor: 'border.default',\n        px: 4,\n        py: 2,\n        pt: 1,\n        display: 'flex'\n      }}"
        }
      ],
      "line_start": 327,
      "line_end": 350,
      "text": "\n    <Box\n      sx={{\n        alignItems: 'stretch',\n        borderTop: '1px solid',\n        borderColor: 'border.default',\n        px: 4,\n        py: 2,\n        pt: 1,\n        display: 'flex'\n      }}\n    >\n      <PathSegment segment=\"Commands\" segmentPath={[]} isRoot={true} isFinal={false} setPath={setPath} />\n\n      {trail.map(([segmentPath, segment], i) => (\n        <PathSegment\n          key={i}\n          segment={segment}\n          segmentPath={segmentPath}\n          isRoot={false}\n          isFinal={i === trail.length - 1}\n          setPath={p => setPath(p)}\n        />\n      ))}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...textStyles}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold'}}"
        }
      ],
      "line_start": 373,
      "line_end": 375,
      "text": "\n        <Text {...textStyles} sx={{fontWeight: 'bold'}}>\n          {segment}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`Go back to ${segment}`}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isFinal}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            ...unstyledButtonStyles,\n            ...textStyles,\n            width: 'unset',\n            display: 'inline',\n            p: 0,\n            backgroundColor: 'canvas.default'\n          }}"
        }
      ],
      "line_start": 377,
      "line_end": 391,
      "text": "\n        <Button\n          aria-label={`Go back to ${segment}`}\n          onClick={onClick}\n          disabled={isFinal}\n          sx={{\n            ...unstyledButtonStyles,\n            ...textStyles,\n            width: 'unset',\n            display: 'inline',\n            p: 0,\n            backgroundColor: 'canvas.default'\n          }}\n        >\n          <span>{segment}</span>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...textStyles}"
        }
      ],
      "line_start": 393,
      "line_end": 393,
      "text": " <Text {...textStyles}>&nbsp;/&nbsp;</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"li\""
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{uglyRef}"
        },
        {
          "name": "onPointerMove",
          "kind": "JsxExpression",
          "text": "{onPointerMove}"
        },
        {
          "name": "onPointerLeave",
          "kind": "JsxExpression",
          "text": "{onPointerLeave}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 445,
      "line_end": 462,
      "text": "\n    <Box as=\"li\" ref={uglyRef} onPointerMove={onPointerMove} onPointerLeave={onPointerLeave} sx={{display: 'flex'}}>\n      <StyledButton className={className} sx={unstyledButtonStyles} onClick={onClickWrapper} isSelected={isSelected}>\n        {positionData ? (\n          <HighlightedText\n            text={item.description}\n            chunks={positionData?.chunks ?? []}\n            fontWeight=\"normal\"\n            color=\"fg.muted\"\n            ml={2}\n            sx={{flex: 1}}\n          />\n        ) : (\n          <Text sx={{flex: 1, fontWeight: 'normal', color: 'fg.muted', ml: 2}}>{item.description}</Text>\n        )}\n\n        {showPath && <ItemPath itemPath={path} />}\n      </StyledButton>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 1, fontWeight: 'normal', color: 'fg.muted', ml: 2}}"
        }
      ],
      "line_start": 457,
      "line_end": 457,
      "text": "\n          <Text sx={{flex: 1, fontWeight: 'normal', color: 'fg.muted', ml: 2}}>{item.description}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: isPaletteMode ? 'fg.muted' : 'fg.default', fontSize: 0, opacity: isPaletteMode ? 0.8 : 1}}"
        }
      ],
      "line_start": 498,
      "line_end": 510,
      "text": "<Text sx={{color: isPaletteMode ? 'fg.muted' : 'fg.default', fontSize: 0, opacity: isPaletteMode ? 0.8 : 1}}>\n        {itemPath.reduce<Array<JSX.Element>>((children, segment, i) => {\n          children.push(\n            <Fragment key={i}>\n              {segment}\n\n              {i < itemPath.length - 1 && <Text sx={{color: 'fg.muted', px: 1}}>→</Text>}\n            </Fragment>\n          )\n\n          return children\n        }, [])}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', px: 1}}"
        }
      ],
      "line_start": 504,
      "line_end": 504,
      "text": " <Text sx={{color: 'fg.muted', px: 1}}>→</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Box",
      "line_start": 236,
      "line_end": 236,
      "text": " styled(Box)`\n  position: fixed;\n  border: 1px solid ${themeGet('colors.border.default')};\n  border-radius: ${themeGet('radii.2')};\n  box-shadow: ${themeGet('shadows.shadow.extraLarge')};\n  display: flex;\n  max-height: 60%;\n  overflow: hidden;\n  flex-direction: column;\n\n  top: 25%;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 540px;\n  z-index: 100;\n  animation: appear-in 0.1s ease-in-out;\n\n  @keyframes appear-in {\n    from {\n      opacity: 0;\n      transform: translateX(-50%) translateY(10px);\n    }\n\n    to {\n      opacity: 1;\n      transform: translateX(-50%) translateY(0);\n    }\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/commands/command-menu.tsx",
      "name": "Button",
      "line_start": 466,
      "line_end": 466,
      "text": " styled(Button)<{isSelected?: boolean}>`\n  display: flex;\n  align-items: center;\n  text-align: left;\n  padding: ${themeGet('space.2')};\n\n  &.isSelected {\n    background-color: ${props => props.theme.colors.btn.hoverBg};\n  }\n\n  &:not(.isSelected):hover {\n    background-color: initial;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('column-visibility-menu')}}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{() => setOpen(false)}"
        }
      ],
      "line_start": 53,
      "line_end": 62,
      "text": "\n    <AnchoredOverlay\n      open={open}\n      renderAnchor={null}\n      anchorRef={anchorRef}\n      overlayProps={{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('column-visibility-menu')}}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n    >\n      <Options key={String(open)} setOpen={setOpen} />\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 106,
      "line_end": 108,
      "text": "<ActionList.LeadingVisual>\n            <Icon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: 'max-content'}}"
        }
      ],
      "line_start": 137,
      "line_end": 157,
      "text": "<ActionList sx={{width: 'max-content'}}>\n        <ActionList.Group>\n          <ActionList.Item\n            key={'new-field'}\n            disabled={!addColumnAllowed}\n            onSelect={onClickNewField}\n            {...testIdProps('new-field-button')}\n          >\n            <ActionList.LeadingVisual>\n              <PlusIcon />\n            </ActionList.LeadingVisual>\n            New field\n          </ActionList.Item>\n        </ActionList.Group>\n        <ActionList.Group selectionVariant=\"multiple\" title=\"Visible fields\">\n          {visibleFieldItems}\n        </ActionList.Group>\n        <ActionList.Group selectionVariant=\"multiple\" title=\"Hidden fields\">\n          {hiddenFieldItems}\n        </ActionList.Group>\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [],
      "line_start": 138,
      "line_end": 150,
      "text": "<ActionList.Group>\n          <ActionList.Item\n            key={'new-field'}\n            disabled={!addColumnAllowed}\n            onSelect={onClickNewField}\n            {...testIdProps('new-field-button')}\n          >\n            <ActionList.LeadingVisual>\n              <PlusIcon />\n            </ActionList.LeadingVisual>\n            New field\n          </ActionList.Item>\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{'new-field'}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!addColumnAllowed}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onClickNewField}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('new-field-button')}"
        }
      ],
      "line_start": 139,
      "line_end": 149,
      "text": "<ActionList.Item\n            key={'new-field'}\n            disabled={!addColumnAllowed}\n            onSelect={onClickNewField}\n            {...testIdProps('new-field-button')}\n          >\n            <ActionList.LeadingVisual>\n              <PlusIcon />\n            </ActionList.LeadingVisual>\n            New field\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 145,
      "line_end": 147,
      "text": "<ActionList.LeadingVisual>\n              <PlusIcon />\n            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"multiple\""
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Visible fields\""
        }
      ],
      "line_start": 151,
      "line_end": 153,
      "text": "<ActionList.Group selectionVariant=\"multiple\" title=\"Visible fields\">\n          {visibleFieldItems}\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/add-column-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"multiple\""
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Hidden fields\""
        }
      ],
      "line_start": 154,
      "line_end": 156,
      "text": "<ActionList.Group selectionVariant=\"multiple\" title=\"Hidden fields\">\n          {hiddenFieldItems}\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "name": "Dialog",
      "props": [
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{title}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"alertdialog\""
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"medium\""
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{onClose}"
        },
        {
          "name": "footerButtons",
          "kind": "JsxExpression",
          "text": "{[confirmButton]}"
        },
        {
          "name": "renderBody",
          "kind": "JsxExpression",
          "text": "{SingleConfirmBody}"
        },
        {
          "name": "renderFooter",
          "kind": "JsxExpression",
          "text": "{SingleConfirmFooter}"
        },
        {
          "name": "renderHeader",
          "kind": "JsxExpression",
          "text": "{SingleConfirmHeader}"
        }
      ],
      "line_start": 51,
      "line_end": 62,
      "text": "\n    <Dialog\n      title={title}\n      role=\"alertdialog\"\n      width=\"medium\"\n      onClose={onClose}\n      footerButtons={[confirmButton]}\n      renderBody={SingleConfirmBody}\n      renderFooter={SingleConfirmFooter}\n      renderHeader={SingleConfirmHeader}\n    >\n      {children}\n    </Dialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "name": "Box",
      "line_start": 66,
      "line_end": 66,
      "text": " styled(Box)`\n  font-size: ${themeGet('fontSizes.1')};\n  padding: 0 ${themeGet('space.3')} ${themeGet('space.3')} ${themeGet('space.3')};\n  color: ${themeGet('colors.fg.muted')};\n  flex-grow: 1;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "name": "Box",
      "line_start": 78,
      "line_end": 78,
      "text": " styled(Box)`\n  font-size: ${themeGet('fontSizes.3')};\n  font-weight: ${themeGet('fontWeights.bold')};\n  padding: 6px ${themeGet('space.2')};\n  flex-grow: 1;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/alert-dialog.tsx",
      "name": "Box",
      "line_start": 84,
      "line_end": 84,
      "text": " styled(Box)`\n  display: flex;\n  margin: 0 ${themeGet('space.3')} ${themeGet('space.3')} ${themeGet('space.3')};\n\n  button {\n    font-size: ${themeGet('fontSizes.1')};\n    flex: 1 1 0;\n    padding: 5px ${themeGet('space.3')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/base-settings-page.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        position: 'relative',\n        backgroundSize: '1px 37px',\n        backgroundPositionY: '15px',\n        backgroundRepeat: 'repeat-x, repeat',\n        backgroundColor: theme => `${theme.colors.canvas.default}`,\n        color: theme => `${theme.colors.fg.default}`,\n        width: '100%',\n        height: '100%',\n        overflow: 'auto',\n        ...props.sx\n      }}"
        }
      ],
      "line_start": 5,
      "line_end": 21,
      "text": "\n    <Box\n      {...props}\n      sx={{\n        position: 'relative',\n        backgroundSize: '1px 37px',\n        backgroundPositionY: '15px',\n        backgroundRepeat: 'repeat-x, repeat',\n        backgroundColor: theme => `${theme.colors.canvas.default}`,\n        color: theme => `${theme.colors.fg.default}`,\n        width: '100%',\n        height: '100%',\n        overflow: 'auto',\n        ...props.sx\n      }}\n    >\n      {children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`custom-label-${props.fieldName}`)}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        display: 'flex',\n        minHeight: '22px'\n      }}"
        }
      ],
      "line_start": 180,
      "line_end": 201,
      "text": "\n    <Label\n      {...testIdProps(`custom-label-${props.fieldName}`)}\n      ref={ref}\n      sx={{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        display: 'flex',\n        minHeight: '22px'\n      }}\n    >\n      <SanitizedHtmlSpan\n        sx={{\n          display: 'block',\n          maxWidth: `calc(${COLUMN_WIDTH} - 6.5em)`,\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          verticalAlign: 'middle',\n          whiteSpace: 'nowrap'\n        }}\n        onClick={onClickHandler}\n      >{`${props.content}`}</SanitizedHtmlSpan>\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`${props.fieldName}: ${tooltipContent}`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        }
      ],
      "line_start": 207,
      "line_end": 209,
      "text": "\n    <Tooltip aria-label={`${props.fieldName}: ${tooltipContent}`} sx={{maxWidth: '100%'}} wrap={true}>\n      {label}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`milestone-label`)}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}"
        }
      ],
      "line_start": 217,
      "line_end": 227,
      "text": "\n    <Label\n      {...testIdProps(`milestone-label`)}\n      ref={ref}\n      sx={{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}\n    >\n      <StyledOcticon icon={MilestoneIcon} size={14} sx={{mr: 1}} /> {props.content}\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`Milestone: ${props.content}`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        }
      ],
      "line_start": 232,
      "line_end": 234,
      "text": "\n    <Tooltip aria-label={`Milestone: ${props.content}`} sx={{maxWidth: '100%'}} wrap={true}>\n      {label}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`repository-label`)}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}"
        }
      ],
      "line_start": 242,
      "line_end": 252,
      "text": "\n    <Label\n      {...testIdProps(`repository-label`)}\n      ref={ref}\n      sx={{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}\n    >\n      <RepositoryIcon repository={repository} size={14} sx={{mr: 1}} /> {repository.name}\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`Repository: ${repository.name}`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        }
      ],
      "line_start": 257,
      "line_end": 259,
      "text": "\n    <Tooltip aria-label={`Repository: ${repository.name}`} sx={{maxWidth: '100%'}} wrap={true}>\n      {label}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`iteration-label`)}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}"
        }
      ],
      "line_start": 269,
      "line_end": 280,
      "text": "\n    <Label\n      {...testIdProps(`iteration-label`)}\n      ref={ref}\n      sx={{\n        backgroundColor: 'canvas.subtle',\n        color: 'fg.muted',\n        minHeight: '22px'\n      }}\n    >\n      <StyledOcticon icon={IterationsIcon} size={14} sx={{mr: 1}} />\n      <SanitizedHtmlSpan>{iteration.titleHtml}</SanitizedHtmlSpan>\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`${props.fieldName}: ${iteration.title}\\n${props.iterationDateRange}`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        }
      ],
      "line_start": 285,
      "line_end": 291,
      "text": "\n    <Tooltip\n      aria-label={`${props.fieldName}: ${iteration.title}\\n${props.iterationDateRange}`}\n      sx={{maxWidth: '100%'}}\n      wrap={true}\n    >\n      {label}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`tracks-label`)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        lineHeight: '18px',\n        position: 'relative'\n      }}"
        }
      ],
      "line_start": 312,
      "line_end": 335,
      "text": "\n    <Box\n      {...testIdProps(`tracks-label`)}\n      sx={{\n        lineHeight: '18px',\n        position: 'relative'\n      }}\n    >\n      <Button\n        variant=\"invisible\"\n        className=\"progressItem\"\n        aria-label={tooltipText}\n        onClick={handleTracksClick}\n        sx={{\n          p: 0,\n          borderRadius: 3,\n          '&:focus-visible': {\n            // Override of the -2px outline-offset style from Primer to make the focus ring visible\n            outlineOffset: '0 !important'\n          }\n        }}\n      >\n        <SubtaskProgress showPercent variant=\"label\" completed={progress.completed} total={progress.total} />\n      </Button>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"progressItem\""
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{tooltipText}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleTracksClick}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          p: 0,\n          borderRadius: 3,\n          '&:focus-visible': {\n            // Override of the -2px outline-offset style from Primer to make the focus ring visible\n            outlineOffset: '0 !important'\n          }\n        }}"
        }
      ],
      "line_start": 319,
      "line_end": 334,
      "text": "<Button\n        variant=\"invisible\"\n        className=\"progressItem\"\n        aria-label={tooltipText}\n        onClick={handleTracksClick}\n        sx={{\n          p: 0,\n          borderRadius: 3,\n          '&:focus-visible': {\n            // Override of the -2px outline-offset style from Primer to make the focus ring visible\n            outlineOffset: '0 !important'\n          }\n        }}\n      >\n        <SubtaskProgress showPercent variant=\"label\" completed={progress.completed} total={progress.total} />\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{tooltipText}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"n\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap"
        }
      ],
      "line_start": 340,
      "line_end": 342,
      "text": "\n    <Tooltip aria-label={tooltipText} direction=\"n\" sx={{maxWidth: '100%'}} wrap>\n      {label}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Box",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{linkedPullRequest.id}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`linked-pr-label`)}"
        }
      ],
      "line_start": 377,
      "line_end": 379,
      "text": "\n          <Box key={linkedPullRequest.id} {...testIdProps(`linked-pr-label`)}>\n            <LinkedPullRequestLabelLink linkedPullRequest={linkedPullRequest} sx={{mt: 0}} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`reviewers-label`)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          color: 'fg.muted',\n          minHeight: '22px'\n        }}"
        }
      ],
      "line_start": 388,
      "line_end": 404,
      "text": "\n      <Label\n        {...testIdProps(`reviewers-label`)}\n        sx={{\n          color: 'fg.muted',\n          minHeight: '22px'\n        }}\n      >\n        <Box sx={{display: 'flex', alignItems: 'center'}}>\n          <MemexAvatarStack\n            items={reviewers.map(itemFromReview)}\n            size={16}\n            backgroundColorThemeValue=\"colors.canvas.default\"\n            maxVisible={3}\n          />\n          <Text sx={{ml: 1}}>{Resources.reviewersCount(reviewers.length)}</Text>\n        </Box>\n      </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 395,
      "line_end": 403,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n          <MemexAvatarStack\n            items={reviewers.map(itemFromReview)}\n            size={16}\n            backgroundColorThemeValue=\"colors.canvas.default\"\n            maxVisible={3}\n          />\n          <Text sx={{ml: 1}}>{Resources.reviewersCount(reviewers.length)}</Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/card-label.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 402,
      "line_end": 402,
      "text": "<Text sx={{ml: 1}}>{Resources.reviewersCount(reviewers.length)}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 22,
      "line_end": 35,
      "text": "\n    <ActionMenu>\n      <ActionMenu.Button as=\"summary\" sx={{px: 2}}>\n        <StyledOcticon icon={BeakerIcon} sx={{color: 'fg.default'}} aria-label=\"Experimental features\" />\n      </ActionMenu.Button>\n      <ActionMenu.Overlay anchorSide=\"inside-right\">\n        <ActionList selectionVariant=\"multiple\">\n          {Object.entries(allFeaturesWithDescriptions).map(([flag, {enabled, description}]) => (\n            <ActionList.Item key={flag} onClick={() => toggleFeature(flag as ClientFeature)} selected={enabled}>\n              <span>{description}</span> <code>({flag})</code>\n            </ActionList.Item>\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"summary\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 2}}"
        }
      ],
      "line_start": 23,
      "line_end": 25,
      "text": "<ActionMenu.Button as=\"summary\" sx={{px: 2}}>\n        <StyledOcticon icon={BeakerIcon} sx={{color: 'fg.default'}} aria-label=\"Experimental features\" />\n      </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "anchorSide",
          "kind": "StringLiteral",
          "text": "\"inside-right\""
        }
      ],
      "line_start": 26,
      "line_end": 34,
      "text": "<ActionMenu.Overlay anchorSide=\"inside-right\">\n        <ActionList selectionVariant=\"multiple\">\n          {Object.entries(allFeaturesWithDescriptions).map(([flag, {enabled, description}]) => (\n            <ActionList.Item key={flag} onClick={() => toggleFeature(flag as ClientFeature)} selected={enabled}>\n              <span>{description}</span> <code>({flag})</code>\n            </ActionList.Item>\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"multiple\""
        }
      ],
      "line_start": 27,
      "line_end": 33,
      "text": "<ActionList selectionVariant=\"multiple\">\n          {Object.entries(allFeaturesWithDescriptions).map(([flag, {enabled, description}]) => (\n            <ActionList.Item key={flag} onClick={() => toggleFeature(flag as ClientFeature)} selected={enabled}>\n              <span>{description}</span> <code>({flag})</code>\n            </ActionList.Item>\n          ))}\n        </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/client-feature-flags-list.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{flag}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => toggleFeature(flag as ClientFeature)}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{enabled}"
        }
      ],
      "line_start": 29,
      "line_end": 31,
      "text": "\n            <ActionList.Item key={flag} onClick={() => toggleFeature(flag as ClientFeature)} selected={enabled}>\n              <span>{description}</span> <code>({flag})</code>\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/column-settings-saved-message.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 17,
      "line_end": 33,
      "text": "\n    <Text sx={{ml: 2}}>\n      Changes saved. Return to{' '}\n      {viewContext ? (\n        <Link\n          as={RouterLink}\n          to={viewContext.returnToViewLinkTo}\n          style={{cursor: 'pointer'}}\n          tabIndex={0}\n          data-test-id=\"return-to-project-link\"\n        >\n          {title}\n        </Link>\n      ) : (\n        title\n      )}\n      .\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/column-settings-saved-message.tsx",
      "name": "Link",
      "props": [
        {
          "name": "as",
          "kind": "JsxExpression",
          "text": "{RouterLink}"
        },
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{viewContext.returnToViewLinkTo}"
        },
        {
          "name": "style",
          "kind": "JsxExpression",
          "text": "{{cursor: 'pointer'}}"
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{0}"
        },
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"return-to-project-link\""
        }
      ],
      "line_start": 20,
      "line_end": 28,
      "text": "\n        <Link\n          as={RouterLink}\n          to={viewContext.returnToViewLinkTo}\n          style={{cursor: 'pointer'}}\n          tabIndex={0}\n          data-test-id=\"return-to-project-link\"\n        >\n          {title}\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/controlled-tooltip.tsx",
      "name": "Portal",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...portalProps}"
        }
      ],
      "line_start": 206,
      "line_end": 219,
      "text": "\n    <Portal {...portalProps}>\n      <TooltipBase\n        ref={ref}\n        role=\"tooltip\"\n        aria-label={text}\n        {...rest}\n        sx={{\n          position: 'fixed',\n          zIndex: 1,\n          ...rest.sx\n        }}\n        className={classes}\n      />\n    </Portal>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{minHeight: '30px', display: 'flex', '& > svg': {ml: 'auto'}}}"
        }
      ],
      "line_start": 115,
      "line_end": 117,
      "text": "\n        <Box sx={{minHeight: '30px', display: 'flex', '& > svg': {ml: 'auto'}}}>\n          <SuccessState /> <Text sx={{ml: 1}}>Saved</Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 116,
      "line_end": 116,
      "text": "<Text sx={{ml: 1}}>Saved</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onCancel}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        }
      ],
      "line_start": 125,
      "line_end": 127,
      "text": "<Button variant=\"invisible\" size=\"small\" sx={{color: 'fg.muted'}} onClick={onCancel} disabled={disabled}>\n          {DescriptionEditorResources.cancelButton}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onSave}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        }
      ],
      "line_start": 128,
      "line_end": 130,
      "text": "<Button variant=\"primary\" size=\"small\" onClick={onSave} disabled={disabled}>\n          {DescriptionEditorResources.saveButton}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{hasWritePermissions && !isEdit && !localDescription ? onEdit : undefined}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!(hasWritePermissions && !isEdit && !localDescription)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            borderRadius: 2,\n            px: 2,\n            py: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            color: 'fg.muted',\n            fontSize: 1,\n            width: '100%',\n            fontWeight: 'normal',\n            mb: 1,\n            mx: -2,\n            ':disabled': {\n              '& > div > span > svg ': {color: 'fg.muted', opacity: 1}\n            },\n            ':hover':\n              !hasWritePermissions || isEdit || localDescription\n                ? {\n                    cursor: 'default',\n                    backgroundColor: 'inherit'\n                  }\n                : {}\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('readme-editor-button')}"
        }
      ],
      "line_start": 138,
      "line_end": 195,
      "text": "\n        <Button\n          variant=\"invisible\"\n          onClick={hasWritePermissions && !isEdit && !localDescription ? onEdit : undefined}\n          disabled={!(hasWritePermissions && !isEdit && !localDescription)}\n          sx={{\n            borderRadius: 2,\n            px: 2,\n            py: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            color: 'fg.muted',\n            fontSize: 1,\n            width: '100%',\n            fontWeight: 'normal',\n            mb: 1,\n            mx: -2,\n            ':disabled': {\n              '& > div > span > svg ': {color: 'fg.muted', opacity: 1}\n            },\n            ':hover':\n              !hasWritePermissions || isEdit || localDescription\n                ? {\n                    cursor: 'default',\n                    backgroundColor: 'inherit'\n                  }\n                : {}\n          }}\n          {...testIdProps('readme-editor-button')}\n        >\n          <Box\n            sx={{\n              width: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              minHeight: 28\n            }}\n          >\n            <span style={{marginRight: '8px'}}>\n              <BookIcon size={16} />\n            </span>\n            <Text sx={{fontSize: 14, fontWeight: 'bold', color: 'fg.default'}}>\n              {DescriptionEditorResources.readmeTitle}\n            </Text>\n          </Box>\n          {!isEdit && !localDescription && (\n            <Box\n              sx={{\n                wordBreak: 'break-word',\n                whiteSpace: 'normal',\n                textAlign: 'start',\n                fontSize: 12,\n                ml: '25px'\n              }}\n            >\n              {DescriptionEditorResources.readmePlaceholder}\n            </Box>\n          )}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              width: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              minHeight: 28\n            }}"
        }
      ],
      "line_start": 167,
      "line_end": 181,
      "text": "<Box\n            sx={{\n              width: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              minHeight: 28\n            }}\n          >\n            <span style={{marginRight: '8px'}}>\n              <BookIcon size={16} />\n            </span>\n            <Text sx={{fontSize: 14, fontWeight: 'bold', color: 'fg.default'}}>\n              {DescriptionEditorResources.readmeTitle}\n            </Text>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 14, fontWeight: 'bold', color: 'fg.default'}}"
        }
      ],
      "line_start": 178,
      "line_end": 180,
      "text": "<Text sx={{fontSize: 14, fontWeight: 'bold', color: 'fg.default'}}>\n              {DescriptionEditorResources.readmeTitle}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                wordBreak: 'break-word',\n                whiteSpace: 'normal',\n                textAlign: 'start',\n                fontSize: 12,\n                ml: '25px'\n              }}"
        }
      ],
      "line_start": 183,
      "line_end": 193,
      "text": "\n            <Box\n              sx={{\n                wordBreak: 'break-word',\n                whiteSpace: 'normal',\n                textAlign: 'start',\n                fontSize: 12,\n                ml: '25px'\n              }}\n            >\n              {DescriptionEditorResources.readmePlaceholder}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mx: 1}}"
        }
      ],
      "line_start": 198,
      "line_end": 200,
      "text": "\n        <Box sx={{mx: 1}}>\n          <SanitizedMarkdownViewer dangerousRenderedHTML={{__html: descriptionHtml}} isLoading={isLoading} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', mb: 4}}"
        }
      ],
      "line_start": 202,
      "line_end": 215,
      "text": "\n        <Box sx={{display: 'flex', flexDirection: 'column', mb: 4}}>\n          <MarkdownEditor\n            value={localDescription}\n            onChange={onChange}\n            disabled={!hasWritePermissions || !isEdit || disabled}\n            placeholder={DescriptionEditorResources.readmePlaceholder}\n            maxLength={MAX_LENGTH}\n            ref={markdownEditorRef}\n            actionButtons={extraButtons}\n            onPrimaryAction={onSave}\n            label={DescriptionEditorResources.label}\n          />\n          {isError && <ErrorState caret=\"top-left\" message={DescriptionEditorResources.errorMessage} />}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            borderRadius: 2,\n            px: 2,\n            py: 1,\n            display: 'flex',\n            alignItems: 'center',\n            color: 'fg.default',\n            fontSize: 1,\n            width: '100%',\n            fontWeight: 'normal',\n            textAlign: 'left',\n            whiteSpace: 'normal',\n            mx: -2,\n            '& > div': {\n              width: isLoading ? '100%' : 'auto',\n              maxWidth: '100%'\n            }\n          }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{!hasWritePermissions || isLoading ? undefined : onEdit}"
        }
      ],
      "line_start": 217,
      "line_end": 240,
      "text": "\n        <Button\n          variant=\"invisible\"\n          sx={{\n            borderRadius: 2,\n            px: 2,\n            py: 1,\n            display: 'flex',\n            alignItems: 'center',\n            color: 'fg.default',\n            fontSize: 1,\n            width: '100%',\n            fontWeight: 'normal',\n            textAlign: 'left',\n            whiteSpace: 'normal',\n            mx: -2,\n            '& > div': {\n              width: isLoading ? '100%' : 'auto',\n              maxWidth: '100%'\n            }\n          }}\n          onClick={!hasWritePermissions || isLoading ? undefined : onEdit}\n        >\n          <SanitizedMarkdownViewer dangerousRenderedHTML={{__html: descriptionHtml}} isLoading={isLoading} />\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'space-between', overflow: 'hidden', flex: 1, display: 'flex'}}"
        }
      ],
      "line_start": 278,
      "line_end": 284,
      "text": "<Box sx={{justifyContent: 'space-between', overflow: 'hidden', flex: 1, display: 'flex'}}>\n                      <span>\n                        <StyledOcticon icon={item.icon} sx={{ml: 2, color: 'fg.muted'}} />\n                        <Text sx={{ml: 2, color: 'fg.muted', fontSize: 1}}>{item.title}</Text>\n                      </span>\n                      <span style={{display: 'flex', alignItems: 'center'}}>{item.shortcutContent}</span>\n                    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/discovery-suggestions.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2, color: 'fg.muted', fontSize: 1}}"
        }
      ],
      "line_start": 281,
      "line_end": 281,
      "text": "<Text sx={{ml: 2, color: 'fg.muted', fontSize: 1}}>{item.title}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('horizontal-group-by-menu')}}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{() => setOpen(false)}"
        }
      ],
      "line_start": 47,
      "line_end": 56,
      "text": "\n    <AnchoredOverlay\n      open={open}\n      renderAnchor={null}\n      anchorRef={anchorRef}\n      overlayProps={{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('horizontal-group-by-menu')}}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n    >\n      <HorizontalOptions key={String(open)} setOpen={setOpen} />\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{column.id}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{groupedByColumn === column}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps(`horizontal-group-by-${column.name}`)}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelection}"
        }
      ],
      "line_start": 111,
      "line_end": 121,
      "text": "\n          <ActionList.Item\n            key={column.id}\n            selected={groupedByColumn === column}\n            {...testIdProps(`horizontal-group-by-${column.name}`)}\n            onSelect={onSelection}\n          >\n            <ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>\n            {column.name}\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 117,
      "line_end": 119,
      "text": "<ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 134,
      "line_end": 150,
      "text": "\n    <ActionList selectionVariant=\"single\">\n      <ActionList.Group title=\"Group By\">{columnItems}</ActionList.Group>\n      {groupedByColumn && (\n        <ActionList.Group>\n          <ActionList.Item\n            key={'clear-group-by'}\n            onSelect={handleClearGroupBy}\n            {...testIdProps('clear-group-by-button')}\n          >\n            <ActionList.LeadingVisual>\n              <XIcon />\n            </ActionList.LeadingVisual>\n            Clear Group By\n          </ActionList.Item>\n        </ActionList.Group>\n      )}\n    </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Group By\""
        }
      ],
      "line_start": 135,
      "line_end": 135,
      "text": "<ActionList.Group title=\"Group By\">{columnItems}</ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [],
      "line_start": 137,
      "line_end": 148,
      "text": "\n        <ActionList.Group>\n          <ActionList.Item\n            key={'clear-group-by'}\n            onSelect={handleClearGroupBy}\n            {...testIdProps('clear-group-by-button')}\n          >\n            <ActionList.LeadingVisual>\n              <XIcon />\n            </ActionList.LeadingVisual>\n            Clear Group By\n          </ActionList.Item>\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{'clear-group-by'}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleClearGroupBy}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('clear-group-by-button')}"
        }
      ],
      "line_start": 138,
      "line_end": 147,
      "text": "<ActionList.Item\n            key={'clear-group-by'}\n            onSelect={handleClearGroupBy}\n            {...testIdProps('clear-group-by-button')}\n          >\n            <ActionList.LeadingVisual>\n              <XIcon />\n            </ActionList.LeadingVisual>\n            Clear Group By\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/horizontal-group-by-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 143,
      "line_end": 145,
      "text": "<ActionList.LeadingVisual>\n              <XIcon />\n            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/issue-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...labelStyles}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...props}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        }
      ],
      "line_start": 64,
      "line_end": 66,
      "text": "\n    <Label sx={{...labelStyles}} {...props} ref={ref}>\n      <SanitizedHtmlSpan>{nameHtml}</SanitizedHtmlSpan>\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/linked-pr-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ...sx}}"
        }
      ],
      "line_start": 32,
      "line_end": 40,
      "text": "\n    <Label sx={{color: 'fg.muted', ...sx}}>\n      <ItemState\n        isDraft={linkedPullRequest.isDraft}\n        state={linkedPullRequest.state}\n        type={ItemType.PullRequest}\n        sx={{mr: 1}}\n      />\n      {`#${linkedPullRequest.number}`}\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mr: 1}}"
        }
      ],
      "line_start": 94,
      "line_end": 118,
      "text": "<Box sx={{display: 'flex', mr: 1}}>\n        {\n          // NOTE: this is using an older hovercards endpoint that accepts a userId.  Once we start fetching users by id, we can use \"/users/:username/hovercard\"\n        }\n        {items.slice(0, maxVisible).map((user, index) => {\n          return (\n            <StyledAvatarBox\n              {...testIdProps('memex-avatar-stack-item')}\n              key={user.id}\n              backgroundColorThemeValue={backgroundColorThemeValue}\n              sx={{\n                zIndex: index\n              }}\n            >\n              <StyledAvatar\n                {...testIdProps(`memex-avatar-state-${user.isIdle ? 'idle' : 'active'}`)}\n                sx={{opacity: user.isIdle ? 0.3 : 1}}\n                size={size}\n                src={user.avatarUrl}\n                data-hovercard-url={user.hovercardUrl}\n              />\n            </StyledAvatarBox>\n          )\n        })}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', zIndex: maxVisible, display: 'flex', alignItems: 'center'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('memex-avatar-stack-overflow')}"
        }
      ],
      "line_start": 120,
      "line_end": 127,
      "text": "\n        <Box\n          sx={{position: 'relative', zIndex: maxVisible, display: 'flex', alignItems: 'center'}}\n          {...testIdProps('memex-avatar-stack-overflow')}\n        >\n          <StyledCounter backgroundColorThemeValue={backgroundColorThemeValue}>\n            <CounterLabel sx={{padding: size === 24 ? '6px 8px' : '2px 4px'}}>+{count - maxVisible}</CounterLabel>\n          </StyledCounter>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{padding: size === 24 ? '6px 8px' : '2px 4px'}}"
        }
      ],
      "line_start": 125,
      "line_end": 125,
      "text": "<CounterLabel sx={{padding: size === 24 ? '6px 8px' : '2px 4px'}}>+{count - maxVisible}</CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "Box",
      "line_start": 38,
      "line_end": 38,
      "text": " styled(Box)`\n  display: flex;\n  align-items: center;\n  position: relative;\n  justify-content: flex-end;\n  z-index: 0;\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n\n    to {\n      opacity: 1;\n    }\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "Box",
      "line_start": 56,
      "line_end": 56,
      "text": " styled(Box)<{backgroundColorThemeValue: string}>`\n  display: flex;\n  align-items: center;\n  border-radius: 100%;\n  flex-shrink: 0;\n  margin-left: 0;\n  margin-right: -${themeGet('space.1')};\n  animation: fadeIn 0.5s ease-in-out;\n  background: ${props => themeGet(props.backgroundColorThemeValue)(props)};\n  box-shadow: 0 0 0 2px ${props => themeGet(props.backgroundColorThemeValue)(props)} !important;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/memex-avatar-stack.tsx",
      "name": "Avatar",
      "line_start": 68,
      "line_end": 68,
      "text": " styled(Avatar)`\n  display: flex;\n  align-items: center;\n  transition: opacity 0.5s ease-in-out;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/potentially-dirty.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative'}}"
        }
      ],
      "line_start": 49,
      "line_end": 52,
      "text": "\n      <Box sx={{position: 'relative'}}>\n        {children}\n        {isDirty && <Box {...props} sx={{...sx, position: 'absolute'}} />}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/presence-avatars.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('presence-avatars')}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...attrs}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{stackRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: '100%'}}"
        }
      ],
      "line_start": 31,
      "line_end": 33,
      "text": "\n    <Box {...testIdProps('presence-avatars')} {...attrs} ref={stackRef} sx={{width: '100%'}}>\n      {users.length > 0 ? <MemexAvatarStack items={users.map(itemFromPresence)} /> : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [],
      "line_start": 31,
      "line_end": 49,
      "text": "\n    <Box>\n      <Box sx={{display: 'flex'}}>\n        <Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={CheckIcon} sx={{color: 'success.fg'}} />\n        </Box>\n\n        <Box sx={{ml: 1}}>\n          <span {...testIdProps('migration-status')}>{statusMessage}</span>\n          <Link sx={{ml: 1}} target=\"_blank\" rel=\"noreferrer\" href={migration.source_project?.path}>\n            View it here <StyledOcticon icon={LinkExternalIcon} sx={{mr: 2}} />\n          </Link>\n        </Box>\n      </Box>\n      <Box sx={{mt: 3, display: 'flex'}}>\n        <Button variant=\"primary\" onClick={closeOverlay}>\n          Done\n        </Button>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 32,
      "line_end": 43,
      "text": "<Box sx={{display: 'flex'}}>\n        <Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={CheckIcon} sx={{color: 'success.fg'}} />\n        </Box>\n\n        <Box sx={{ml: 1}}>\n          <span {...testIdProps('migration-status')}>{statusMessage}</span>\n          <Link sx={{ml: 1}} target=\"_blank\" rel=\"noreferrer\" href={migration.source_project?.path}>\n            View it here <StyledOcticon icon={LinkExternalIcon} sx={{mr: 2}} />\n          </Link>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'space-around'}}"
        }
      ],
      "line_start": 33,
      "line_end": 35,
      "text": "<Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={CheckIcon} sx={{color: 'success.fg'}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 37,
      "line_end": 42,
      "text": "<Box sx={{ml: 1}}>\n          <span {...testIdProps('migration-status')}>{statusMessage}</span>\n          <Link sx={{ml: 1}} target=\"_blank\" rel=\"noreferrer\" href={migration.source_project?.path}>\n            View it here <StyledOcticon icon={LinkExternalIcon} sx={{mr: 2}} />\n          </Link>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Link",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "rel",
          "kind": "StringLiteral",
          "text": "\"noreferrer\""
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{migration.source_project?.path}"
        }
      ],
      "line_start": 39,
      "line_end": 41,
      "text": "<Link sx={{ml: 1}} target=\"_blank\" rel=\"noreferrer\" href={migration.source_project?.path}>\n            View it here <StyledOcticon icon={LinkExternalIcon} sx={{mr: 2}} />\n          </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 3, display: 'flex'}}"
        }
      ],
      "line_start": 44,
      "line_end": 48,
      "text": "<Box sx={{mt: 3, display: 'flex'}}>\n        <Button variant=\"primary\" onClick={closeOverlay}>\n          Done\n        </Button>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{closeOverlay}"
        }
      ],
      "line_start": 45,
      "line_end": 47,
      "text": "<Button variant=\"primary\" onClick={closeOverlay}>\n          Done\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [],
      "line_start": 55,
      "line_end": 72,
      "text": "\n    <Box>\n      <Box sx={{display: 'flex'}}>\n        <Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={XIcon} sx={{color: 'danger.fg'}} />\n        </Box>\n\n        <Box {...testIdProps('migration-status')} sx={{ml: 1}}>\n          {statusMessage}\n        </Box>\n      </Box>\n\n      <Box sx={{mt: 3, display: 'flex', flexDirection: 'row-reverse'}}>\n        <Button variant=\"primary\" onClick={tryAgain} sx={{ml: 2}}>\n          Try again\n        </Button>\n        <Button onClick={cancelMigration}>Cancel</Button>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 56,
      "line_end": 64,
      "text": "<Box sx={{display: 'flex'}}>\n        <Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={XIcon} sx={{color: 'danger.fg'}} />\n        </Box>\n\n        <Box {...testIdProps('migration-status')} sx={{ml: 1}}>\n          {statusMessage}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'space-around'}}"
        }
      ],
      "line_start": 57,
      "line_end": 59,
      "text": "<Box sx={{justifyContent: 'space-around'}}>\n          <StyledOcticon icon={XIcon} sx={{color: 'danger.fg'}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('migration-status')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 61,
      "line_end": 63,
      "text": "<Box {...testIdProps('migration-status')} sx={{ml: 1}}>\n          {statusMessage}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 3, display: 'flex', flexDirection: 'row-reverse'}}"
        }
      ],
      "line_start": 66,
      "line_end": 71,
      "text": "<Box sx={{mt: 3, display: 'flex', flexDirection: 'row-reverse'}}>\n        <Button variant=\"primary\" onClick={tryAgain} sx={{ml: 2}}>\n          Try again\n        </Button>\n        <Button onClick={cancelMigration}>Cancel</Button>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{tryAgain}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 67,
      "line_end": 69,
      "text": "<Button variant=\"primary\" onClick={tryAgain} sx={{ml: 2}}>\n          Try again\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Button",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{cancelMigration}"
        }
      ],
      "line_start": 70,
      "line_end": 70,
      "text": "<Button onClick={cancelMigration}>Cancel</Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 91,
      "line_end": 99,
      "text": "\n    <Box sx={{display: 'flex'}}>\n      <Box sx={{justifyContent: 'space-around', p: 1}}>\n        <Spinner size=\"small\" />\n      </Box>\n\n      <Box {...testIdProps('migration-status')} sx={{ml: 1, mt: '3px'}}>\n        {statusMessage}\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'space-around', p: 1}}"
        }
      ],
      "line_start": 92,
      "line_end": 94,
      "text": "<Box sx={{justifyContent: 'space-around', p: 1}}>\n        <Spinner size=\"small\" />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-description.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('migration-status')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1, mt: '3px'}}"
        }
      ],
      "line_start": 96,
      "line_end": 98,
      "text": "<Box {...testIdProps('migration-status')} sx={{ml: 1, mt: '3px'}}>\n        {statusMessage}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "name": "Popover",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{true}"
        },
        {
          "name": "caret",
          "kind": "StringLiteral",
          "text": "\"bottom\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'fixed', width: '100%', height: '100%', backgroundColor: 'rgba(0, 0, 0, 0.5)'}}"
        }
      ],
      "line_start": 99,
      "line_end": 125,
      "text": "\n    <Popover\n      open={true}\n      caret=\"bottom\"\n      sx={{position: 'fixed', width: '100%', height: '100%', backgroundColor: 'rgba(0, 0, 0, 0.5)'}}\n    >\n      <Popover.Content\n        sx={{\n          paddingTop: '25px',\n          width: '480px',\n          height: popoverHeight,\n          top: '20%',\n          '&::before': {content: 'none !important'},\n          '&::after': {content: 'none !important'}\n        }}\n        {...testIdProps('migration-popover')}\n      >\n        <Heading sx={{fontSize: 3, mb: 2}}>{header}</Heading>\n        <ProgressBar bg={progressBackground} progress={progress} sx={{marginBottom: '15px'}} />\n        <MigrationOverlayDescription\n          migration={prevMigrationState}\n          statusMessage={getStatusMessageFromMigration(prevMigrationState)}\n          cancelMigration={cancelMigration}\n          tryAgain={tryAgain}\n          closeOverlay={closeOverlay}\n        />\n      </Popover.Content>\n    </Popover>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "name": "Popover.Content",
      "parent": "Popover",
      "child": "Content",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          paddingTop: '25px',\n          width: '480px',\n          height: popoverHeight,\n          top: '20%',\n          '&::before': {content: 'none !important'},\n          '&::after': {content: 'none !important'}\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('migration-popover')}"
        }
      ],
      "line_start": 104,
      "line_end": 124,
      "text": "<Popover.Content\n        sx={{\n          paddingTop: '25px',\n          width: '480px',\n          height: popoverHeight,\n          top: '20%',\n          '&::before': {content: 'none !important'},\n          '&::after': {content: 'none !important'}\n        }}\n        {...testIdProps('migration-popover')}\n      >\n        <Heading sx={{fontSize: 3, mb: 2}}>{header}</Heading>\n        <ProgressBar bg={progressBackground} progress={progress} sx={{marginBottom: '15px'}} />\n        <MigrationOverlayDescription\n          migration={prevMigrationState}\n          statusMessage={getStatusMessageFromMigration(prevMigrationState)}\n          cancelMigration={cancelMigration}\n          tryAgain={tryAgain}\n          closeOverlay={closeOverlay}\n        />\n      </Popover.Content>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/project-migration-overlay-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 3, mb: 2}}"
        }
      ],
      "line_start": 115,
      "line_end": 115,
      "text": "<Heading sx={{fontSize: 3, mb: 2}}>{header}</Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{renderAnchor}"
        },
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{\n          onEscape: onCloseClick,\n          onClickOutside: onCloseClick\n        }}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"small\""
        }
      ],
      "line_start": 171,
      "line_end": 197,
      "text": "\n      <AnchoredOverlay\n        anchorRef={anchorRef}\n        renderAnchor={renderAnchor}\n        open={isOpen}\n        overlayProps={{\n          onEscape: onCloseClick,\n          onClickOutside: onCloseClick\n        }}\n        width=\"small\"\n      >\n        <Box onClick={e => e.stopPropagation()}>\n          <Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'stretch', m: 2}}>\n            <ActionList.Item\n              onSelect={() => setShouldShowPrompt(false)}\n              {...testIdProps('draft-prompt-convert-to-issue')}\n            >\n              <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>\n                <Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>\n              </Box>\n              <ActionList.TrailingVisual>\n                <ArrowRightIcon />\n              </ActionList.TrailingVisual>\n            </ActionList.Item>\n          </Box>\n        </Box>\n      </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "Box",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{e => e.stopPropagation()}"
        }
      ],
      "line_start": 181,
      "line_end": 196,
      "text": "<Box onClick={e => e.stopPropagation()}>\n          <Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'stretch', m: 2}}>\n            <ActionList.Item\n              onSelect={() => setShouldShowPrompt(false)}\n              {...testIdProps('draft-prompt-convert-to-issue')}\n            >\n              <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>\n                <Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>\n              </Box>\n              <ActionList.TrailingVisual>\n                <ArrowRightIcon />\n              </ActionList.TrailingVisual>\n            </ActionList.Item>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', alignItems: 'stretch', m: 2}}"
        }
      ],
      "line_start": 182,
      "line_end": 195,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'stretch', m: 2}}>\n            <ActionList.Item\n              onSelect={() => setShouldShowPrompt(false)}\n              {...testIdProps('draft-prompt-convert-to-issue')}\n            >\n              <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>\n                <Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>\n              </Box>\n              <ActionList.TrailingVisual>\n                <ArrowRightIcon />\n              </ActionList.TrailingVisual>\n            </ActionList.Item>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => setShouldShowPrompt(false)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('draft-prompt-convert-to-issue')}"
        }
      ],
      "line_start": 183,
      "line_end": 194,
      "text": "<ActionList.Item\n              onSelect={() => setShouldShowPrompt(false)}\n              {...testIdProps('draft-prompt-convert-to-issue')}\n            >\n              <Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>\n                <Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>\n              </Box>\n              <ActionList.TrailingVisual>\n                <ArrowRightIcon />\n              </ActionList.TrailingVisual>\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column'}}"
        }
      ],
      "line_start": 187,
      "line_end": 190,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column'}}>\n                <Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>\n                <Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}"
        }
      ],
      "line_start": 188,
      "line_end": 188,
      "text": "<Text sx={{display: 'flex', fontSize: 14, fontWeight: 'bold', p: 0}}>{promptOptions.title}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}"
        }
      ],
      "line_start": 189,
      "line_end": 189,
      "text": "<Text sx={{display: 'flex', fontSize: 12, p: 0, color: 'fg.muted'}}>{promptOptions.description}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/repo-picker.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 191,
      "line_end": 193,
      "text": "<ActionList.TrailingVisual>\n                <ArrowRightIcon />\n              </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{my: 3, mx: 2}}"
        }
      ],
      "line_start": 108,
      "line_end": 110,
      "text": "\n      <Box sx={{my: 3, mx: 2}}>\n        <Text>{shortDescription}</Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Text",
      "props": [],
      "line_start": 109,
      "line_end": 109,
      "text": "<Text>{shortDescription}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{hasWritePermissions ? onEdit : undefined}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          borderRadius: 2,\n          px: 2,\n          py: 1,\n          display: 'flex',\n          alignItems: 'center',\n          color: localShortDescription ? 'fg.default' : 'fg.muted',\n          fontSize: 1,\n          width: '100%',\n          fontWeight: 'normal',\n          whiteSpace: 'normal',\n          textAlign: 'left',\n          mt: 3,\n          mx: -2\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('description-editor-edit')}"
        }
      ],
      "line_start": 116,
      "line_end": 137,
      "text": "\n      <Button\n        variant=\"invisible\"\n        onClick={hasWritePermissions ? onEdit : undefined}\n        sx={{\n          borderRadius: 2,\n          px: 2,\n          py: 1,\n          display: 'flex',\n          alignItems: 'center',\n          color: localShortDescription ? 'fg.default' : 'fg.muted',\n          fontSize: 1,\n          width: '100%',\n          fontWeight: 'normal',\n          whiteSpace: 'normal',\n          textAlign: 'left',\n          mt: 3,\n          mx: -2\n        }}\n        {...testIdProps('description-editor-edit')}\n      >\n        {localShortDescription || DescriptionEditorResources.shortDescriptionPlaceholder}\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            flexDirection: 'row-reverse',\n            mt: 2,\n            width: editModeOff ? 415 : '100%',\n            minHeight: '30px'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('readme-editor-buttons')}"
        }
      ],
      "line_start": 162,
      "line_end": 192,
      "text": "\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row-reverse',\n            mt: 2,\n            width: editModeOff ? 415 : '100%',\n            minHeight: '30px'\n          }}\n          {...testIdProps('readme-editor-buttons')}\n        >\n          {isSuccess && editModeOff ? (\n            <>\n              <Text sx={{ml: 1}}>Saved</Text> <SuccessState />\n            </>\n          ) : localShortDescription !== shortDescription || !editModeOff ? (\n            <>\n              <Button variant=\"primary\" size=\"small\" sx={{ml: 2}} onClick={onSave} disabled={isDisabled}>\n                {DescriptionEditorResources.saveButton}\n              </Button>\n              <Button\n                variant=\"invisible\"\n                size=\"small\"\n                sx={{color: 'fg.muted'}}\n                onClick={onCancel}\n                disabled={isDisabled}\n              >\n                {DescriptionEditorResources.cancelButton}\n              </Button>\n            </>\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 174,
      "line_end": 174,
      "text": "<Text sx={{ml: 1}}>Saved</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onSave}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isDisabled}"
        }
      ],
      "line_start": 178,
      "line_end": 180,
      "text": "<Button variant=\"primary\" size=\"small\" sx={{ml: 2}} onClick={onSave} disabled={isDisabled}>\n                {DescriptionEditorResources.saveButton}\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/short-description-editor.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onCancel}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isDisabled}"
        }
      ],
      "line_start": 181,
      "line_end": 189,
      "text": "<Button\n                variant=\"invisible\"\n                size=\"small\"\n                sx={{color: 'fg.muted'}}\n                onClick={onCancel}\n                disabled={isDisabled}\n              >\n                {DescriptionEditorResources.cancelButton}\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, mt: 4, mb: 2}}"
        }
      ],
      "line_start": 122,
      "line_end": 124,
      "text": "<Heading as=\"h4\" sx={{fontSize: 1, mt: 4, mb: 2}}>\n        Options\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{listRef}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...drop.props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          ...additionalStyle,\n          width: '100%',\n          padding: '16px 8px 16px 16px',\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'border.default',\n          borderRadius: 2\n        }}"
        }
      ],
      "line_start": 125,
      "line_end": 161,
      "text": "<Box\n        ref={listRef}\n        {...drop.props}\n        sx={{\n          ...additionalStyle,\n          width: '100%',\n          padding: '16px 8px 16px 16px',\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'border.default',\n          borderRadius: 2\n        }}\n      >\n        <SingleSelectForm\n          options={options}\n          addOption={addOption}\n          updateOption={updateOption}\n          removeOption={removeOption}\n          changeHandler={onOptionChange}\n          canRemoveOption={canRemoveOption}\n          renderTextInput={(o, i, props) => (\n            <EmojiPicker sx={{width: 'calc(100% - 56px)'}}>\n              <TextInput\n                {...props}\n                aria-label=\"New option name\"\n                key={o.id}\n                defaultValue={o.name}\n                ref={(!i && !column.userDefined) || !o.name ? inputRef : null}\n                // eslint-disable-next-line jsx-a11y/no-autofocus\n                autoFocus={(!i && !column.userDefined) || !o.name}\n                placeholder={`Option ${i + 1}`}\n                sx={{bg: 'canvas.default', marginTop: 0}}\n              />\n            </EmojiPicker>\n          )}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 162,
      "line_end": 182,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n        <Button\n          variant=\"primary\"\n          onClick={onClickSave}\n          disabled={!optionsChanged}\n          {...testIdProps('save-options-button')}\n          sx={{my: 3}}\n        >\n          Save options\n        </Button>\n        <Text sx={{pl: 2}}>\n          <RequestStateIcon status={commitState} />\n          {commitState === CommitState.Successful ? (\n            <ColumnSettingsSavedMessage />\n          ) : commitState === CommitState.Failed ? (\n            <Text sx={{ml: 2}} {...testIdProps('single-select-options-error-box')}>\n              {errorMessage.current}\n            </Text>\n          ) : null}\n        </Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClickSave}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!optionsChanged}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('save-options-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{my: 3}}"
        }
      ],
      "line_start": 163,
      "line_end": 171,
      "text": "<Button\n          variant=\"primary\"\n          onClick={onClickSave}\n          disabled={!optionsChanged}\n          {...testIdProps('save-options-button')}\n          sx={{my: 3}}\n        >\n          Save options\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 2}}"
        }
      ],
      "line_start": 172,
      "line_end": 181,
      "text": "<Text sx={{pl: 2}}>\n          <RequestStateIcon status={commitState} />\n          {commitState === CommitState.Successful ? (\n            <ColumnSettingsSavedMessage />\n          ) : commitState === CommitState.Failed ? (\n            <Text sx={{ml: 2}} {...testIdProps('single-select-options-error-box')}>\n              {errorMessage.current}\n            </Text>\n          ) : null}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('single-select-options-error-box')}"
        }
      ],
      "line_start": 177,
      "line_end": 179,
      "text": "\n            <Text sx={{ml: 2}} {...testIdProps('single-select-options-error-box')}>\n              {errorMessage.current}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/single-select-options.tsx",
      "name": "ConfirmationDialog",
      "props": [
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{handleDialogClose}"
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Update field options?\""
        },
        {
          "name": "confirmButtonContent",
          "kind": "StringLiteral",
          "text": "\"Update options\""
        },
        {
          "name": "confirmButtonType",
          "kind": "StringLiteral",
          "text": "\"danger\""
        }
      ],
      "line_start": 184,
      "line_end": 191,
      "text": "\n        <ConfirmationDialog\n          onClose={handleDialogClose}\n          title=\"Update field options?\"\n          confirmButtonContent=\"Update options\"\n          confirmButtonType=\"danger\"\n        >\n          {WorkflowResources.removeColumnOptionsWarning(affectedWorkflowsCount)}\n        </ConfirmationDialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('sort-by-menu')}}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{() => setOpen(false)}"
        }
      ],
      "line_start": 36,
      "line_end": 45,
      "text": "\n    <AnchoredOverlay\n      open={open}\n      renderAnchor={null}\n      anchorRef={anchorRef}\n      overlayProps={{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('sort-by-menu')}}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n    >\n      <Options key={String(open)} setOpen={setOpen} />\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{column.id}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelection}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`sort-by-${column.name}`)}"
        }
      ],
      "line_start": 76,
      "line_end": 86,
      "text": "\n          <ActionList.Item key={column.id} onSelect={onSelection} {...testIdProps(`sort-by-${column.name}`)}>\n            <ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>\n            {column.name}\n            {sortedByColumn === column && (\n              <ActionList.TrailingVisual>\n                {sortDirection === 'asc' ? <SortAscIcon /> : <SortDescIcon />}\n              </ActionList.TrailingVisual>\n            )}\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 77,
      "line_end": 79,
      "text": "<ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 82,
      "line_end": 84,
      "text": "\n              <ActionList.TrailingVisual>\n                {sortDirection === 'asc' ? <SortAscIcon /> : <SortDescIcon />}\n              </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 99,
      "line_end": 111,
      "text": "\n    <ActionList selectionVariant=\"single\">\n      <ActionList.Group key=\"sort-by\" title=\"Sort By\">\n        {columnItems}\n      </ActionList.Group>\n      <ActionList.Group>\n        <ActionList.Item key=\"clear-sort\" onSelect={handleClearSort}>\n          <ActionList.LeadingVisual>\n            <XIcon />\n          </ActionList.LeadingVisual>\n          Clear Sort\n        </ActionList.Item>\n      </ActionList.Group>\n    </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"sort-by\""
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Sort By\""
        }
      ],
      "line_start": 100,
      "line_end": 102,
      "text": "<ActionList.Group key=\"sort-by\" title=\"Sort By\">\n        {columnItems}\n      </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [],
      "line_start": 103,
      "line_end": 110,
      "text": "<ActionList.Group>\n        <ActionList.Item key=\"clear-sort\" onSelect={handleClearSort}>\n          <ActionList.LeadingVisual>\n            <XIcon />\n          </ActionList.LeadingVisual>\n          Clear Sort\n        </ActionList.Item>\n      </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"clear-sort\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleClearSort}"
        }
      ],
      "line_start": 104,
      "line_end": 109,
      "text": "<ActionList.Item key=\"clear-sort\" onSelect={handleClearSort}>\n          <ActionList.LeadingVisual>\n            <XIcon />\n          </ActionList.LeadingVisual>\n          Clear Sort\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/sort-by-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 105,
      "line_end": 107,
      "text": "<ActionList.LeadingVisual>\n            <XIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggested-item-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'center', my: 4, display: 'flex'}}"
        }
      ],
      "line_start": 43,
      "line_end": 45,
      "text": "\n            <Box sx={{justifyContent: 'center', my: 4, display: 'flex'}}>\n              <Spinner size=\"medium\" />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', overflow: 'hidden', flex: '1', display: 'flex'}}"
        }
      ],
      "line_start": 14,
      "line_end": 25,
      "text": "<Box sx={{alignItems: 'center', overflow: 'hidden', flex: '1', display: 'flex'}}>\n        <Box sx={{flexShrink: 0, mr: 2, display: 'flex'}}>\n          <ItemState\n            type={item.type}\n            state={item.state}\n            stateReason={(item as SuggestedIssue)?.stateReason}\n            isDraft={!!(item as SuggestedPullRequest).isDraft}\n          />\n        </Box>\n        <Text>{item.title}</Text>\n        <Text sx={{ml: 1, color: 'fg.muted'}}>{`#${item.number}`}</Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexShrink: 0, mr: 2, display: 'flex'}}"
        }
      ],
      "line_start": 15,
      "line_end": 22,
      "text": "<Box sx={{flexShrink: 0, mr: 2, display: 'flex'}}>\n          <ItemState\n            type={item.type}\n            state={item.state}\n            stateReason={(item as SuggestedIssue)?.stateReason}\n            isDraft={!!(item as SuggestedPullRequest).isDraft}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "name": "Text",
      "props": [],
      "line_start": 23,
      "line_end": 23,
      "text": "<Text>{item.title}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggested-item-option.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1, color: 'fg.muted'}}"
        }
      ],
      "line_start": 24,
      "line_end": 24,
      "text": "<Text sx={{ml: 1, color: 'fg.muted'}}>{`#${item.number}`}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/suggestions-for-repository.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...flexProps}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexShrink: 0, display: 'flex', ...flexProps.sx}}"
        }
      ],
      "line_start": 56,
      "line_end": 58,
      "text": "<Box {...flexProps} sx={{flexShrink: 0, display: 'flex', ...flexProps.sx}}>\n        <SelectedRepositoryPill repository={repository} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/time.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...textProps}"
        }
      ],
      "line_start": 62,
      "line_end": 62,
      "text": "<Text {...textProps}>{children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('vertical-group-by-menu')}}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{() => setOpen(false)}"
        }
      ],
      "line_start": 46,
      "line_end": 55,
      "text": "\n    <AnchoredOverlay\n      open={open}\n      renderAnchor={null}\n      anchorRef={anchorRef}\n      overlayProps={{sx: {maxHeight: clientHeight, overflow: 'auto'}, ...testIdProps('vertical-group-by-menu')}}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n    >\n      <VerticalOptions key={String(open)} />\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{column.id}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{groupedByColumn === column}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelection}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps(`vertical-group-by-${column.name}`)}"
        }
      ],
      "line_start": 89,
      "line_end": 99,
      "text": "\n          <ActionList.Item\n            key={column.id}\n            selected={groupedByColumn === column}\n            onSelect={onSelection}\n            {...testIdProps(`vertical-group-by-${column.name}`)}\n          >\n            <ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>\n            {column.name}\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 95,
      "line_end": 97,
      "text": "<ActionList.LeadingVisual>\n              <Icon />\n            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 105,
      "line_end": 107,
      "text": "\n    <ActionList selectionVariant=\"single\">\n      <ActionList.Group title=\"Column Field\">{columns}</ActionList.Group>\n    </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/vertical-group-by-menu.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Column Field\""
        }
      ],
      "line_start": 106,
      "line_end": 106,
      "text": "<ActionList.Group title=\"Column Field\">{columns}</ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "name": "TabNav",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"tablist\""
        },
        {
          "name": "aria-orientation",
          "kind": "StringLiteral",
          "text": "\"horizontal\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select view\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: [3, 4, 5], bg: 'canvas.inset'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('tab-nav')}"
        }
      ],
      "line_start": 98,
      "line_end": 143,
      "text": "<TabNav\n        role=\"tablist\"\n        aria-orientation=\"horizontal\"\n        aria-label=\"Select view\"\n        sx={{px: [3, 4, 5], bg: 'canvas.inset'}}\n        {...testIdProps('tab-nav')}\n      >\n        {views.map(view => {\n          const selected = view.number === currentView?.number && isProjectViewRoute\n          return (\n            <ViewNavigationTab\n              key={view.number}\n              selected={selected}\n              onTabChange={(e: React.MouseEvent) => {\n                // prevent link from trigger navigation, as view state will do this, but show an href\n                e.preventDefault()\n                if (selected) return\n                setCurrentViewNumber(view.number, {ui: TabNavigationUI})\n              }}\n              view={view}\n            />\n          )\n        })}\n\n        {!isNewMemex && hasWritePermissions && views.length < MAX_VIEWS_PER_PAGE && (\n          <TabNav.Link\n            key=\"new\"\n            as=\"button\"\n            sx={{position: 'relative', display: 'flex', alignItems: 'center', cursor: 'pointer', margin: '0'}}\n            onClick={() => createNewDefaultView({ui: TabNavigationUI})}\n            {...testIdProps('view-navigation-create-new-view')}\n          >\n            <StyledOcticon icon={PlusIcon} sx={{color: 'fg.muted', mr: 2}} />\n            <Text\n              sx={{\n                '&:hover': {color: 'fg.default'},\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                color: 'fg.muted'\n              }}\n            >\n              New view\n            </Text>\n          </TabNav.Link>\n        )}\n      </TabNav>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "name": "TabNav.Link",
      "parent": "TabNav",
      "child": "Link",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"new\""
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', display: 'flex', alignItems: 'center', cursor: 'pointer', margin: '0'}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => createNewDefaultView({ui: TabNavigationUI})}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('view-navigation-create-new-view')}"
        }
      ],
      "line_start": 123,
      "line_end": 141,
      "text": "\n          <TabNav.Link\n            key=\"new\"\n            as=\"button\"\n            sx={{position: 'relative', display: 'flex', alignItems: 'center', cursor: 'pointer', margin: '0'}}\n            onClick={() => createNewDefaultView({ui: TabNavigationUI})}\n            {...testIdProps('view-navigation-create-new-view')}\n          >\n            <StyledOcticon icon={PlusIcon} sx={{color: 'fg.muted', mr: 2}} />\n            <Text\n              sx={{\n                '&:hover': {color: 'fg.default'},\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                color: 'fg.muted'\n              }}\n            >\n              New view\n            </Text>\n          </TabNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                '&:hover': {color: 'fg.default'},\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                color: 'fg.muted'\n              }}"
        }
      ],
      "line_start": 131,
      "line_end": 140,
      "text": "<Text\n              sx={{\n                '&:hover': {color: 'fg.default'},\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n                color: 'fg.muted'\n              }}\n            >\n              New view\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-navigation.tsx",
      "name": "TabNav.Link",
      "parent": "TabNav",
      "child": "Link",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{\n        ref as React.RefObject<any> /**\n      Not sure there's any better way to handle that the \n      ref is a polymorphic type based on the 'as' prop\n    */\n      }"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selected}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"tab\""
        },
        {
          "name": "aria-selected",
          "kind": "JsxExpression",
          "text": "{selected ? 'true' : undefined}"
        },
        {
          "name": "as",
          "kind": "JsxExpression",
          "text": "{selected || isNewMemex ? 'div' : NavLinkWithoutActiveClassName}"
        },
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{\n        selected || isNewMemex ? undefined : PROJECT_VIEW_ROUTE.generatePath({projectNumber, viewNumber: view.number})\n      }"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        margin: 0,\n        flexGrow: 1,\n        width: '150px',\n        maxWidth: 'max-content',\n        minWidth: selected || isNewMemex ? 'min-content' : undefined,\n        px: 3\n      }}"
        },
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{view.name}"
        },
        {
          "name": "onMouseDown",
          "kind": "JsxExpression",
          "text": "{onTabChange}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onTabChange}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('view-navigation-view-tab-link')}"
        }
      ],
      "line_start": 174,
      "line_end": 214,
      "text": "\n    <TabNav.Link\n      ref={\n        ref as React.RefObject<any> /**\n      Not sure there's any better way to handle that the \n      ref is a polymorphic type based on the 'as' prop\n    */\n      }\n      selected={selected}\n      role=\"tab\"\n      aria-selected={selected ? 'true' : undefined}\n      // ensure current tab is not interactive\n      as={selected || isNewMemex ? 'div' : NavLinkWithoutActiveClassName}\n      to={\n        selected || isNewMemex ? undefined : PROJECT_VIEW_ROUTE.generatePath({projectNumber, viewNumber: view.number})\n      }\n      sx={{\n        cursor: 'pointer',\n        display: 'flex',\n        alignItems: 'center',\n        margin: 0,\n        flexGrow: 1,\n        width: '150px',\n        maxWidth: 'max-content',\n        minWidth: selected || isNewMemex ? 'min-content' : undefined,\n        px: 3\n      }}\n      title={view.name}\n      onMouseDown={onTabChange}\n      onClick={onTabChange}\n      {...testIdProps('view-navigation-view-tab-link')}\n    >\n      <ViewTab view={view} selected={selected} />\n      {view.isViewStateDirty && !selected && (\n        <PotentiallyDirty\n          key={`dirty-for-${view.number}`}\n          isDirty={true}\n          hideDirtyState={!hasWritePermissions}\n          sx={{top: '-5px', left: '-4px'}}\n        />\n      )}\n    </TabNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "name": "Box",
      "props": [],
      "line_start": 190,
      "line_end": 192,
      "text": "<Box>\n        <PageIcon selected={selected} viewLayout={view.localViewState.layout} isDeleted={view.isDeleted} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "name": "Box",
      "props": [
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{onKeyDown}"
        },
        {
          "name": "onBlur",
          "kind": "JsxExpression",
          "text": "{onBlur}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{startEditing}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{\n          hasWritePermissions && isEditing\n            ? {\n                px: 1,\n                ml: -1,\n                '&:focus-within': {\n                  boxShadow: 'primer.shadow.focus',\n                  borderRadius: '2'\n                },\n                '&:hover:not(:focus-within)': {\n                  boxShadow: 'primer.shadow.focus',\n                  borderRadius: '2'\n                }\n              }\n            : {\n                px: 1,\n                ml: -1,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis'\n              }\n        }"
        }
      ],
      "line_start": 194,
      "line_end": 255,
      "text": "<Box\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onClick={startEditing}\n        sx={\n          hasWritePermissions && isEditing\n            ? {\n                px: 1,\n                ml: -1,\n                '&:focus-within': {\n                  boxShadow: 'primer.shadow.focus',\n                  borderRadius: '2'\n                },\n                '&:hover:not(:focus-within)': {\n                  boxShadow: 'primer.shadow.focus',\n                  borderRadius: '2'\n                }\n              }\n            : {\n                px: 1,\n                ml: -1,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis'\n              }\n        }\n      >\n        {selected && isEditing ? (\n          <EmojiPicker>\n            <AutosizeTextInput\n              as={BorderlessTextInput}\n              ref={viewNameInputRef}\n              sx={{\n                fontSize: 1\n              }}\n              autoComplete=\"off\"\n              value={localViewName}\n              onChange={onChange}\n              onMouseDown={onMouseDown}\n              onBlur={onBlur}\n              aria-label=\"Change view name\"\n              disabled={isNewMemex || !hasWritePermissions || view.isDeleted}\n              {...inputCompositionProps}\n              {...testIdProps(`view-name-input`)}\n            />\n          </EmojiPicker>\n        ) : (\n          <Text\n            ref={textElementRef}\n            sx={{\n              color: selected ? 'fg.default' : 'fg.muted',\n              '&:hover': {color: 'fg.default'},\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              maxWidth: '100%'\n            }}\n            {...testIdProps(`view-name-static`)}\n          >\n            {localViewName}\n          </Text>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "name": "Text",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{textElementRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              color: selected ? 'fg.default' : 'fg.muted',\n              '&:hover': {color: 'fg.default'},\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              maxWidth: '100%'\n            }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps(`view-name-static`)}"
        }
      ],
      "line_start": 240,
      "line_end": 253,
      "text": "\n          <Text\n            ref={textElementRef}\n            sx={{\n              color: selected ? 'fg.default' : 'fg.muted',\n              '&:hover': {color: 'fg.default'},\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n              textOverflow: 'ellipsis',\n              maxWidth: '100%'\n            }}\n            {...testIdProps(`view-name-static`)}\n          >\n            {localViewName}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 258,
      "line_end": 265,
      "text": "\n        <Box sx={{ml: 2}}>\n          <ViewOptionsMenu\n            viewOptionMenuTriggerRef={viewOptionMenuTriggerRef}\n            view={view}\n            viewNameInputRef={viewNameInputRef}\n            startEditing={startEditing}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-tab.tsx",
      "name": "Box",
      "line_start": 27,
      "line_end": 27,
      "text": " styled(Box)`\n  position: relative;\n  &:after,\n  &:before {\n    content: '';\n    display: none;\n    position: absolute;\n    top: -${themeGet('space.2')};\n    width: ${props => props.theme.space[1]};\n    background-color: ${themeGet('colors.accent.emphasis')};\n    height: calc(100% + ${themeGet('space.3')});\n    border: 0;\n    border-radius: 6px;\n    z-index: 12;\n  }\n  body.is-dragging &.show-sash-view.show-sash-after {\n    &:after {\n      right: -8px;\n      display: block;\n    }\n    &.selected:after {\n      right: -19px;\n    }\n  }\n  body.is-dragging &.show-sash-view.show-sash-before {\n    &:before {\n      left: -8px;\n      display: block;\n    }\n    &.selected:before {\n      left: -19px;\n    }\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "name": "ThemeProvider",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...themeProps}"
        }
      ],
      "line_start": 34,
      "line_end": 40,
      "text": "<ThemeProvider {...themeProps}>\n          <BaseStyles display=\"contents\">\n            <AlertDialog {...confirmationDialogProps} onClose={onClose}>\n              {content}\n            </AlertDialog>\n          </BaseStyles>\n        </ThemeProvider>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/hooks/use-alert.tsx",
      "name": "BaseStyles",
      "props": [
        {
          "name": "display",
          "kind": "StringLiteral",
          "text": "\"contents\""
        }
      ],
      "line_start": 35,
      "line_end": 39,
      "text": "<BaseStyles display=\"contents\">\n            <AlertDialog {...confirmationDialogProps} onClose={onClose}>\n              {content}\n            </AlertDialog>\n          </BaseStyles>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 18,
      "line_end": 18,
      "text": "<Text as=\"h2\">There aren&apos;t any archived items</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 19,
      "line_end": 21,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n        Archive items from a project view and they&apos;ll be shown here.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-empty-states.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 36,
      "line_end": 36,
      "text": "<Text as=\"h2\">No results matched your filter</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        marginTop: 3,\n        bg: 'canvas.subtle',\n        border: '1px solid',\n        borderColor: 'border.default',\n        borderTopLeftRadius: 6,\n        borderTopRightRadius: 6\n      }}"
        }
      ],
      "line_start": 17,
      "line_end": 40,
      "text": "\n    <Box\n      sx={{\n        marginTop: 3,\n        bg: 'canvas.subtle',\n        border: '1px solid',\n        borderColor: 'border.default',\n        borderTopLeftRadius: 6,\n        borderTopRightRadius: 6\n      }}\n    >\n      <Box\n        sx={{\n          p: 2,\n          pl: 4,\n          pr: 3,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          minHeight: '50px'\n        }}\n      >\n        {children}\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          p: 2,\n          pl: 4,\n          pr: 3,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          minHeight: '50px'\n        }}"
        }
      ],
      "line_start": 27,
      "line_end": 39,
      "text": "<Box\n        sx={{\n          p: 2,\n          pl: 4,\n          pr: 3,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          minHeight: '50px'\n        }}\n      >\n        {children}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 140,
      "line_end": 175,
      "text": "<Box sx={{display: 'flex'}}>\n        <Box>\n          {hasItems ? (\n            <Checkbox\n              sx={{mr: 3}}\n              onChange={selectAll}\n              aria-label=\"Toggle select all items\"\n              disabled={isLoadingAllItems}\n              {...(isSelectionPartial ? {indeterminate: true} : {checked: hasSelectedAllItems})}\n            />\n          ) : null}\n        </Box>\n        <Box>\n          {primaryText ? <Text sx={{fontWeight: 'bold'}}>{primaryText}</Text> : null}\n          {loaded && hasItems ? (\n            <Box>\n              {secondaryText ? <Text sx={{color: 'fg.muted', mr: 2}}>{secondaryText}</Text> : null}\n              {loadAllText ? (\n                <Link\n                  as=\"button\"\n                  onClick={loadAllAction}\n                  disabled={isLoadingAllItems}\n                  sx={{\n                    color: isLoadingAllItems ? 'primer.fg.disabled' : undefined,\n                    ['&&']: {\n                      cursor: isLoadingAllItems ? 'default' : 'pointer'\n                    }\n                  }}\n                >\n                  {loadAllText}\n                </Link>\n              ) : null}\n            </Box>\n          ) : null}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [],
      "line_start": 141,
      "line_end": 151,
      "text": "<Box>\n          {hasItems ? (\n            <Checkbox\n              sx={{mr: 3}}\n              onChange={selectAll}\n              aria-label=\"Toggle select all items\"\n              disabled={isLoadingAllItems}\n              {...(isSelectionPartial ? {indeterminate: true} : {checked: hasSelectedAllItems})}\n            />\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [],
      "line_start": 152,
      "line_end": 174,
      "text": "<Box>\n          {primaryText ? <Text sx={{fontWeight: 'bold'}}>{primaryText}</Text> : null}\n          {loaded && hasItems ? (\n            <Box>\n              {secondaryText ? <Text sx={{color: 'fg.muted', mr: 2}}>{secondaryText}</Text> : null}\n              {loadAllText ? (\n                <Link\n                  as=\"button\"\n                  onClick={loadAllAction}\n                  disabled={isLoadingAllItems}\n                  sx={{\n                    color: isLoadingAllItems ? 'primer.fg.disabled' : undefined,\n                    ['&&']: {\n                      cursor: isLoadingAllItems ? 'default' : 'pointer'\n                    }\n                  }}\n                >\n                  {loadAllText}\n                </Link>\n              ) : null}\n            </Box>\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold'}}"
        }
      ],
      "line_start": 153,
      "line_end": 153,
      "text": " <Text sx={{fontWeight: 'bold'}}>{primaryText}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [],
      "line_start": 155,
      "line_end": 172,
      "text": "\n            <Box>\n              {secondaryText ? <Text sx={{color: 'fg.muted', mr: 2}}>{secondaryText}</Text> : null}\n              {loadAllText ? (\n                <Link\n                  as=\"button\"\n                  onClick={loadAllAction}\n                  disabled={isLoadingAllItems}\n                  sx={{\n                    color: isLoadingAllItems ? 'primer.fg.disabled' : undefined,\n                    ['&&']: {\n                      cursor: isLoadingAllItems ? 'default' : 'pointer'\n                    }\n                  }}\n                >\n                  {loadAllText}\n                </Link>\n              ) : null}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', mr: 2}}"
        }
      ],
      "line_start": 156,
      "line_end": 156,
      "text": " <Text sx={{color: 'fg.muted', mr: 2}}>{secondaryText}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Link",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{loadAllAction}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isLoadingAllItems}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                    color: isLoadingAllItems ? 'primer.fg.disabled' : undefined,\n                    ['&&']: {\n                      cursor: isLoadingAllItems ? 'default' : 'pointer'\n                    }\n                  }}"
        }
      ],
      "line_start": 158,
      "line_end": 170,
      "text": "\n                <Link\n                  as=\"button\"\n                  onClick={loadAllAction}\n                  disabled={isLoadingAllItems}\n                  sx={{\n                    color: isLoadingAllItems ? 'primer.fg.disabled' : undefined,\n                    ['&&']: {\n                      cursor: isLoadingAllItems ? 'default' : 'pointer'\n                    }\n                  }}\n                >\n                  {loadAllText}\n                </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', gap: 2}}"
        }
      ],
      "line_start": 179,
      "line_end": 192,
      "text": "\n        <Box sx={{display: 'flex', alignItems: 'center', gap: 2}}>\n          <Button leadingIcon={TrashIcon} variant=\"danger\" size=\"small\" onClick={removeAllSelectedItems}>\n            Delete from project\n          </Button>\n          <Button size=\"small\" onClick={restoreSelectedItems} disabled={!canBulkRestore}>\n            {!canBulkRestore ? (\n              <Tooltip aria-label={`This will exceed the ${projectItemLimit} project item limit`}>\n                Restore unavailable\n              </Tooltip>\n            ) : (\n              'Restore'\n            )}\n          </Button>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{TrashIcon}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{removeAllSelectedItems}"
        }
      ],
      "line_start": 180,
      "line_end": 182,
      "text": "<Button leadingIcon={TrashIcon} variant=\"danger\" size=\"small\" onClick={removeAllSelectedItems}>\n            Delete from project\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{restoreSelectedItems}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!canBulkRestore}"
        }
      ],
      "line_start": 183,
      "line_end": 191,
      "text": "<Button size=\"small\" onClick={restoreSelectedItems} disabled={!canBulkRestore}>\n            {!canBulkRestore ? (\n              <Tooltip aria-label={`This will exceed the ${projectItemLimit} project item limit`}>\n                Restore unavailable\n              </Tooltip>\n            ) : (\n              'Restore'\n            )}\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-header.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`This will exceed the ${projectItemLimit} project item limit`}"
        }
      ],
      "line_start": 185,
      "line_end": 187,
      "text": "\n              <Tooltip aria-label={`This will exceed the ${projectItemLimit} project item limit`}>\n                Restore unavailable\n              </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "style",
          "kind": "JsxExpression",
          "text": "{useMemo(() => ({height: isVisible ? 'unset' : size, flexShrink: 0}), [isVisible, size])}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"li\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{listItemStyles}"
        }
      ],
      "line_start": 46,
      "line_end": 61,
      "text": "\n    <Box\n      style={useMemo(() => ({height: isVisible ? 'unset' : size, flexShrink: 0}), [isVisible, size])}\n      ref={ref}\n      as=\"li\"\n      sx={listItemStyles}\n    >\n      {isVisible ? (\n        <ArchiveItemInner\n          key={archivedItem.id}\n          archivedItem={archivedItem}\n          columnData={columnData}\n          canRestore={canRestore}\n          projectItemLimit={projectItemLimit}\n        />\n      ) : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 4, pt: 2}}"
        }
      ],
      "line_start": 97,
      "line_end": 105,
      "text": "<Box as=\"label\" sx={{pl: 4, pt: 2}}>\n        <Checkbox\n          sx={{alignSelf: 'start'}}\n          aria-labelledby={itemTitleId}\n          checked={isRedactedItem ? false : isSelected(archivedItem.id)}\n          onChange={isRedactedItem ? undefined : onCheck}\n          disabled={isRedactedItem}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 2, pl: 3}}"
        }
      ],
      "line_start": 106,
      "line_end": 108,
      "text": "<Box sx={{pt: 2, pl: 3}}>\n        <MemexItemIcon titleColumn={titleColumnValue} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 2, textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap'}}"
        }
      ],
      "line_start": 109,
      "line_end": 136,
      "text": "<Box sx={{p: 2, textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap'}}>\n        <Box\n          id={itemTitleId}\n          sx={{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}\n        >\n          <InteractiveItemTitle\n            model={archivedItem}\n            currentValue={titleColumnValue}\n            disableSidePanelInteraction={!memex_archive_side_panel}\n          />\n        </Box>\n\n        <Box sx={{color: 'fg.muted', fontSize: 0}}>\n          archived <DistanceTime time={archivedItem.archived.archivedAt} />\n          {!isRedactedItem && archivedItem.archived?.archivedBy ? (\n            <>\n              {' by '}\n              <Text as=\"span\" sx={{color: 'fg.default'}}>\n                {archivedItem.archived.archivedBy.login}\n              </Text>\n            </>\n          ) : null}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{itemTitleId}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}"
        }
      ],
      "line_start": 110,
      "line_end": 123,
      "text": "<Box\n          id={itemTitleId}\n          sx={{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}\n        >\n          <InteractiveItemTitle\n            model={archivedItem}\n            currentValue={titleColumnValue}\n            disableSidePanelInteraction={!memex_archive_side_panel}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', fontSize: 0}}"
        }
      ],
      "line_start": 125,
      "line_end": 135,
      "text": "<Box sx={{color: 'fg.muted', fontSize: 0}}>\n          archived <DistanceTime time={archivedItem.archived.archivedAt} />\n          {!isRedactedItem && archivedItem.archived?.archivedBy ? (\n            <>\n              {' by '}\n              <Text as=\"span\" sx={{color: 'fg.default'}}>\n                {archivedItem.archived.archivedBy.login}\n              </Text>\n            </>\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"span\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 130,
      "line_end": 132,
      "text": "<Text as=\"span\" sx={{color: 'fg.default'}}>\n                {archivedItem.archived.archivedBy.login}\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', mr: 3}}"
        }
      ],
      "line_start": 137,
      "line_end": 175,
      "text": "<Box sx={{display: 'flex', alignItems: 'center', mr: 3}}>\n        {isRedactedItem ? null : (\n          <ActionMenu>\n            <ActionMenu.Anchor>\n              <IconButton\n                icon={KebabHorizontalIcon}\n                variant=\"invisible\"\n                aria-label=\"Open item actions\"\n                sx={{color: 'fg.default'}}\n              />\n            </ActionMenu.Anchor>\n            <ActionMenu.Overlay>\n              <ActionList>\n                <ActionList.Item onSelect={restore} disabled={!canRestore}>\n                  <ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>\n                  {canRestore ? (\n                    'Restore'\n                  ) : (\n                    <>\n                      Restore unavailable\n                      <ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>\n                    </>\n                  )}\n                </ActionList.Item>\n                <ActionList.Item onSelect={remove} variant=\"danger\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete from project\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 139,
      "line_end": 173,
      "text": "\n          <ActionMenu>\n            <ActionMenu.Anchor>\n              <IconButton\n                icon={KebabHorizontalIcon}\n                variant=\"invisible\"\n                aria-label=\"Open item actions\"\n                sx={{color: 'fg.default'}}\n              />\n            </ActionMenu.Anchor>\n            <ActionMenu.Overlay>\n              <ActionList>\n                <ActionList.Item onSelect={restore} disabled={!canRestore}>\n                  <ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>\n                  {canRestore ? (\n                    'Restore'\n                  ) : (\n                    <>\n                      Restore unavailable\n                      <ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>\n                    </>\n                  )}\n                </ActionList.Item>\n                <ActionList.Item onSelect={remove} variant=\"danger\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete from project\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 140,
      "line_end": 147,
      "text": "<ActionMenu.Anchor>\n              <IconButton\n                icon={KebabHorizontalIcon}\n                variant=\"invisible\"\n                aria-label=\"Open item actions\"\n                sx={{color: 'fg.default'}}\n              />\n            </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 148,
      "line_end": 172,
      "text": "<ActionMenu.Overlay>\n              <ActionList>\n                <ActionList.Item onSelect={restore} disabled={!canRestore}>\n                  <ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>\n                  {canRestore ? (\n                    'Restore'\n                  ) : (\n                    <>\n                      Restore unavailable\n                      <ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>\n                    </>\n                  )}\n                </ActionList.Item>\n                <ActionList.Item onSelect={remove} variant=\"danger\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete from project\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 149,
      "line_end": 171,
      "text": "<ActionList>\n                <ActionList.Item onSelect={restore} disabled={!canRestore}>\n                  <ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>\n                  {canRestore ? (\n                    'Restore'\n                  ) : (\n                    <>\n                      Restore unavailable\n                      <ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>\n                    </>\n                  )}\n                </ActionList.Item>\n                <ActionList.Item onSelect={remove} variant=\"danger\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete from project\n                </ActionList.Item>\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{restore}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!canRestore}"
        }
      ],
      "line_start": 150,
      "line_end": 164,
      "text": "<ActionList.Item onSelect={restore} disabled={!canRestore}>\n                  <ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>\n                  {canRestore ? (\n                    'Restore'\n                  ) : (\n                    <>\n                      Restore unavailable\n                      <ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>\n                    </>\n                  )}\n                </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 151,
      "line_end": 153,
      "text": "<ActionList.LeadingVisual>\n                    <HistoryIcon />\n                  </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 159,
      "line_end": 161,
      "text": "<ActionList.Description variant=\"block\">\n                        This will exceed the {projectItemLimit} project item limit\n                      </ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{remove}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        }
      ],
      "line_start": 165,
      "line_end": 170,
      "text": "<ActionList.Item onSelect={remove} variant=\"danger\">\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  Delete from project\n                </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-item.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 166,
      "line_end": 168,
      "text": "<ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-page.tsx",
      "name": "PageLayout",
      "props": [
        {
          "name": "containerWidth",
          "kind": "StringLiteral",
          "text": "\"large\""
        },
        {
          "name": "rowGap",
          "kind": "StringLiteral",
          "text": "\"condensed\""
        }
      ],
      "line_start": 39,
      "line_end": 102,
      "text": "\n    <PageLayout containerWidth=\"large\" rowGap=\"condensed\">\n      <PageLayout.Content>\n        <Box sx={{position: 'sticky', top: -2, pt: 5, mt: -5, backgroundColor: 'canvas.default', zIndex: 1}}>\n          <FilterSuggestionsItemsContext.Provider value={archivedItems ?? fallbackFilterSuggestions}>\n            <TokenizedFilterInput\n              inputRef={searchInputRef}\n              height={filterBarHeight}\n              value={filterValue}\n              onChange={useCallback(e => setFilterValue(e.target.value), [setFilterValue])}\n              onClearButtonClick={useCallback(() => {\n                setFilterValue('')\n              }, [setFilterValue])}\n              containerSx={useMemo(\n                () => ({\n                  zIndex: '1',\n                  borderRadius: 2,\n                  height: 40,\n                  boxShadow: (theme: FixMeTheme) =>\n                    `${boxShadowBorder({size: '1px', color: theme.colors.border.default})}, ${\n                      theme.shadows.primer.shadow.inset\n                    }`,\n                  flexShrink: 0,\n                  '&.is-focused': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  '&:focus-within': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  pl: '12px',\n                  pr: '12px',\n                  maxHeight: filterBarHeight\n                }),\n                []\n              )}\n              inputContainerSx={useMemo(\n                () => ({\n                  ml: 2\n                }),\n                []\n              )}\n              filterCount={filterValue.trim() ? filteredItems.length : undefined}\n              setValueFromSuggestion={setFilterValue}\n            />\n          </FilterSuggestionsItemsContext.Provider>\n          <ArchiveHeader projectItemLimit={projectItemLimit} canBulkRestore={!willSelectionExceedLimit} />\n        </Box>\n\n        <ObserverProvider rootRef={null} sizeEstimate={55}>\n          <ArchivedItems\n            items={filteredItems}\n            loaded={loaded}\n            hasArchive={archivedItems ? archivedItems.length > 0 : false}\n            canRestore={!willSingleRestoreExceedLimit}\n            projectItemLimit={projectItemLimit}\n          />\n        </ObserverProvider>\n      </PageLayout.Content>\n    </PageLayout>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-page.tsx",
      "name": "PageLayout.Content",
      "parent": "PageLayout",
      "child": "Content",
      "props": [],
      "line_start": 40,
      "line_end": 101,
      "text": "<PageLayout.Content>\n        <Box sx={{position: 'sticky', top: -2, pt: 5, mt: -5, backgroundColor: 'canvas.default', zIndex: 1}}>\n          <FilterSuggestionsItemsContext.Provider value={archivedItems ?? fallbackFilterSuggestions}>\n            <TokenizedFilterInput\n              inputRef={searchInputRef}\n              height={filterBarHeight}\n              value={filterValue}\n              onChange={useCallback(e => setFilterValue(e.target.value), [setFilterValue])}\n              onClearButtonClick={useCallback(() => {\n                setFilterValue('')\n              }, [setFilterValue])}\n              containerSx={useMemo(\n                () => ({\n                  zIndex: '1',\n                  borderRadius: 2,\n                  height: 40,\n                  boxShadow: (theme: FixMeTheme) =>\n                    `${boxShadowBorder({size: '1px', color: theme.colors.border.default})}, ${\n                      theme.shadows.primer.shadow.inset\n                    }`,\n                  flexShrink: 0,\n                  '&.is-focused': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  '&:focus-within': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  pl: '12px',\n                  pr: '12px',\n                  maxHeight: filterBarHeight\n                }),\n                []\n              )}\n              inputContainerSx={useMemo(\n                () => ({\n                  ml: 2\n                }),\n                []\n              )}\n              filterCount={filterValue.trim() ? filteredItems.length : undefined}\n              setValueFromSuggestion={setFilterValue}\n            />\n          </FilterSuggestionsItemsContext.Provider>\n          <ArchiveHeader projectItemLimit={projectItemLimit} canBulkRestore={!willSelectionExceedLimit} />\n        </Box>\n\n        <ObserverProvider rootRef={null} sizeEstimate={55}>\n          <ArchivedItems\n            items={filteredItems}\n            loaded={loaded}\n            hasArchive={archivedItems ? archivedItems.length > 0 : false}\n            canRestore={!willSingleRestoreExceedLimit}\n            projectItemLimit={projectItemLimit}\n          />\n        </ObserverProvider>\n      </PageLayout.Content>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archive-page.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'sticky', top: -2, pt: 5, mt: -5, backgroundColor: 'canvas.default', zIndex: 1}}"
        }
      ],
      "line_start": 41,
      "line_end": 90,
      "text": "<Box sx={{position: 'sticky', top: -2, pt: 5, mt: -5, backgroundColor: 'canvas.default', zIndex: 1}}>\n          <FilterSuggestionsItemsContext.Provider value={archivedItems ?? fallbackFilterSuggestions}>\n            <TokenizedFilterInput\n              inputRef={searchInputRef}\n              height={filterBarHeight}\n              value={filterValue}\n              onChange={useCallback(e => setFilterValue(e.target.value), [setFilterValue])}\n              onClearButtonClick={useCallback(() => {\n                setFilterValue('')\n              }, [setFilterValue])}\n              containerSx={useMemo(\n                () => ({\n                  zIndex: '1',\n                  borderRadius: 2,\n                  height: 40,\n                  boxShadow: (theme: FixMeTheme) =>\n                    `${boxShadowBorder({size: '1px', color: theme.colors.border.default})}, ${\n                      theme.shadows.primer.shadow.inset\n                    }`,\n                  flexShrink: 0,\n                  '&.is-focused': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  '&:focus-within': {\n                    boxShadow: (theme: FixMeTheme) =>\n                      `${boxShadowBorder({size: '1px', color: theme.colors.accent.emphasis})}, ${\n                        theme.shadows.primer.shadow.focus\n                      }`\n                  },\n                  pl: '12px',\n                  pr: '12px',\n                  maxHeight: filterBarHeight\n                }),\n                []\n              )}\n              inputContainerSx={useMemo(\n                () => ({\n                  ml: 2\n                }),\n                []\n              )}\n              filterCount={filterValue.trim() ? filteredItems.length : undefined}\n              setValueFromSuggestion={setFilterValue}\n            />\n          </FilterSuggestionsItemsContext.Provider>\n          <ArchiveHeader projectItemLimit={projectItemLimit} canBulkRestore={!willSelectionExceedLimit} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/archive/archived-items.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"ul\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{ulStyles}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('archived-item-list')}"
        }
      ],
      "line_start": 31,
      "line_end": 51,
      "text": "\n    <Box as=\"ul\" sx={ulStyles} {...testIdProps('archived-item-list')}>\n      {!loaded ? (\n        <Loader />\n      ) : !hasArchive ? (\n        <NoArchivedItems />\n      ) : items.length === 0 ? (\n        <NoFilteredItems />\n      ) : (\n        items.map(archivedItem => {\n          return (\n            <ArchiveItem\n              key={archivedItem.id}\n              archivedItem={archivedItem}\n              columnData={archivedItem.columns}\n              canRestore={canRestore}\n              projectItemLimit={projectItemLimit}\n            />\n          )\n        })\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 5, display: ['none', '', '', '', 'block']}}"
        }
      ],
      "line_start": 11,
      "line_end": 71,
      "text": "\n    <Box sx={{ml: 5, display: ['none', '', '', '', 'block']}}>\n      <Box sx={{pb: 3, mb: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}>\n        <Label variant=\"accent\">Coming soon</Label>\n        <Text sx={{display: 'block', fontSize: 1, mt: 2, color: 'fg.muted'}}>Create and edit your own workflows.</Text>\n      </Box>\n      <Box sx={{mb: 4}}>\n        <Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.conditionalsTitle}\n        </Heading>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.conditional.bg}\n          icon={QuestionIcon}\n          title=\"When\"\n          iconColor={colors.conditional.fg}\n        >\n          <AutomationPill>item</AutomationPill>\n          <AutomationPill>condition</AutomationPill>\n        </AutomationBlock>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.conditional.bg}\n          icon={ClockIcon}\n          title=\"On schedule\"\n          iconColor={colors.conditional.fg}\n        >\n          <AutomationPill>time interval</AutomationPill>\n        </AutomationBlock>\n      </Box>\n      <Box>\n        <Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.functionsTitle}\n        </Heading>\n\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={PencilIcon}\n          title=\"Set\"\n          iconColor={colors.method.fg}\n        >\n          <AutomationPill>value</AutomationPill>\n        </AutomationBlock>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={ArchiveIcon}\n          title=\"Archive item\"\n          iconColor={colors.method.fg}\n        />\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={PlayIcon}\n          title=\"Run\"\n          iconColor={colors.method.fg}\n        >\n          <AutomationPill>Actions workflow</AutomationPill>\n        </AutomationBlock>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pb: 3, mb: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}"
        }
      ],
      "line_start": 12,
      "line_end": 15,
      "text": "<Box sx={{pb: 3, mb: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}>\n        <Label variant=\"accent\">Coming soon</Label>\n        <Text sx={{display: 'block', fontSize: 1, mt: 2, color: 'fg.muted'}}>Create and edit your own workflows.</Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Label",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"accent\""
        }
      ],
      "line_start": 13,
      "line_end": 13,
      "text": "<Label variant=\"accent\">Coming soon</Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'block', fontSize: 1, mt: 2, color: 'fg.muted'}}"
        }
      ],
      "line_start": 14,
      "line_end": 14,
      "text": "<Text sx={{display: 'block', fontSize: 1, mt: 2, color: 'fg.muted'}}>Create and edit your own workflows.</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 4}}"
        }
      ],
      "line_start": 16,
      "line_end": 39,
      "text": "<Box sx={{mb: 4}}>\n        <Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.conditionalsTitle}\n        </Heading>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.conditional.bg}\n          icon={QuestionIcon}\n          title=\"When\"\n          iconColor={colors.conditional.fg}\n        >\n          <AutomationPill>item</AutomationPill>\n          <AutomationPill>condition</AutomationPill>\n        </AutomationBlock>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.conditional.bg}\n          icon={ClockIcon}\n          title=\"On schedule\"\n          iconColor={colors.conditional.fg}\n        >\n          <AutomationPill>time interval</AutomationPill>\n        </AutomationBlock>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h3\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, mb: 2, color: 'fg.muted'}}"
        }
      ],
      "line_start": 17,
      "line_end": 19,
      "text": "<Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.conditionalsTitle}\n        </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [],
      "line_start": 40,
      "line_end": 70,
      "text": "<Box>\n        <Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.functionsTitle}\n        </Heading>\n\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={PencilIcon}\n          title=\"Set\"\n          iconColor={colors.method.fg}\n        >\n          <AutomationPill>value</AutomationPill>\n        </AutomationBlock>\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={ArchiveIcon}\n          title=\"Archive item\"\n          iconColor={colors.method.fg}\n        />\n        <AutomationBlock\n          disabled={true}\n          iconBg={colors.method.bg}\n          icon={PlayIcon}\n          title=\"Run\"\n          iconColor={colors.method.fg}\n        >\n          <AutomationPill>Actions workflow</AutomationPill>\n        </AutomationBlock>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h3\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, mb: 2, color: 'fg.muted'}}"
        }
      ],
      "line_start": 41,
      "line_end": 43,
      "text": "<Heading as=\"h3\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n          {WorkflowResources.functionsTitle}\n        </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        p: 3,\n        border: '1px solid',\n        borderRadius: 2,\n        borderColor: 'border.default',\n        backgroundColor: 'canvas.default',\n        boxShadow: 'shadow.medium',\n        my: 2,\n        width: '320px',\n        opacity: props.disabled ? '0.5' : '1',\n        cursor: props.disabled ? 'not-allowed' : 'pointer'\n      }}"
        }
      ],
      "line_start": 86,
      "line_end": 124,
      "text": "\n    <Box\n      sx={{\n        p: 3,\n        border: '1px solid',\n        borderRadius: 2,\n        borderColor: 'border.default',\n        backgroundColor: 'canvas.default',\n        boxShadow: 'shadow.medium',\n        my: 2,\n        width: '320px',\n        opacity: props.disabled ? '0.5' : '1',\n        cursor: props.disabled ? 'not-allowed' : 'pointer'\n      }}\n    >\n      <Box sx={{display: 'flex', alignItems: 'center'}}>\n        <Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>\n        <Box sx={{ml: 2, display: 'flex', flex: 'auto', alignItems: 'center'}}>\n          <Text sx={{whiteSpace: 'nowrap'}}>{props.title}</Text>\n          <Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap'}}>{props.children}</Box>\n        </Box>\n        <Box>\n          <StyledOcticon icon={GrabberIcon} sx={{color: 'fg.muted'}} />\n        </Box>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 100,
      "line_end": 123,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n        <Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>\n        <Box sx={{ml: 2, display: 'flex', flex: 'auto', alignItems: 'center'}}>\n          <Text sx={{whiteSpace: 'nowrap'}}>{props.title}</Text>\n          <Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap'}}>{props.children}</Box>\n        </Box>\n        <Box>\n          <StyledOcticon icon={GrabberIcon} sx={{color: 'fg.muted'}} />\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0\n          }}"
        }
      ],
      "line_start": 101,
      "line_end": 115,
      "text": "<Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2, display: 'flex', flex: 'auto', alignItems: 'center'}}"
        }
      ],
      "line_start": 116,
      "line_end": 119,
      "text": "<Box sx={{ml: 2, display: 'flex', flex: 'auto', alignItems: 'center'}}>\n          <Text sx={{whiteSpace: 'nowrap'}}>{props.title}</Text>\n          <Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap'}}>{props.children}</Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{whiteSpace: 'nowrap'}}"
        }
      ],
      "line_start": 117,
      "line_end": 117,
      "text": "<Text sx={{whiteSpace: 'nowrap'}}>{props.title}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2, display: 'flex', flexWrap: 'wrap'}}"
        }
      ],
      "line_start": 118,
      "line_end": 118,
      "text": "<Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap'}}>{props.children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [],
      "line_start": 120,
      "line_end": 122,
      "text": "<Box>\n          <StyledOcticon icon={GrabberIcon} sx={{color: 'fg.muted'}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{bg: 'accent.subtle', mr: 2, px: 2, py: 1, borderRadius: 3, display: 'inline-flex'}}"
        }
      ],
      "line_start": 130,
      "line_end": 132,
      "text": "\n    <Box sx={{bg: 'accent.subtle', mr: 2, px: 2, py: 1, borderRadius: 3, display: 'inline-flex'}}>\n      <Text sx={{color: 'accent.fg', fontSize: 0}}>{props.children}</Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-block-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'accent.fg', fontSize: 0}}"
        }
      ],
      "line_start": 131,
      "line_end": 131,
      "text": "<Text sx={{color: 'accent.fg', fontSize: 0}}>{props.children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        px: [3, 4, 5],\n        py: 4,\n        display: 'flex',\n        backgroundColor: 'canvas.inset',\n        flexGrow: 1,\n        borderRadius: 2,\n        flexDirection: 'column'\n      }}"
        }
      ],
      "line_start": 43,
      "line_end": 70,
      "text": "\n    <Box\n      sx={{\n        px: [3, 4, 5],\n        py: 4,\n        display: 'flex',\n        backgroundColor: 'canvas.inset',\n        flexGrow: 1,\n        borderRadius: 2,\n        flexDirection: 'column'\n      }}\n    >\n      <Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%'}}>\n        <Box sx={{display: 'flex', alignItems: 'center'}}>\n          <StyledOcticon icon={WorkflowIcon} sx={{color: 'fg.subtle', mr: 2}} />\n          <Heading as=\"h4\" sx={{fontSize: 2, color: 'fg.default'}}>\n            {workflow.name}\n          </Heading>\n        </Box>\n        <Box sx={{display: 'flex'}} {...testIdProps('workflow-enable-toggle')}>\n          <ToggleSwitch checked={workflow.enabled} onChange={enabledOnChange} disabled={disabled}>\n            {workflow.enabled ? 'Enabled' : 'Disabled'}\n          </ToggleSwitch>\n        </Box>\n      </Box>\n      <Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'center', pt: '48px'}}>\n        <AutomationGraph workflow={workflow} />\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%'}}"
        }
      ],
      "line_start": 54,
      "line_end": 66,
      "text": "<Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%'}}>\n        <Box sx={{display: 'flex', alignItems: 'center'}}>\n          <StyledOcticon icon={WorkflowIcon} sx={{color: 'fg.subtle', mr: 2}} />\n          <Heading as=\"h4\" sx={{fontSize: 2, color: 'fg.default'}}>\n            {workflow.name}\n          </Heading>\n        </Box>\n        <Box sx={{display: 'flex'}} {...testIdProps('workflow-enable-toggle')}>\n          <ToggleSwitch checked={workflow.enabled} onChange={enabledOnChange} disabled={disabled}>\n            {workflow.enabled ? 'Enabled' : 'Disabled'}\n          </ToggleSwitch>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 55,
      "line_end": 60,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n          <StyledOcticon icon={WorkflowIcon} sx={{color: 'fg.subtle', mr: 2}} />\n          <Heading as=\"h4\" sx={{fontSize: 2, color: 'fg.default'}}>\n            {workflow.name}\n          </Heading>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 2, color: 'fg.default'}}"
        }
      ],
      "line_start": 57,
      "line_end": 59,
      "text": "<Heading as=\"h4\" sx={{fontSize: 2, color: 'fg.default'}}>\n            {workflow.name}\n          </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('workflow-enable-toggle')}"
        }
      ],
      "line_start": 61,
      "line_end": 65,
      "text": "<Box sx={{display: 'flex'}} {...testIdProps('workflow-enable-toggle')}>\n          <ToggleSwitch checked={workflow.enabled} onChange={enabledOnChange} disabled={disabled}>\n            {workflow.enabled ? 'Enabled' : 'Disabled'}\n          </ToggleSwitch>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', alignItems: 'center', pt: '48px'}}"
        }
      ],
      "line_start": 67,
      "line_end": 69,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column', alignItems: 'center', pt: '48px'}}>\n        <AutomationGraph workflow={workflow} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: '320px', display: 'flex', flexDirection: 'column', alignItems: 'center'}}"
        }
      ],
      "line_start": 50,
      "line_end": 54,
      "text": "\n    <Box sx={{width: '320px', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n      <WhenBlock workflow={workflow} />\n      <Connector workflow={workflow} />\n      <SetBlock workflow={workflow} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', mr: 2}}"
        }
      ],
      "line_start": 68,
      "line_end": 71,
      "text": "<Box sx={{display: 'flex', alignItems: 'center', mr: 2}}>\n        <Box sx={{mr: 2}}>When</Box>\n        <AutomationSetContentTypeSelector workflow={workflow} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2}}"
        }
      ],
      "line_start": 69,
      "line_end": 69,
      "text": "<Box sx={{mr: 2}}>When</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 145,
      "line_end": 148,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n        <Box sx={{mr: 2}}>Set</Box>\n        <AutomationSetFieldSelector action={action} onSelectedChange={selectedOptionChanged} isValid={isValid} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2}}"
        }
      ],
      "line_start": 146,
      "line_end": 146,
      "text": "<Box sx={{mr: 2}}>Set</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2, mt: 2}}"
        }
      ],
      "line_start": 149,
      "line_end": 149,
      "text": " <Box sx={{mr: 2, mt: 2}}>{invalidMessage}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        p: 3,\n        border: '1px solid',\n        borderRadius: 2,\n        borderColor: props.workflow.enabled ? 'border.default' : 'border.subtle',\n        backgroundColor: 'canvas.default',\n        width: '320px',\n        overflowX: 'hidden',\n        transition: 'border-color 0.3s ease-out'\n      }}"
        }
      ],
      "line_start": 164,
      "line_end": 195,
      "text": "\n    <Box\n      sx={{\n        p: 3,\n        border: '1px solid',\n        borderRadius: 2,\n        borderColor: props.workflow.enabled ? 'border.default' : 'border.subtle',\n        backgroundColor: 'canvas.default',\n        width: '320px',\n        overflowX: 'hidden',\n        transition: 'border-color 0.3s ease-out'\n      }}\n    >\n      <Box sx={{display: 'flex', alignItems: 'top'}}>\n        <Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0,\n            mt: '5px'\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>\n        <Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap', flex: 'auto', alignItems: 'center'}}>{props.children}</Box>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'top'}}"
        }
      ],
      "line_start": 176,
      "line_end": 194,
      "text": "<Box sx={{display: 'flex', alignItems: 'top'}}>\n        <Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0,\n            mt: '5px'\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>\n        <Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap', flex: 'auto', alignItems: 'center'}}>{props.children}</Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0,\n            mt: '5px'\n          }}"
        }
      ],
      "line_start": 177,
      "line_end": 192,
      "text": "<Box\n          sx={{\n            bg: props.iconBg,\n            width: 20,\n            height: 20,\n            borderRadius: '4px',\n            p: 0,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexShrink: 0,\n            mt: '5px'\n          }}\n        >\n          <StyledOcticon icon={props.icon} size={14} sx={{color: props.iconColor}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-graph.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2, display: 'flex', flexWrap: 'wrap', flex: 'auto', alignItems: 'center'}}"
        }
      ],
      "line_start": 193,
      "line_end": 193,
      "text": "<Box sx={{ml: 2, display: 'flex', flexWrap: 'wrap', flex: 'auto', alignItems: 'center'}}>{props.children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-pill.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        bg,\n        color,\n        borderRadius: 3,\n        px: 2,\n        py: 1,\n        my: '2px',\n        cursor: isEditable ? 'pointer' : 'default',\n        whiteSpace: 'nowrap',\n        fontSize: 0\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...props}"
        }
      ],
      "line_start": 21,
      "line_end": 36,
      "text": "\n    <Box\n      sx={{\n        bg,\n        color,\n        borderRadius: 3,\n        px: 2,\n        py: 1,\n        my: '2px',\n        cursor: isEditable ? 'pointer' : 'default',\n        whiteSpace: 'nowrap',\n        fontSize: 0\n      }}\n      {...props}\n    >\n      {props.children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{memexWorkflowContentType}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selected}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelection}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`workflows-when-content-types-option-${memexWorkflowContentType}`)}"
        }
      ],
      "line_start": 66,
      "line_end": 73,
      "text": "\n        <ActionList.Item\n          key={memexWorkflowContentType}\n          selected={selected}\n          onSelect={onSelection}\n          {...testIdProps(`workflows-when-content-types-option-${memexWorkflowContentType}`)}\n        >\n          {getDisplayTextFromMemexWorkflowContentType(memexWorkflowContentType)}\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setIsOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{async gesture => {\n        if (localContentTypes.length === 0) return\n        if (gesture === 'escape') {\n          setLocalContentTypes(workflow.contentTypes)\n          setIsOpen(false)\n          return\n        }\n\n        await handleContentTypeChangeRequest.perform(localContentTypes)\n        setIsOpen(false)\n      }}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{\n        onKeyDown: e => {\n          if (e.key === 'Escape') {\n            e.preventDefault()\n            setLocalContentTypes(workflow.contentTypes)\n            setIsOpen(false)\n          }\n        },\n        sx: {color: 'fg.default'}\n      }}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{anchorProps => {\n        return (\n          <Box {...anchorProps} {...testIdProps('workflows-when-content-types-anchor')}>\n            <AutomationPill isEditable={true} isValid={hasSelectedOptions}>\n              {pillContents}\n            </AutomationPill>\n          </Box>\n        )\n      }}"
        }
      ],
      "line_start": 108,
      "line_end": 145,
      "text": "\n    <AnchoredOverlay\n      open={isOpen}\n      onOpen={() => setIsOpen(true)}\n      onClose={async gesture => {\n        if (localContentTypes.length === 0) return\n        if (gesture === 'escape') {\n          setLocalContentTypes(workflow.contentTypes)\n          setIsOpen(false)\n          return\n        }\n\n        await handleContentTypeChangeRequest.perform(localContentTypes)\n        setIsOpen(false)\n      }}\n      overlayProps={{\n        onKeyDown: e => {\n          if (e.key === 'Escape') {\n            e.preventDefault()\n            setLocalContentTypes(workflow.contentTypes)\n            setIsOpen(false)\n          }\n        },\n        sx: {color: 'fg.default'}\n      }}\n      renderAnchor={anchorProps => {\n        return (\n          <Box {...anchorProps} {...testIdProps('workflows-when-content-types-anchor')}>\n            <AutomationPill isEditable={true} isValid={hasSelectedOptions}>\n              {pillContents}\n            </AutomationPill>\n          </Box>\n        )\n      }}\n    >\n      <ActionList selectionVariant=\"multiple\" {...testIdProps('workflows-when-content-types-panel')}>\n        {actionListItems}\n      </ActionList>\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...anchorProps}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('workflows-when-content-types-anchor')}"
        }
      ],
      "line_start": 134,
      "line_end": 138,
      "text": "\n          <Box {...anchorProps} {...testIdProps('workflows-when-content-types-anchor')}>\n            <AutomationPill isEditable={true} isValid={hasSelectedOptions}>\n              {pillContents}\n            </AutomationPill>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-set-content-type-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"multiple\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('workflows-when-content-types-panel')}"
        }
      ],
      "line_start": 142,
      "line_end": 144,
      "text": "<ActionList selectionVariant=\"multiple\" {...testIdProps('workflows-when-content-types-panel')}>\n        {actionListItems}\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-set-field-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...anchorProps}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('workflow-set-field-anchor')}"
        }
      ],
      "line_start": 63,
      "line_end": 67,
      "text": "\n          <Box {...anchorProps} {...testIdProps('workflow-set-field-anchor')}>\n            <AutomationPill isEditable={true} isValid={props.isValid}>\n              {pillContents}\n            </AutomationPill>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        flexDirection: 'column',\n        maxWidth: '280px',\n        minWidth: '280px',\n        mr: 5,\n        display: 'flex'\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('settings-side-nav')}"
        }
      ],
      "line_start": 24,
      "line_end": 76,
      "text": "\n    <Box\n      sx={{\n        flexDirection: 'column',\n        maxWidth: '280px',\n        minWidth: '280px',\n        mr: 5,\n        display: 'flex'\n      }}\n      {...testIdProps('settings-side-nav')}\n    >\n      <Heading as=\"h2\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n        Default workflows\n      </Heading>\n      <SideNav aria-label=\"Events\" variant=\"lightweight\" sx={{pb: 4, backgroundColor: 'transparent'}}>\n        {workflows.map(workflow => {\n          const enableable = workflowWithTriggerTypeIsEnableable(workflow.triggerType)\n          return (\n            <SideNav.Link\n              as={NavLinkWithActiveClassName}\n              to={{\n                pathname: PROJECT_WORKFLOW_ID_ROUTE.generatePath({projectNumber, workflowId: workflow.id})\n              }}\n              tabIndex={enableable ? 0 : -1}\n              isActive={workflow.id === activeWorkflow.id}\n              key={workflow.id}\n              sx={{\n                py: '8px !important',\n                px: '8px !important',\n                borderRadius: '6px',\n                display: 'flex',\n                alignItems: 'center',\n                pointerEvents: enableable ? 'auto' : 'none',\n                opacity: enableable ? undefined : 0.5,\n                '&:hover': {\n                  bg: 'neutral.subtle'\n                },\n                '&.selected, &.selected:hover': {\n                  bg: 'border.muted'\n                },\n                '&.selected .disabled, &.selected:hover .disabled': {\n                  color: 'neutral.emphasis'\n                }\n              }}\n            >\n              <ProjectWorkflowIcon workflow={workflow} />\n              <Box sx={{display: 'flex', flex: 'auto', alignItems: 'baseline'}}>\n                <Text sx={{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}>{workflow.name}</Text>\n              </Box>\n            </SideNav.Link>\n          )\n        })}\n      </SideNav>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, mb: 2, color: 'fg.muted'}}"
        }
      ],
      "line_start": 34,
      "line_end": 36,
      "text": "<Heading as=\"h2\" sx={{fontSize: 0, mb: 2, color: 'fg.muted'}}>\n        Default workflows\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "SideNav",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Events\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"lightweight\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pb: 4, backgroundColor: 'transparent'}}"
        }
      ],
      "line_start": 37,
      "line_end": 75,
      "text": "<SideNav aria-label=\"Events\" variant=\"lightweight\" sx={{pb: 4, backgroundColor: 'transparent'}}>\n        {workflows.map(workflow => {\n          const enableable = workflowWithTriggerTypeIsEnableable(workflow.triggerType)\n          return (\n            <SideNav.Link\n              as={NavLinkWithActiveClassName}\n              to={{\n                pathname: PROJECT_WORKFLOW_ID_ROUTE.generatePath({projectNumber, workflowId: workflow.id})\n              }}\n              tabIndex={enableable ? 0 : -1}\n              isActive={workflow.id === activeWorkflow.id}\n              key={workflow.id}\n              sx={{\n                py: '8px !important',\n                px: '8px !important',\n                borderRadius: '6px',\n                display: 'flex',\n                alignItems: 'center',\n                pointerEvents: enableable ? 'auto' : 'none',\n                opacity: enableable ? undefined : 0.5,\n                '&:hover': {\n                  bg: 'neutral.subtle'\n                },\n                '&.selected, &.selected:hover': {\n                  bg: 'border.muted'\n                },\n                '&.selected .disabled, &.selected:hover .disabled': {\n                  color: 'neutral.emphasis'\n                }\n              }}\n            >\n              <ProjectWorkflowIcon workflow={workflow} />\n              <Box sx={{display: 'flex', flex: 'auto', alignItems: 'baseline'}}>\n                <Text sx={{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}>{workflow.name}</Text>\n              </Box>\n            </SideNav.Link>\n          )\n        })}\n      </SideNav>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "SideNav.Link",
      "parent": "SideNav",
      "child": "Link",
      "props": [
        {
          "name": "as",
          "kind": "JsxExpression",
          "text": "{NavLinkWithActiveClassName}"
        },
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{{\n                pathname: PROJECT_WORKFLOW_ID_ROUTE.generatePath({projectNumber, workflowId: workflow.id})\n              }}"
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{enableable ? 0 : -1}"
        },
        {
          "name": "isActive",
          "kind": "JsxExpression",
          "text": "{workflow.id === activeWorkflow.id}"
        },
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{workflow.id}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                py: '8px !important',\n                px: '8px !important',\n                borderRadius: '6px',\n                display: 'flex',\n                alignItems: 'center',\n                pointerEvents: enableable ? 'auto' : 'none',\n                opacity: enableable ? undefined : 0.5,\n                '&:hover': {\n                  bg: 'neutral.subtle'\n                },\n                '&.selected, &.selected:hover': {\n                  bg: 'border.muted'\n                },\n                '&.selected .disabled, &.selected:hover .disabled': {\n                  color: 'neutral.emphasis'\n                }\n              }}"
        }
      ],
      "line_start": 41,
      "line_end": 72,
      "text": "\n            <SideNav.Link\n              as={NavLinkWithActiveClassName}\n              to={{\n                pathname: PROJECT_WORKFLOW_ID_ROUTE.generatePath({projectNumber, workflowId: workflow.id})\n              }}\n              tabIndex={enableable ? 0 : -1}\n              isActive={workflow.id === activeWorkflow.id}\n              key={workflow.id}\n              sx={{\n                py: '8px !important',\n                px: '8px !important',\n                borderRadius: '6px',\n                display: 'flex',\n                alignItems: 'center',\n                pointerEvents: enableable ? 'auto' : 'none',\n                opacity: enableable ? undefined : 0.5,\n                '&:hover': {\n                  bg: 'neutral.subtle'\n                },\n                '&.selected, &.selected:hover': {\n                  bg: 'border.muted'\n                },\n                '&.selected .disabled, &.selected:hover .disabled': {\n                  color: 'neutral.emphasis'\n                }\n              }}\n            >\n              <ProjectWorkflowIcon workflow={workflow} />\n              <Box sx={{display: 'flex', flex: 'auto', alignItems: 'baseline'}}>\n                <Text sx={{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}>{workflow.name}</Text>\n              </Box>\n            </SideNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flex: 'auto', alignItems: 'baseline'}}"
        }
      ],
      "line_start": 69,
      "line_end": 71,
      "text": "<Box sx={{display: 'flex', flex: 'auto', alignItems: 'baseline'}}>\n                <Text sx={{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}>{workflow.name}</Text>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-side-nav.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}"
        }
      ],
      "line_start": 70,
      "line_end": 70,
      "text": "<Text sx={{flex: 'auto', color: 'fg.default', fontWeight: 'normal'}}>{workflow.name}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/automation/automation-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 4, pb: 3, px: [3, 4, 5], display: 'flex', flex: 'auto', height: '100%'}}"
        }
      ],
      "line_start": 23,
      "line_end": 27,
      "text": "\n    <Box sx={{pt: 4, pb: 3, px: [3, 4, 5], display: 'flex', flex: 'auto', height: '100%'}}>\n      <AutomationSideNav workflows={workflows} activeWorkflow={activeWorkflow} />\n      <AutomationGraphView workflow={activeWorkflow} key={activeWorkflow.id} />\n      <AutomationBlockList />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/add-new-column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pr: 4, display: 'flex'}}"
        }
      ],
      "line_start": 24,
      "line_end": 46,
      "text": "\n      <Box sx={{pr: 4, display: 'flex'}}>\n        <Box\n          ref={uglyRef}\n          aria-label=\"Add a new column to the board\"\n          as=\"button\"\n          sx={{\n            width: 36,\n            minWidth: 36,\n            height: 36,\n            justifyContent: 'center',\n            alignItems: 'center',\n            bg: 'canvas.subtle',\n            border: 'none',\n            borderRadius: 2,\n            cursor: 'pointer',\n            display: 'flex'\n          }}\n          onClick={onClick}\n          {...testIdProps('add-new-column-button')}\n        >\n          <StyledOcticon icon={PlusIcon} sx={{color: 'fg.muted'}} />\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/add-new-column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{uglyRef}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Add a new column to the board\""
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            width: 36,\n            minWidth: 36,\n            height: 36,\n            justifyContent: 'center',\n            alignItems: 'center',\n            bg: 'canvas.subtle',\n            border: 'none',\n            borderRadius: 2,\n            cursor: 'pointer',\n            display: 'flex'\n          }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('add-new-column-button')}"
        }
      ],
      "line_start": 25,
      "line_end": 45,
      "text": "<Box\n          ref={uglyRef}\n          aria-label=\"Add a new column to the board\"\n          as=\"button\"\n          sx={{\n            width: 36,\n            minWidth: 36,\n            height: 36,\n            justifyContent: 'center',\n            alignItems: 'center',\n            bg: 'canvas.subtle',\n            border: 'none',\n            borderRadius: 2,\n            cursor: 'pointer',\n            display: 'flex'\n          }}\n          onClick={onClick}\n          {...testIdProps('add-new-column-button')}\n        >\n          <StyledOcticon icon={PlusIcon} sx={{color: 'fg.muted'}} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/board.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', flex: 'auto', overflowY: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 451,
      "line_end": 512,
      "text": "<Box sx={{flexDirection: 'column', flex: 'auto', overflowY: 'hidden', display: 'flex'}}>\n        <Box\n          {...testIdProps('board-view')}\n          ref={scrollRef}\n          onPointerDown={onBoardMouseDown}\n          onBlur={onBlur}\n          onTransitionEnd={onTransitionEnd}\n          {...drop.props}\n          sx={{\n            flex: 'auto',\n            height: '0',\n            px: [3, 4, 5],\n            py: 2,\n            overflowY: 'hidden',\n            position: 'relative', // Needed to show the column drag-n-drop sash\n            display: 'flex',\n            ...animation\n          }}\n        >\n          {groupByFieldOptions.map((option, index) => {\n            const filteredItems = query\n              ? itemsGroupedByField[option.id].filter(matchesSearchQuery)\n              : itemsGroupedByField[option.id]\n            const isEditable = hasWritePermissions && option.id !== MissingVerticalGroupId\n            const isDraggable = groupByField?.dataType !== MemexColumnDataType.Iteration\n\n            return (\n              <Column\n                key={option.id}\n                option={option}\n                items={filteredItems}\n                index={index}\n                deleteColumn={deleteColumn}\n                archiveColumn={archiveColumn}\n                renameColumn={renameColumn}\n                onChange={onColumnChange}\n                shouldScrollToBottom={columnShouldScroll === option.id}\n                initialNameFocus={lastNewColumnNameRef.current === option.name}\n                // TODO: Change this to something that ensures it's an editable column\n                // instead of hard-coded MissingStatusColumn.Id.\n                isUserEditable={isEditable}\n                isDraggable={isDraggable}\n                isCurrentIteration={isVerticalGroupCurrentIteration(option)}\n                isIteration={groupByField?.dataType === MemexColumnDataType.Iteration}\n                iterationDateRange={iterationDateRangeMap.get(option.id) ?? ''}\n              />\n            )\n          })}\n          {isCreatingColumn ? <DraftColumn onSave={onDraftSave} onCancel={onDraftCancel} /> : null}\n          {hasWritePermissions && <AddNewColumn ref={addNewColumnRef} onClick={addFieldClick} />}\n        </Box>\n        {hasWritePermissions && (\n          <BoardOmnibar\n            omnibarRef={omnibarRef}\n            horizontalScrollbarSize={horizontalScrollbarSize}\n            getPreviousItemId={getPreviousItemId}\n            groupByFieldId={groupByFieldId}\n            onNewItem={onNewItem}\n            omnibarInitialFocus={omnibarInitialFocus}\n          />\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/board.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('board-view')}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{scrollRef}"
        },
        {
          "name": "onPointerDown",
          "kind": "JsxExpression",
          "text": "{onBoardMouseDown}"
        },
        {
          "name": "onBlur",
          "kind": "JsxExpression",
          "text": "{onBlur}"
        },
        {
          "name": "onTransitionEnd",
          "kind": "JsxExpression",
          "text": "{onTransitionEnd}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...drop.props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            flex: 'auto',\n            height: '0',\n            px: [3, 4, 5],\n            py: 2,\n            overflowY: 'hidden',\n            position: 'relative', // Needed to show the column drag-n-drop sash\n            display: 'flex',\n            ...animation\n          }}"
        }
      ],
      "line_start": 452,
      "line_end": 501,
      "text": "<Box\n          {...testIdProps('board-view')}\n          ref={scrollRef}\n          onPointerDown={onBoardMouseDown}\n          onBlur={onBlur}\n          onTransitionEnd={onTransitionEnd}\n          {...drop.props}\n          sx={{\n            flex: 'auto',\n            height: '0',\n            px: [3, 4, 5],\n            py: 2,\n            overflowY: 'hidden',\n            position: 'relative', // Needed to show the column drag-n-drop sash\n            display: 'flex',\n            ...animation\n          }}\n        >\n          {groupByFieldOptions.map((option, index) => {\n            const filteredItems = query\n              ? itemsGroupedByField[option.id].filter(matchesSearchQuery)\n              : itemsGroupedByField[option.id]\n            const isEditable = hasWritePermissions && option.id !== MissingVerticalGroupId\n            const isDraggable = groupByField?.dataType !== MemexColumnDataType.Iteration\n\n            return (\n              <Column\n                key={option.id}\n                option={option}\n                items={filteredItems}\n                index={index}\n                deleteColumn={deleteColumn}\n                archiveColumn={archiveColumn}\n                renameColumn={renameColumn}\n                onChange={onColumnChange}\n                shouldScrollToBottom={columnShouldScroll === option.id}\n                initialNameFocus={lastNewColumnNameRef.current === option.name}\n                // TODO: Change this to something that ensures it's an editable column\n                // instead of hard-coded MissingStatusColumn.Id.\n                isUserEditable={isEditable}\n                isDraggable={isDraggable}\n                isCurrentIteration={isVerticalGroupCurrentIteration(option)}\n                isIteration={groupByField?.dataType === MemexColumnDataType.Iteration}\n                iterationDateRange={iterationDateRangeMap.get(option.id) ?? ''}\n              />\n            )\n          })}\n          {isCreatingColumn ? <DraftColumn onSave={onDraftSave} onCancel={onDraftCancel} /> : null}\n          {hasWritePermissions && <AddNewColumn ref={addNewColumnRef} onClick={addFieldClick} />}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        borderRadius: 2,\n        borderWidth: '0',\n        pt: 2,\n        pb: '12px',\n        lineHeight: 1.3,\n        backgroundColor: theme => `${isSelected ? theme.colors.accent.subtle : theme.colors.canvas.overlay}`,\n        borderStyle: 'solid',\n        borderColor: theme => `${theme.colors.border.default}`,\n        color: theme => `${isRedactedItem ? theme.colors.fg.muted : theme.colors.fg.default}`\n      }}"
        }
      ],
      "line_start": 485,
      "line_end": 519,
      "text": "\n    <Box\n      sx={{\n        borderRadius: 2,\n        borderWidth: '0',\n        pt: 2,\n        pb: '12px',\n        lineHeight: 1.3,\n        backgroundColor: theme => `${isSelected ? theme.colors.accent.subtle : theme.colors.canvas.overlay}`,\n        borderStyle: 'solid',\n        borderColor: theme => `${theme.colors.border.default}`,\n        color: theme => `${isRedactedItem ? theme.colors.fg.muted : theme.colors.fg.default}`\n      }}\n    >\n      <Box sx={{px: '12px'}}>\n        <Header\n          {...testIdProps(`board-card-header`)}\n          item={item}\n          columnData={columnData}\n          mb={1}\n          archiveItem={archiveItem}\n          removeItem={removeItem}\n          contextMenuRef={contextMenuRef}\n        />\n        <Title item={item} />\n      </Box>\n      {hasFieldsToShow && (\n        <Box sx={{px: '12px', mt: 1}}>\n          <CustomFieldsBox {...testIdProps(`card-labels`)}>\n            {fieldsToDisplay.map(field => (\n              <CardLabel key={field.id} field={field} item={item} columnData={columnData} />\n            ))}\n          </CustomFieldsBox>\n        </Box>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: '12px'}}"
        }
      ],
      "line_start": 498,
      "line_end": 509,
      "text": "<Box sx={{px: '12px'}}>\n        <Header\n          {...testIdProps(`board-card-header`)}\n          item={item}\n          columnData={columnData}\n          mb={1}\n          archiveItem={archiveItem}\n          removeItem={removeItem}\n          contextMenuRef={contextMenuRef}\n        />\n        <Title item={item} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: '12px', mt: 1}}"
        }
      ],
      "line_start": 511,
      "line_end": 517,
      "text": "\n        <Box sx={{px: '12px', mt: 1}}>\n          <CustomFieldsBox {...testIdProps(`card-labels`)}>\n            {fieldsToDisplay.map(field => (\n              <CardLabel key={field.id} field={field} item={item} columnData={columnData} />\n            ))}\n          </CustomFieldsBox>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "name": "Box",
      "line_start": 50,
      "line_end": 50,
      "text": " styled(Box)`\n  &:hover {\n    border-color: ${themeGet('colors.border.default')};\n  }\n\n  &:focus-within :not(.js-disable-context-menu).js-context-menu-trigger,\n  &:focus :not(.js-disable-context-menu).js-context-menu-trigger,\n  &:hover :not(.js-disable-context-menu).js-context-menu-trigger {\n    opacity: unset;\n  }\n\n  &:focus,\n  &.suspended-focus {\n    outline: none;\n    border-color: ${themeGet('colors.accent.emphasis')};\n    box-shadow: 0 0 0 1px ${themeGet('colors.accent.emphasis')};\n  }\n\n  &.selected:not(:focus, .suspended-focus) {\n    outline: none;\n    border-color: ${themeGet('colors.accent.emphasis')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/board/card.tsx",
      "name": "Box",
      "line_start": 74,
      "line_end": 74,
      "text": " styled(Box)`\n  flex-wrap: wrap;\n  display: flex;\n  gap: 4px;\n  margin-top: 8px;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/autosize-text-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{containerSx}"
        }
      ],
      "line_start": 118,
      "line_end": 128,
      "text": "\n      <Box sx={containerSx}>\n        <Sizer ref={sizerRef} aria-hidden=\"true\">\n          {getSizerValue(props.defaultValue, props.value)}\n        </Sizer>\n        {props.placeholder ? (\n          <Sizer ref={placeholderRef} aria-hidden=\"true\">\n            {props.placeholder}\n          </Sizer>\n        ) : null}\n        <As {...componentProps} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/blankslate.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      ...(props.sx || {}),\n      display: 'flex',\n      flex: '1 1 auto',\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      backgroundSize: '1px 37px',\n      backgroundPositionY: '15px',\n      backgroundRepeat: 'repeat-x, repeat'\n    }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n    {...props}"
        }
      ],
      "line_start": 4,
      "line_end": 19,
      "text": "\n  <Box\n    sx={{\n      ...(props.sx || {}),\n      display: 'flex',\n      flex: '1 1 auto',\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      backgroundSize: '1px 37px',\n      backgroundPositionY: '15px',\n      backgroundRepeat: 'repeat-x, repeat'\n    }}\n    {...props}\n  >\n    <Box sx={{m: 'auto', textAlign: 'center'}}>{props.children}</Box>\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/blankslate.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{m: 'auto', textAlign: 'center'}}"
        }
      ],
      "line_start": 18,
      "line_end": 18,
      "text": "<Box sx={{m: 'auto', textAlign: 'center'}}>{props.children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/dropdown-caret.tsx",
      "name": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n    {...props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      border: 'none',\n      boxShadow: 'none',\n      minWidth: '16px',\n      p: 0,\n      ml: 'auto',\n      bg: 'transparent',\n      ':hover': {\n        bg: 'transparent',\n        boxShadow: 'none'\n      }\n    }}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Dropdown button\""
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{-1}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        }
      ],
      "line_start": 9,
      "line_end": 39,
      "text": "\n  <Button\n    {...props}\n    sx={{\n      border: 'none',\n      boxShadow: 'none',\n      minWidth: '16px',\n      p: 0,\n      ml: 'auto',\n      bg: 'transparent',\n      ':hover': {\n        bg: 'transparent',\n        boxShadow: 'none'\n      }\n    }}\n    role=\"button\"\n    aria-label=\"Dropdown button\"\n    tabIndex={-1}\n    ref={ref}\n  >\n    <StyledOcticon\n      icon={TriangleDownIcon}\n      className=\"table-row-dropdown-caret\"\n      size=\"small\"\n      sx={{\n        verticalAlign: 'middle',\n        color: 'fg.muted',\n        opacity: 0.3,\n        '.is-focused &': {opacity: 1}\n      }}\n    />\n  </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/emoji-picker.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'inline-block', '& > *': {width: '100%'}, ...props.sx}}"
        }
      ],
      "line_start": 46,
      "line_end": 46,
      "text": "\n    <Box sx={{display: 'inline-block', '& > *': {width: '100%'}, ...props.sx}}>{props.children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/highlighted-text.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...textProps}"
        }
      ],
      "line_start": 13,
      "line_end": 22,
      "text": "\n    <Text {...textProps}>\n      {chunks.map(chunk => {\n        const textChunk = text.substr(chunk.startIndex, chunk.endIndex - chunk.startIndex)\n        return chunk.highlight ? (\n          <HighlightedMark key={chunk.startIndex.toString()}>{textChunk}</HighlightedMark>\n        ) : (\n          textChunk\n        )\n      })}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/icon-button-with-tooltip.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`${label}${shortcut ? formatShortcutForDisplay(shortcut) : ''}`}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"presentation\""
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"icon-button-with-tooltip__tooltip\""
        }
      ],
      "line_start": 59,
      "line_end": 66,
      "text": "\n      <Tooltip\n        aria-label={`${label}${shortcut ? formatShortcutForDisplay(shortcut) : ''}`}\n        role=\"presentation\"\n        // Apply a known classname so the parent can control the visibility (can only be done through CSS)\n        className=\"icon-button-with-tooltip__tooltip\"\n      >\n        <Icon />\n      </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/portal.tsx",
      "name": "BaseStyles",
      "props": [
        {
          "name": "display",
          "kind": "StringLiteral",
          "text": "\"contents\""
        }
      ],
      "line_start": 27,
      "line_end": 27,
      "text": "<BaseStyles display=\"contents\">{children}</BaseStyles>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "name": "Box",
      "line_start": 17,
      "line_end": 17,
      "text": " styled(Box)`\n  padding: 8px 16px;\n  border: 1px solid rgba(158, 28, 35, 0.2);\n  border-radius: 6px;\n  font-size: 14px;\n  line-height: 20px;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/state-style-decorators.tsx",
      "name": "PointerBox",
      "line_start": 24,
      "line_end": 24,
      "text": " styled(PointerBox)`\n  margin-top: 16px;\n  padding: 8px 6px;\n  border-radius: 6px;\n  font-size: 12px;\n  line-height: 18px;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/toggle-switch.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "htmlFor",
          "kind": "StringLiteral",
          "text": "\"toggle\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Enable workflow\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          cursor: disabled ? 'default' : 'pointer',\n          width: '32px',\n          height: '12px',\n          backgroundColor: 'neutral.muted',\n          display: 'block',\n          borderRadius: '12px',\n          position: 'relative',\n          border: '1px solid',\n          borderColor: 'neutral.muted',\n          lineHeight: 1,\n          fontSize: 1,\n          fontWeight: checked ? 'bold' : 'normal',\n          '&::after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '-4px',\n            left: '-4px',\n            width: '18px',\n            height: '18px',\n            backgroundColor: 'border.default',\n            borderRadius: '16px',\n            transition: '0.3s',\n            boxShadow: (theme: FixMeTheme) =>\n              `1px 0 2px 0 rgba(0,0,0,0.1), inset 0 0 0 1px ${theme.colors.border.subtle}`\n          },\n          '&:active::after': {\n            width: '20px'\n          }\n        }}"
        }
      ],
      "line_start": 33,
      "line_end": 81,
      "text": "<Box\n        as=\"label\"\n        htmlFor=\"toggle\"\n        aria-label=\"Enable workflow\"\n        sx={{\n          cursor: disabled ? 'default' : 'pointer',\n          width: '32px',\n          height: '12px',\n          backgroundColor: 'neutral.muted',\n          display: 'block',\n          borderRadius: '12px',\n          position: 'relative',\n          border: '1px solid',\n          borderColor: 'neutral.muted',\n          lineHeight: 1,\n          fontSize: 1,\n          fontWeight: checked ? 'bold' : 'normal',\n          '&::after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '-4px',\n            left: '-4px',\n            width: '18px',\n            height: '18px',\n            backgroundColor: 'border.default',\n            borderRadius: '16px',\n            transition: '0.3s',\n            boxShadow: (theme: FixMeTheme) =>\n              `1px 0 2px 0 rgba(0,0,0,0.1), inset 0 0 0 1px ${theme.colors.border.subtle}`\n          },\n          '&:active::after': {\n            width: '20px'\n          }\n        }}\n      >\n        <Text\n          sx={{\n            position: 'absolute',\n            right: '100%',\n            marginTop: '-2px',\n            paddingRight: 3,\n            whiteSpace: 'nowrap',\n            textAlign: 'right'\n          }}\n          aria-hidden=\"true\"\n        >\n          {children}\n        </Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/toggle-switch.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            position: 'absolute',\n            right: '100%',\n            marginTop: '-2px',\n            paddingRight: 3,\n            whiteSpace: 'nowrap',\n            textAlign: 'right'\n          }}"
        },
        {
          "name": "aria-hidden",
          "kind": "StringLiteral",
          "text": "\"true\""
        }
      ],
      "line_start": 68,
      "line_end": 80,
      "text": "<Text\n          sx={{\n            position: 'absolute',\n            right: '100%',\n            marginTop: '-2px',\n            paddingRight: 3,\n            whiteSpace: 'nowrap',\n            textAlign: 'right'\n          }}\n          aria-hidden=\"true\"\n        >\n          {children}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/validation-error-popover.tsx",
      "name": "Popover",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "caret",
          "kind": "JsxExpression",
          "text": "{position === 'above' ? 'bottom' : 'top'}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        top: position === 'above' ? `-4px` : `calc(100% + 12px)`,\n        transform: `translateX(-50%)${position === 'above' ? ' translateY(-100%)' : ''}`,\n        // Must use CSS variables to control the caret location because psuedo-elements are not selectable by JS\n        ['--caret-offset' as any]: '0',\n        width: 'max-content',\n        fontSize: 0\n      }}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        }
      ],
      "line_start": 109,
      "line_end": 144,
      "text": "\n    <Popover\n      open={open}\n      caret={position === 'above' ? 'bottom' : 'top'}\n      sx={{\n        top: position === 'above' ? `-4px` : `calc(100% + 12px)`,\n        transform: `translateX(-50%)${position === 'above' ? ' translateY(-100%)' : ''}`,\n        // Must use CSS variables to control the caret location because psuedo-elements are not selectable by JS\n        ['--caret-offset' as any]: '0',\n        width: 'max-content',\n        fontSize: 0\n      }}\n      ref={containerRef}\n    >\n      <Popover.Content\n        as=\"p\"\n        aria-live=\"polite\"\n        id={id}\n        sx={{\n          pt: 1,\n          pb: 1,\n          pr: 2,\n          pl: 2,\n          // Delegate width control to parent so max-width works\n          width: 'auto',\n          color: 'fg.onEmphasis',\n          borderColor: 'danger.muted',\n          backgroundColor: 'danger.emphasis',\n          textAlign: 'center',\n          '&::before': caretSx,\n          '&::after': caretSx\n        }}\n        {...testIdProps(testId ?? 'validation-error-popover')}\n      >\n        {message}\n      </Popover.Content>\n    </Popover>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/validation-error-popover.tsx",
      "name": "Popover.Content",
      "parent": "Popover",
      "child": "Content",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        },
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{id}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          pt: 1,\n          pb: 1,\n          pr: 2,\n          pl: 2,\n          // Delegate width control to parent so max-width works\n          width: 'auto',\n          color: 'fg.onEmphasis',\n          borderColor: 'danger.muted',\n          backgroundColor: 'danger.emphasis',\n          textAlign: 'center',\n          '&::before': caretSx,\n          '&::after': caretSx\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(testId ?? 'validation-error-popover')}"
        }
      ],
      "line_start": 122,
      "line_end": 143,
      "text": "<Popover.Content\n        as=\"p\"\n        aria-live=\"polite\"\n        id={id}\n        sx={{\n          pt: 1,\n          pb: 1,\n          pr: 2,\n          pl: 2,\n          // Delegate width control to parent so max-width works\n          width: 'auto',\n          color: 'fg.onEmphasis',\n          borderColor: 'danger.muted',\n          backgroundColor: 'danger.emphasis',\n          textAlign: 'center',\n          '&::before': caretSx,\n          '&::after': caretSx\n        }}\n        {...testIdProps(testId ?? 'validation-error-popover')}\n      >\n        {message}\n      </Popover.Content>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/error-boundaries/blankslate-error-message.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 3}}"
        }
      ],
      "line_start": 22,
      "line_end": 24,
      "text": "<Text as=\"h2\" sx={{mt: 3}}>\n      {heading}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/error-boundaries/blankslate-error-message.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 25,
      "line_end": 27,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n      {content}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/error-boundaries/project-error-fallback.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{clickHandler}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 2, mx: 'auto'}}"
        }
      ],
      "line_start": 16,
      "line_end": 18,
      "text": "<Button variant=\"primary\" onClick={clickHandler} sx={{mt: 2, mx: 'auto'}}>\n        Reload\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/click-to-filter.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{toggleFilterOnClick}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`Enhancement: Click to toggle filtering by ${props.filterKey} = ${props.filterValue}`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...buttonStyles, ...props.overrideButtonStyle, maxWidth: '100%'}}"
        }
      ],
      "line_start": 39,
      "line_end": 46,
      "text": "\n    <Button\n      variant=\"invisible\"\n      onClick={toggleFilterOnClick}\n      aria-label={`Enhancement: Click to toggle filtering by ${props.filterKey} = ${props.filterValue}`}\n      sx={{...buttonStyles, ...props.overrideButtonStyle, maxWidth: '100%'}}\n    >\n      {props.children}\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: '16px'}}"
        }
      ],
      "line_start": 27,
      "line_end": 29,
      "text": "\n      <Box sx={{width: '16px'}}>\n        <StyledOcticon icon={FilterIcon} sx={{color: 'fg.muted'}} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/filter-icon-button.tsx",
      "name": "IconButton",
      "line_start": 45,
      "line_end": 45,
      "text": " styled(IconButton)`\n  z-index: 2;\n  margin: 0;\n  padding: 0;\n\n  &:hover {\n    color: ${themeGet('colors.accent.fg')};\n  }\n\n  &:focus {\n    border: 0;\n    outline: 0;\n    box-shadow: ${themeGet('shadows.btn.focusShadow')};\n  }\n\n  .is-focused & {\n    color: ${themeGet('colors.accent.fg')};\n  }\n  ${sx}\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/filter-bar/filter-suggestions.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'accent.fg'}}"
        }
      ],
      "line_start": 436,
      "line_end": 436,
      "text": " <Text sx={{color: 'accent.fg'}}>{value}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('base-filter-input')}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleContainerClick}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        boxShadow: theme => `0 1px 0 ${theme.colors.border.default}, ${theme.shadows.shadow.medium}`,\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        maxHeight: `${visible ? height : 0}`,\n        maxWidth: '100%',\n        pl: 4,\n        pr: [3, 4, 5],\n        position: 'relative',\n        zIndex: `${visible ? '2' : 'unset'}`,\n        ':hover': {\n          cursor: 'text'\n        },\n        '&.is-focused': {\n          boxShadow: theme => `${theme.shadows.btn.focusShadow}, ${theme.shadows.shadow.medium}`\n        },\n        '&:focus-within': {\n          boxShadow: theme => `${theme.shadows.btn.focusShadow}, ${theme.shadows.shadow.medium}`\n        },\n        ...containerSx\n      }}"
        }
      ],
      "line_start": 221,
      "line_end": 456,
      "text": "\n    <Box\n      {...testIdProps('base-filter-input')}\n      onClick={handleContainerClick}\n      ref={containerRef}\n      sx={{\n        boxShadow: theme => `0 1px 0 ${theme.colors.border.default}, ${theme.shadows.shadow.medium}`,\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        maxHeight: `${visible ? height : 0}`,\n        maxWidth: '100%',\n        pl: 4,\n        pr: [3, 4, 5],\n        position: 'relative',\n        zIndex: `${visible ? '2' : 'unset'}`,\n        ':hover': {\n          cursor: 'text'\n        },\n        '&.is-focused': {\n          boxShadow: theme => `${theme.shadows.btn.focusShadow}, ${theme.shadows.shadow.medium}`\n        },\n        '&:focus-within': {\n          boxShadow: theme => `${theme.shadows.btn.focusShadow}, ${theme.shadows.shadow.medium}`\n        },\n        ...containerSx\n      }}\n    >\n      <Box\n        sx={{\n          alignItems: 'center',\n          pr: 7,\n          maxWidth: '100%',\n          flexShrink: 1,\n          display: 'flex',\n          minWidth: '20px'\n        }}\n      >\n        <Box\n          sx={{\n            opacity: visible ? '1' : '0',\n            position: 'relative',\n            maxHeight: visible ? 'unset' : '0px'\n          }}\n        >\n          <FilterIconButton\n            onClick={onFilterIconButtonClick}\n            {...testIdProps('filter-visible-icon-button')}\n            tabIndex={visible ? 0 : -1}\n          />\n        </Box>\n        <Box\n          sx={{\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            zIndex: visible ? 2 : 0,\n            opacity: visible ? 1 : 0,\n            transition: 'opacity 0.1s ease-out',\n            maxWidth: 'calc(100% - 30px)',\n            marginRight: '8px',\n            marginLeft: '22px',\n            marginBottom: '-1px',\n            maxHeight: visible ? 'unset' : '0px',\n            overflowX: 'auto',\n            height: '100%',\n            msOverflowStyle: 'none',\n            scrollbarWidth: 'none',\n            '&::-webkit-scrollbar': {\n              display: 'none'\n            },\n            ...inputContainerSx\n          }}\n        >\n          <TokenizedQuery\n            sx={{\n              position: 'absolute',\n              userSelect: 'none',\n              whiteSpace: 'nowrap',\n              wordBreak: 'break-word',\n              fontSize: 1,\n              flex: 1,\n              width: '100%',\n              padding: '0px',\n              opacity: visible ? 1 : 0,\n              top: '50%',\n              transform: 'translateY(-50%)'\n            }}\n            query={value}\n          />\n          <AutosizeTextInput\n            role=\"combobox\"\n            id=\"filter-bar-input\"\n            aria-haspopup=\"listbox\"\n            aria-expanded={areFilterSuggestionsVisible}\n            aria-autocomplete=\"list\"\n            aria-controls={FILTER_INPUT_LIST_ID}\n            as={BorderlessTextInput}\n            aria-label={Resources.filterByKeyboardOrByField}\n            name=\"Filter\"\n            value={value}\n            onChange={onChange}\n            onClick={stopEvent}\n            onKeyDown={handleInputKeyDown}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            placeholder={Resources.filterByKeyboardOrByField}\n            autoComplete=\"off\"\n            autoCorrect=\"false\"\n            autoCapitalize=\"false\"\n            spellCheck=\"false\"\n            {...testIdProps('filter-bar-input')}\n            ref={inputRef}\n            tabIndex={visible ? 0 : -1}\n            containerSx={{\n              maxWidth: '100%',\n              opacity: visible ? '1' : '0'\n            }}\n            sx={{\n              position: 'relative',\n              display: 'flex',\n              resize: 'none',\n              outline: 'none',\n              border: '0px',\n              width: '100%',\n              padding: '0px',\n              background: 'transparent',\n              overflow: 'hidden',\n              overflowX: 'auto',\n              color: 'transparent',\n              minWidth: '20px',\n              caretColor: (theme: FixMeTheme) => theme.colors.fg.default,\n              fontSize: 1,\n              flex: 1,\n              height: '100%',\n              opacity: visible ? 1 : 0,\n              maxHeight: visible ? 'unset' : '0px',\n              '&::-webkit-autofill, &::-webkit-contacts-auto-fill-button, &::-webkit-credentials-auto-fill-button': {\n                visibility: 'hidden',\n                display: 'none !important',\n                pointerEvents: 'none',\n                position: 'absolute',\n                right: 0\n              }\n            }}\n          />\n        </Box>\n\n        <>\n          {typeof filterCount === 'number' ? (\n            <CounterLabel\n              sx={{\n                opacity: visible ? '1' : '0'\n              }}\n              {...testIdProps('filter-results-count')}\n            >\n              {filterCount}\n            </CounterLabel>\n          ) : null}\n          {isClearButtonVisible ? (\n            <IconButton\n              variant=\"invisible\"\n              ref={clearButtonRef}\n              onClick={handleClearButtonClick}\n              onKeyDown={onClearButtonKeyDown}\n              icon={XIcon}\n              sx={{\n                display: 'inline-flex',\n                borderRadius: '6px',\n                m: 0,\n                opacity: visible ? '1' : '0',\n                p: '2px',\n                position: 'relative',\n                color: 'fg.muted'\n              }}\n              aria-label=\"Clear filter query\"\n              {...testIdProps('clear-filter-query')}\n            />\n          ) : null}\n        </>\n      </Box>\n\n      {onResetChanges || onSaveChanges ? (\n        <Box\n          sx={{\n            alignItems: 'center',\n            height,\n            pl: 3,\n            display: 'flex'\n          }}\n          {...testIdProps('filter-state-actions')}\n        >\n          {onResetChanges ? (\n            <IconButton\n              variant=\"invisible\"\n              icon={ReplyIcon}\n              ref={clearButtonRef}\n              onClick={handleResetChanges}\n              sx={{\n                mr: 2,\n                color: 'fg.muted',\n                pr: '6px',\n                pl: '6px',\n                fontSize: 1\n              }}\n              aria-label=\"Revert\"\n              // eslint primer-react/no-system-props rule incorrectly wants to merge \"size\" into system props\n              {...{size: 'small'}}\n              {...testIdProps('filter-actions-reset-button')}\n            />\n          ) : null}\n          {onSaveChanges ? (\n            <Button\n              variant=\"outline\"\n              size=\"small\"\n              sx={{height: '28px'}}\n              onClick={handleSaveChanges}\n              {...testIdProps('filter-actions-save-button')}\n            >\n              {Resources.saveChanges}\n            </Button>\n          ) : null}\n        </Box>\n      ) : null}\n      {visible ? (\n        <FilterSuggestions\n          testId={FILTER_INPUT_LIST_ID}\n          ref={suggestionsListRef}\n          filterInputRef={inputRef}\n          query={value}\n          setQuery={setValueFromSuggestion}\n          areFilterSuggestionsVisible={areFilterSuggestionsVisible}\n          setAreFilterSuggestionsVisible={setAreFilterSuggestionsVisible}\n        />\n      ) : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          alignItems: 'center',\n          pr: 7,\n          maxWidth: '100%',\n          flexShrink: 1,\n          display: 'flex',\n          minWidth: '20px'\n        }}"
        }
      ],
      "line_start": 249,
      "line_end": 401,
      "text": "<Box\n        sx={{\n          alignItems: 'center',\n          pr: 7,\n          maxWidth: '100%',\n          flexShrink: 1,\n          display: 'flex',\n          minWidth: '20px'\n        }}\n      >\n        <Box\n          sx={{\n            opacity: visible ? '1' : '0',\n            position: 'relative',\n            maxHeight: visible ? 'unset' : '0px'\n          }}\n        >\n          <FilterIconButton\n            onClick={onFilterIconButtonClick}\n            {...testIdProps('filter-visible-icon-button')}\n            tabIndex={visible ? 0 : -1}\n          />\n        </Box>\n        <Box\n          sx={{\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            zIndex: visible ? 2 : 0,\n            opacity: visible ? 1 : 0,\n            transition: 'opacity 0.1s ease-out',\n            maxWidth: 'calc(100% - 30px)',\n            marginRight: '8px',\n            marginLeft: '22px',\n            marginBottom: '-1px',\n            maxHeight: visible ? 'unset' : '0px',\n            overflowX: 'auto',\n            height: '100%',\n            msOverflowStyle: 'none',\n            scrollbarWidth: 'none',\n            '&::-webkit-scrollbar': {\n              display: 'none'\n            },\n            ...inputContainerSx\n          }}\n        >\n          <TokenizedQuery\n            sx={{\n              position: 'absolute',\n              userSelect: 'none',\n              whiteSpace: 'nowrap',\n              wordBreak: 'break-word',\n              fontSize: 1,\n              flex: 1,\n              width: '100%',\n              padding: '0px',\n              opacity: visible ? 1 : 0,\n              top: '50%',\n              transform: 'translateY(-50%)'\n            }}\n            query={value}\n          />\n          <AutosizeTextInput\n            role=\"combobox\"\n            id=\"filter-bar-input\"\n            aria-haspopup=\"listbox\"\n            aria-expanded={areFilterSuggestionsVisible}\n            aria-autocomplete=\"list\"\n            aria-controls={FILTER_INPUT_LIST_ID}\n            as={BorderlessTextInput}\n            aria-label={Resources.filterByKeyboardOrByField}\n            name=\"Filter\"\n            value={value}\n            onChange={onChange}\n            onClick={stopEvent}\n            onKeyDown={handleInputKeyDown}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            placeholder={Resources.filterByKeyboardOrByField}\n            autoComplete=\"off\"\n            autoCorrect=\"false\"\n            autoCapitalize=\"false\"\n            spellCheck=\"false\"\n            {...testIdProps('filter-bar-input')}\n            ref={inputRef}\n            tabIndex={visible ? 0 : -1}\n            containerSx={{\n              maxWidth: '100%',\n              opacity: visible ? '1' : '0'\n            }}\n            sx={{\n              position: 'relative',\n              display: 'flex',\n              resize: 'none',\n              outline: 'none',\n              border: '0px',\n              width: '100%',\n              padding: '0px',\n              background: 'transparent',\n              overflow: 'hidden',\n              overflowX: 'auto',\n              color: 'transparent',\n              minWidth: '20px',\n              caretColor: (theme: FixMeTheme) => theme.colors.fg.default,\n              fontSize: 1,\n              flex: 1,\n              height: '100%',\n              opacity: visible ? 1 : 0,\n              maxHeight: visible ? 'unset' : '0px',\n              '&::-webkit-autofill, &::-webkit-contacts-auto-fill-button, &::-webkit-credentials-auto-fill-button': {\n                visibility: 'hidden',\n                display: 'none !important',\n                pointerEvents: 'none',\n                position: 'absolute',\n                right: 0\n              }\n            }}\n          />\n        </Box>\n\n        <>\n          {typeof filterCount === 'number' ? (\n            <CounterLabel\n              sx={{\n                opacity: visible ? '1' : '0'\n              }}\n              {...testIdProps('filter-results-count')}\n            >\n              {filterCount}\n            </CounterLabel>\n          ) : null}\n          {isClearButtonVisible ? (\n            <IconButton\n              variant=\"invisible\"\n              ref={clearButtonRef}\n              onClick={handleClearButtonClick}\n              onKeyDown={onClearButtonKeyDown}\n              icon={XIcon}\n              sx={{\n                display: 'inline-flex',\n                borderRadius: '6px',\n                m: 0,\n                opacity: visible ? '1' : '0',\n                p: '2px',\n                position: 'relative',\n                color: 'fg.muted'\n              }}\n              aria-label=\"Clear filter query\"\n              {...testIdProps('clear-filter-query')}\n            />\n          ) : null}\n        </>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            opacity: visible ? '1' : '0',\n            position: 'relative',\n            maxHeight: visible ? 'unset' : '0px'\n          }}"
        }
      ],
      "line_start": 259,
      "line_end": 271,
      "text": "<Box\n          sx={{\n            opacity: visible ? '1' : '0',\n            position: 'relative',\n            maxHeight: visible ? 'unset' : '0px'\n          }}\n        >\n          <FilterIconButton\n            onClick={onFilterIconButtonClick}\n            {...testIdProps('filter-visible-icon-button')}\n            tabIndex={visible ? 0 : -1}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            zIndex: visible ? 2 : 0,\n            opacity: visible ? 1 : 0,\n            transition: 'opacity 0.1s ease-out',\n            maxWidth: 'calc(100% - 30px)',\n            marginRight: '8px',\n            marginLeft: '22px',\n            marginBottom: '-1px',\n            maxHeight: visible ? 'unset' : '0px',\n            overflowX: 'auto',\n            height: '100%',\n            msOverflowStyle: 'none',\n            scrollbarWidth: 'none',\n            '&::-webkit-scrollbar': {\n              display: 'none'\n            },\n            ...inputContainerSx\n          }}"
        }
      ],
      "line_start": 272,
      "line_end": 367,
      "text": "<Box\n          sx={{\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            zIndex: visible ? 2 : 0,\n            opacity: visible ? 1 : 0,\n            transition: 'opacity 0.1s ease-out',\n            maxWidth: 'calc(100% - 30px)',\n            marginRight: '8px',\n            marginLeft: '22px',\n            marginBottom: '-1px',\n            maxHeight: visible ? 'unset' : '0px',\n            overflowX: 'auto',\n            height: '100%',\n            msOverflowStyle: 'none',\n            scrollbarWidth: 'none',\n            '&::-webkit-scrollbar': {\n              display: 'none'\n            },\n            ...inputContainerSx\n          }}\n        >\n          <TokenizedQuery\n            sx={{\n              position: 'absolute',\n              userSelect: 'none',\n              whiteSpace: 'nowrap',\n              wordBreak: 'break-word',\n              fontSize: 1,\n              flex: 1,\n              width: '100%',\n              padding: '0px',\n              opacity: visible ? 1 : 0,\n              top: '50%',\n              transform: 'translateY(-50%)'\n            }}\n            query={value}\n          />\n          <AutosizeTextInput\n            role=\"combobox\"\n            id=\"filter-bar-input\"\n            aria-haspopup=\"listbox\"\n            aria-expanded={areFilterSuggestionsVisible}\n            aria-autocomplete=\"list\"\n            aria-controls={FILTER_INPUT_LIST_ID}\n            as={BorderlessTextInput}\n            aria-label={Resources.filterByKeyboardOrByField}\n            name=\"Filter\"\n            value={value}\n            onChange={onChange}\n            onClick={stopEvent}\n            onKeyDown={handleInputKeyDown}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            placeholder={Resources.filterByKeyboardOrByField}\n            autoComplete=\"off\"\n            autoCorrect=\"false\"\n            autoCapitalize=\"false\"\n            spellCheck=\"false\"\n            {...testIdProps('filter-bar-input')}\n            ref={inputRef}\n            tabIndex={visible ? 0 : -1}\n            containerSx={{\n              maxWidth: '100%',\n              opacity: visible ? '1' : '0'\n            }}\n            sx={{\n              position: 'relative',\n              display: 'flex',\n              resize: 'none',\n              outline: 'none',\n              border: '0px',\n              width: '100%',\n              padding: '0px',\n              background: 'transparent',\n              overflow: 'hidden',\n              overflowX: 'auto',\n              color: 'transparent',\n              minWidth: '20px',\n              caretColor: (theme: FixMeTheme) => theme.colors.fg.default,\n              fontSize: 1,\n              flex: 1,\n              height: '100%',\n              opacity: visible ? 1 : 0,\n              maxHeight: visible ? 'unset' : '0px',\n              '&::-webkit-autofill, &::-webkit-contacts-auto-fill-button, &::-webkit-credentials-auto-fill-button': {\n                visibility: 'hidden',\n                display: 'none !important',\n                pointerEvents: 'none',\n                position: 'absolute',\n                right: 0\n              }\n            }}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                opacity: visible ? '1' : '0'\n              }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('filter-results-count')}"
        }
      ],
      "line_start": 371,
      "line_end": 378,
      "text": "\n            <CounterLabel\n              sx={{\n                opacity: visible ? '1' : '0'\n              }}\n              {...testIdProps('filter-results-count')}\n            >\n              {filterCount}\n            </CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            alignItems: 'center',\n            height,\n            pl: 3,\n            display: 'flex'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('filter-state-actions')}"
        }
      ],
      "line_start": 404,
      "line_end": 443,
      "text": "\n        <Box\n          sx={{\n            alignItems: 'center',\n            height,\n            pl: 3,\n            display: 'flex'\n          }}\n          {...testIdProps('filter-state-actions')}\n        >\n          {onResetChanges ? (\n            <IconButton\n              variant=\"invisible\"\n              icon={ReplyIcon}\n              ref={clearButtonRef}\n              onClick={handleResetChanges}\n              sx={{\n                mr: 2,\n                color: 'fg.muted',\n                pr: '6px',\n                pl: '6px',\n                fontSize: 1\n              }}\n              aria-label=\"Revert\"\n              // eslint primer-react/no-system-props rule incorrectly wants to merge \"size\" into system props\n              {...{size: 'small'}}\n              {...testIdProps('filter-actions-reset-button')}\n            />\n          ) : null}\n          {onSaveChanges ? (\n            <Button\n              variant=\"outline\"\n              size=\"small\"\n              sx={{height: '28px'}}\n              onClick={handleSaveChanges}\n              {...testIdProps('filter-actions-save-button')}\n            >\n              {Resources.saveChanges}\n            </Button>\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-filter-input.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"outline\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '28px'}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleSaveChanges}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('filter-actions-save-button')}"
        }
      ],
      "line_start": 433,
      "line_end": 441,
      "text": "\n            <Button\n              variant=\"outline\"\n              size=\"small\"\n              sx={{height: '28px'}}\n              onClick={handleSaveChanges}\n              {...testIdProps('filter-actions-save-button')}\n            >\n              {Resources.saveChanges}\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...props}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`tokenized-query`)}"
        },
        {
          "name": "aria-errormessage",
          "kind": "JsxExpression",
          "text": "{invalidQuery ? 'tokenized-query-invalid-query-errormessage' : undefined}"
        }
      ],
      "line_start": 88,
      "line_end": 103,
      "text": "<Box\n        {...props}\n        ref={containerRef}\n        {...testIdProps(`tokenized-query`)}\n        aria-errormessage={invalidQuery ? 'tokenized-query-invalid-query-errormessage' : undefined}\n      >\n        <Spaces length={leadingSpace} />\n        {orderedTokenizedFilters.map((token, index) => {\n          return (\n            <Fragment key={index}>\n              <Token {...token} id={`tokenized-query-token-${index}`} invalid={invalidQuery} />\n              <Spaces length={token.spaceAfter.length} />\n            </Fragment>\n          )\n        })}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "name": "Box",
      "props": [
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{id}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{keyContainerRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        position: 'relative',\n        display: 'inline-block',\n        ...getErrorStyles({\n          invalid: Boolean(invalid || keyErrors)\n        })\n      }}"
        }
      ],
      "line_start": 420,
      "line_end": 483,
      "text": "\n    <Box\n      id={id}\n      ref={keyContainerRef}\n      sx={{\n        position: 'relative',\n        display: 'inline-block',\n        ...getErrorStyles({\n          invalid: Boolean(invalid || keyErrors)\n        })\n      }}\n    >\n      <Text\n        sx={{\n          display: 'inline-block',\n          whiteSpace: 'pre',\n          color: (theme: FixMeTheme) => theme.colors.fg.muted\n        }}\n        aria-errormessage={keyErrors ? `${id}-key-errormessage` : undefined}\n      >\n        {`${exclude ? '-' : ''}${leftSide}:`}\n        {keyErrors ? (\n          <ControlledPortalTooltip\n            direction=\"se\"\n            open={hovering === 'key'}\n            aria-label={keyErrors.message}\n            ref={keyTooltipRef}\n            id={`${id}-key-errormessage`}\n            aria-live=\"polite\"\n            portalProps={{\n              onMount: keyErrorPosition.adjustPickerPosition\n            }}\n          />\n        ) : null}\n      </Text>\n      <Text\n        ref={valueContainerRef}\n        sx={{\n          position: 'relative',\n          display: 'inline-block',\n          color: (theme: FixMeTheme) => theme.colors.accent.fg,\n          whiteSpace: 'pre',\n          ...getErrorStyles({\n            invalid: Boolean(valueErrors),\n            variant: 'attention'\n          })\n        }}\n        aria-errormessage={valueErrors ? `${id}-value-errormessage` : undefined}\n      >\n        {rightSide}\n        {valueErrors ? (\n          <ControlledPortalTooltip\n            direction=\"se\"\n            open={hovering === 'value'}\n            aria-label={valueErrors.message}\n            ref={valueTooltipRef}\n            id={`${id}-value-errormessage`}\n            aria-live=\"polite\"\n            portalProps={{\n              onMount: valueErrorPosition.adjustPickerPosition\n            }}\n          />\n        ) : null}\n      </Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'inline-block',\n          whiteSpace: 'pre',\n          color: (theme: FixMeTheme) => theme.colors.fg.muted\n        }}"
        },
        {
          "name": "aria-errormessage",
          "kind": "JsxExpression",
          "text": "{keyErrors ? `${id}-key-errormessage` : undefined}"
        }
      ],
      "line_start": 431,
      "line_end": 453,
      "text": "<Text\n        sx={{\n          display: 'inline-block',\n          whiteSpace: 'pre',\n          color: (theme: FixMeTheme) => theme.colors.fg.muted\n        }}\n        aria-errormessage={keyErrors ? `${id}-key-errormessage` : undefined}\n      >\n        {`${exclude ? '-' : ''}${leftSide}:`}\n        {keyErrors ? (\n          <ControlledPortalTooltip\n            direction=\"se\"\n            open={hovering === 'key'}\n            aria-label={keyErrors.message}\n            ref={keyTooltipRef}\n            id={`${id}-key-errormessage`}\n            aria-live=\"polite\"\n            portalProps={{\n              onMount: keyErrorPosition.adjustPickerPosition\n            }}\n          />\n        ) : null}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "name": "Text",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{valueContainerRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          position: 'relative',\n          display: 'inline-block',\n          color: (theme: FixMeTheme) => theme.colors.accent.fg,\n          whiteSpace: 'pre',\n          ...getErrorStyles({\n            invalid: Boolean(valueErrors),\n            variant: 'attention'\n          })\n        }}"
        },
        {
          "name": "aria-errormessage",
          "kind": "JsxExpression",
          "text": "{valueErrors ? `${id}-value-errormessage` : undefined}"
        }
      ],
      "line_start": 454,
      "line_end": 482,
      "text": "<Text\n        ref={valueContainerRef}\n        sx={{\n          position: 'relative',\n          display: 'inline-block',\n          color: (theme: FixMeTheme) => theme.colors.accent.fg,\n          whiteSpace: 'pre',\n          ...getErrorStyles({\n            invalid: Boolean(valueErrors),\n            variant: 'attention'\n          })\n        }}\n        aria-errormessage={valueErrors ? `${id}-value-errormessage` : undefined}\n      >\n        {rightSide}\n        {valueErrors ? (\n          <ControlledPortalTooltip\n            direction=\"se\"\n            open={hovering === 'value'}\n            aria-label={valueErrors.message}\n            ref={valueTooltipRef}\n            id={`${id}-value-errormessage`}\n            aria-live=\"polite\"\n            portalProps={{\n              onMount: valueErrorPosition.adjustPickerPosition\n            }}\n          />\n        ) : null}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/filter-bar/tokenized-query.tsx",
      "name": "Text",
      "props": [
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{id}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        color: (theme: FixMeTheme) => theme.colors.fg.default,\n        position: 'relative',\n        display: 'inline-block',\n        whiteSpace: 'pre',\n        ...getErrorStyles({\n          invalid,\n          variant: 'danger'\n        })\n      }}"
        }
      ],
      "line_start": 497,
      "line_end": 511,
      "text": "\n    <Text\n      id={id}\n      sx={{\n        color: (theme: FixMeTheme) => theme.colors.fg.default,\n        position: 'relative',\n        display: 'inline-block',\n        whiteSpace: 'pre',\n        ...getErrorStyles({\n          invalid,\n          variant: 'danger'\n        })\n      }}\n    >\n      {value}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/find-in-project/find-in-project-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: theme => theme.colors.canvas.default,\n        boxShadow: theme => theme.shadows.overlay.shadow,\n        borderRadius: theme => theme.radii[2],\n        position: 'absolute',\n        zIndex: 2,\n        top: '100%',\n        right: [3, 4, 5]\n      }}"
        }
      ],
      "line_start": 14,
      "line_end": 50,
      "text": "\n    <Box\n      sx={{\n        backgroundColor: theme => theme.colors.canvas.default,\n        boxShadow: theme => theme.shadows.overlay.shadow,\n        borderRadius: theme => theme.radii[2],\n        position: 'absolute',\n        zIndex: 2,\n        top: '100%',\n        right: [3, 4, 5]\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          p: 2\n        }}\n        onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => {\n          if (e.key === 'Escape') {\n            hideInput()\n          }\n        }}\n      >\n        <TextInput\n          leadingVisual={SearchIcon}\n          ref={inputRef}\n          type=\"text\"\n          value={findValue}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setFindValue(e.target.value)\n          }}\n          size=\"small\"\n          {...testIdProps('find-in-project-input')}\n        />\n\n        <IconButton variant=\"invisible\" sx={{px: 3}} onClick={hideInput} icon={XIcon} />\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/find-in-project/find-in-project-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          p: 2\n        }}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{(e: React.KeyboardEvent<HTMLDivElement>) => {\n          if (e.key === 'Escape') {\n            hideInput()\n          }\n        }}"
        }
      ],
      "line_start": 25,
      "line_end": 49,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          p: 2\n        }}\n        onKeyDown={(e: React.KeyboardEvent<HTMLDivElement>) => {\n          if (e.key === 'Escape') {\n            hideInput()\n          }\n        }}\n      >\n        <TextInput\n          leadingVisual={SearchIcon}\n          ref={inputRef}\n          type=\"text\"\n          value={findValue}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setFindValue(e.target.value)\n          }}\n          size=\"small\"\n          {...testIdProps('find-in-project-input')}\n        />\n\n        <IconButton variant=\"invisible\" sx={{px: 3}} onClick={hideInput} icon={XIcon} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "Link",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onOpenIssueEditor}"
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{item.getUrl()}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "rel",
          "kind": "StringLiteral",
          "text": "\"noreferrer\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{titleStyles}"
        }
      ],
      "line_start": 52,
      "line_end": 54,
      "text": "\n        <Link onClick={onOpenIssueEditor} href={item.getUrl()} target=\"_blank\" rel=\"noreferrer\" sx={titleStyles}>\n          <SanitizedHtmlSpan>{html}</SanitizedHtmlSpan>\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{tooltipLabel}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"sw\""
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`listview-item-assignees`)}"
        }
      ],
      "line_start": 107,
      "line_end": 113,
      "text": "\n    <Tooltip aria-label={tooltipLabel} direction=\"sw\" wrap={true} {...testIdProps(`listview-item-assignees`)}>\n      <AvatarStack alignRight sx={AVATAR_STACK_STYLE}>\n        {assignees.map(assignee => (\n          <ClickableAvatar key={assignee.id} assignee={assignee} />\n        ))}\n      </AvatarStack>\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "AvatarStack",
      "props": [
        {
          "name": "alignRight"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{AVATAR_STACK_STYLE}"
        }
      ],
      "line_start": 108,
      "line_end": 112,
      "text": "<AvatarStack alignRight sx={AVATAR_STACK_STYLE}>\n        {assignees.map(assignee => (\n          <ClickableAvatar key={assignee.id} assignee={assignee} />\n        ))}\n      </AvatarStack>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, color: 'fg.muted'}}"
        }
      ],
      "line_start": 126,
      "line_end": 128,
      "text": "\n    <Text sx={{fontSize: 0, color: 'fg.muted'}}>\n      {repoName} #{number}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{menuOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{setMenuOpen}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{menuRef}"
        }
      ],
      "line_start": 161,
      "line_end": 198,
      "text": "\n    <ActionMenu open={menuOpen} onOpenChange={setMenuOpen} anchorRef={menuRef}>\n      <ActionMenu.Anchor>\n        <IconButton\n          icon={TriangleDownIcon}\n          onClick={onToggleMenuClick}\n          aria-label=\"Item actions\"\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            px: 0,\n            py: 0,\n            height: 18,\n            width: 18\n          }}\n        />\n      </ActionMenu.Anchor>\n      <ActionMenu.Overlay portalContainerName=\"table-portal-root\">\n        <ActionList>\n          {itemHierarchy && (\n            <ActionList.Item onSelect={onRemoveItem}>\n              <ActionList.LeadingVisual>\n                <ArchiveIcon />\n              </ActionList.LeadingVisual>\n              Remove subtask\n            </ActionList.Item>\n          )}\n          {!itemHierarchy && (\n            <ActionList.Item variant=\"danger\" onSelect={onDeleteItem}>\n              <ActionList.LeadingVisual>\n                <TrashIcon />\n              </ActionList.LeadingVisual>\n              Delete from project\n            </ActionList.Item>\n          )}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 162,
      "line_end": 177,
      "text": "<ActionMenu.Anchor>\n        <IconButton\n          icon={TriangleDownIcon}\n          onClick={onToggleMenuClick}\n          aria-label=\"Item actions\"\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            px: 0,\n            py: 0,\n            height: 18,\n            width: 18\n          }}\n        />\n      </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "portalContainerName",
          "kind": "StringLiteral",
          "text": "\"table-portal-root\""
        }
      ],
      "line_start": 178,
      "line_end": 197,
      "text": "<ActionMenu.Overlay portalContainerName=\"table-portal-root\">\n        <ActionList>\n          {itemHierarchy && (\n            <ActionList.Item onSelect={onRemoveItem}>\n              <ActionList.LeadingVisual>\n                <ArchiveIcon />\n              </ActionList.LeadingVisual>\n              Remove subtask\n            </ActionList.Item>\n          )}\n          {!itemHierarchy && (\n            <ActionList.Item variant=\"danger\" onSelect={onDeleteItem}>\n              <ActionList.LeadingVisual>\n                <TrashIcon />\n              </ActionList.LeadingVisual>\n              Delete from project\n            </ActionList.Item>\n          )}\n        </ActionList>\n      </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 179,
      "line_end": 196,
      "text": "<ActionList>\n          {itemHierarchy && (\n            <ActionList.Item onSelect={onRemoveItem}>\n              <ActionList.LeadingVisual>\n                <ArchiveIcon />\n              </ActionList.LeadingVisual>\n              Remove subtask\n            </ActionList.Item>\n          )}\n          {!itemHierarchy && (\n            <ActionList.Item variant=\"danger\" onSelect={onDeleteItem}>\n              <ActionList.LeadingVisual>\n                <TrashIcon />\n              </ActionList.LeadingVisual>\n              Delete from project\n            </ActionList.Item>\n          )}\n        </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onRemoveItem}"
        }
      ],
      "line_start": 181,
      "line_end": 186,
      "text": "\n            <ActionList.Item onSelect={onRemoveItem}>\n              <ActionList.LeadingVisual>\n                <ArchiveIcon />\n              </ActionList.LeadingVisual>\n              Remove subtask\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 182,
      "line_end": 184,
      "text": "<ActionList.LeadingVisual>\n                <ArchiveIcon />\n              </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onDeleteItem}"
        }
      ],
      "line_start": 189,
      "line_end": 194,
      "text": "\n            <ActionList.Item variant=\"danger\" onSelect={onDeleteItem}>\n              <ActionList.LeadingVisual>\n                <TrashIcon />\n              </ActionList.LeadingVisual>\n              Delete from project\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/hierarchy/hierarchy.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 190,
      "line_end": 192,
      "text": "<ActionList.LeadingVisual>\n                <TrashIcon />\n              </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{text}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"s\""
        },
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"right\""
        }
      ],
      "line_start": 30,
      "line_end": 32,
      "text": "\n    <Tooltip aria-label={text} direction=\"s\" align=\"right\">\n      {children}\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', alignItems: 'center'}}"
        }
      ],
      "line_start": 78,
      "line_end": 123,
      "text": "\n      <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n        <ConditionalTooltip showTooltip={hasWritePermissions} text=\"Rename\">\n          <Box\n            sx={{\n              ...(hasWritePermissions\n                ? {\n                    '&:focus-within': {\n                      boxShadow: 'primary.shadow.focus',\n                      borderRadius: '2'\n                    },\n                    '&:hover:not(:focus-within)': {\n                      boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`,\n                      borderRadius: '2'\n                    }\n                  }\n                : {}),\n              px: 1,\n              mx: -1\n            }}\n          >\n            {hasWritePermissions ? (\n              <EmojiPicker>\n                <AutosizeTextInput\n                  as={BorderlessTextInput}\n                  {...props}\n                  ref={inputRef}\n                  autoComplete=\"off\"\n                  placeholder={InsightsResources.addInsightsChartNamePlaceholder}\n                  aria-label={InsightsResources.addInsightsChartNamePlaceholder}\n                  value={chartName}\n                  onChange={onChange}\n                  onClick={onClick}\n                  onBlur={onBlur}\n                  id=\"insightsChartNameInput\"\n                  {...inputCompositionProps}\n                  {...testIdProps('insights-chart-name')}\n                />\n              </EmojiPicker>\n            ) : (\n              <Box sx={{fontSize: 3, fontWeight: 600}} {...testIdProps('insights-chart-name')}>\n                {chartName}\n              </Box>\n            )}\n          </Box>\n        </ConditionalTooltip>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              ...(hasWritePermissions\n                ? {\n                    '&:focus-within': {\n                      boxShadow: 'primary.shadow.focus',\n                      borderRadius: '2'\n                    },\n                    '&:hover:not(:focus-within)': {\n                      boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`,\n                      borderRadius: '2'\n                    }\n                  }\n                : {}),\n              px: 1,\n              mx: -1\n            }}"
        }
      ],
      "line_start": 80,
      "line_end": 121,
      "text": "<Box\n            sx={{\n              ...(hasWritePermissions\n                ? {\n                    '&:focus-within': {\n                      boxShadow: 'primary.shadow.focus',\n                      borderRadius: '2'\n                    },\n                    '&:hover:not(:focus-within)': {\n                      boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`,\n                      borderRadius: '2'\n                    }\n                  }\n                : {}),\n              px: 1,\n              mx: -1\n            }}\n          >\n            {hasWritePermissions ? (\n              <EmojiPicker>\n                <AutosizeTextInput\n                  as={BorderlessTextInput}\n                  {...props}\n                  ref={inputRef}\n                  autoComplete=\"off\"\n                  placeholder={InsightsResources.addInsightsChartNamePlaceholder}\n                  aria-label={InsightsResources.addInsightsChartNamePlaceholder}\n                  value={chartName}\n                  onChange={onChange}\n                  onClick={onClick}\n                  onBlur={onBlur}\n                  id=\"insightsChartNameInput\"\n                  {...inputCompositionProps}\n                  {...testIdProps('insights-chart-name')}\n                />\n              </EmojiPicker>\n            ) : (\n              <Box sx={{fontSize: 3, fontWeight: 600}} {...testIdProps('insights-chart-name')}>\n                {chartName}\n              </Box>\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-name.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 3, fontWeight: 600}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('insights-chart-name')}"
        }
      ],
      "line_start": 117,
      "line_end": 119,
      "text": "\n              <Box sx={{fontSize: 3, fontWeight: 600}} {...testIdProps('insights-chart-name')}>\n                {chartName}\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: themeGet('sizes.large'), mx: 'auto', display: 'flex', flexDirection: 'column', gap: '24px'}}"
        }
      ],
      "line_start": 118,
      "line_end": 192,
      "text": "\n    <Box sx={{maxWidth: themeGet('sizes.large'), mx: 'auto', display: 'flex', flexDirection: 'column', gap: '24px'}}>\n      <Heading\n        {...testIdProps('insights-header')}\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        {chartIsDefault ? chart.name : <InsightsChartName chart={chart} />}\n        <Box>\n          <Button\n            leadingIcon={PencilIcon}\n            onClick={openPane}\n            {...testIdProps('insights-configuration-pane-button-open')}\n          >\n            Configure\n          </Button>\n        </Box>\n      </Heading>\n\n      {chart.description ? <Text sx={{fontSize: 1}}>{chart.description} </Text> : null}\n\n      <InsightsFilters\n        inputRef={inputRef}\n        filteredItems={filteredItems}\n        filterValue={filterValue}\n        handleFilterValueChange={handleFilterValueChange}\n        onClearButtonClick={onClearButtonClick}\n        setValueFromSuggestion={setValueFromSuggestion}\n        onSaveChanges={isUserDefinedChart && dirtyState.isFilterDirty ? handleSaveChanges : undefined}\n        onResetChanges={dirtyState.isFilterDirty ? resetFilter : undefined}\n      />\n\n      {!isValid ? (\n        <InvalidConfigError />\n      ) : (\n        <>\n          {isHistorical ? (\n            <Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n              <PeriodNavigation period={period} />\n              <InsightCustomDatePicker startDate={startDate} endDate={endDate} />\n            </Box>\n          ) : null}\n          <Box sx={chartContainerStyles}>\n            <Box sx={chartBufferStyles}>\n              {isHistorical ? (\n                <HistoricalInsightsChart\n                  chart={chart}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  period={period}\n                  startDate={startDate}\n                  endDate={endDate}\n                  filteredItems={filteredItems}\n                />\n              ) : (\n                <CurrentInsightsChart\n                  configuration={chart.localVersion.configuration}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  filteredItems={filteredItems}\n                />\n              )}\n            </Box>\n          </Box>\n        </>\n      )}\n\n      <InsightsConfigurationPane chart={chart} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('insights-header')}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}"
        }
      ],
      "line_start": 119,
      "line_end": 141,
      "text": "<Heading\n        {...testIdProps('insights-header')}\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        {chartIsDefault ? chart.name : <InsightsChartName chart={chart} />}\n        <Box>\n          <Button\n            leadingIcon={PencilIcon}\n            onClick={openPane}\n            {...testIdProps('insights-configuration-pane-button-open')}\n          >\n            Configure\n          </Button>\n        </Box>\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Box",
      "props": [],
      "line_start": 132,
      "line_end": 140,
      "text": "<Box>\n          <Button\n            leadingIcon={PencilIcon}\n            onClick={openPane}\n            {...testIdProps('insights-configuration-pane-button-open')}\n          >\n            Configure\n          </Button>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{PencilIcon}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{openPane}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('insights-configuration-pane-button-open')}"
        }
      ],
      "line_start": 133,
      "line_end": 139,
      "text": "<Button\n            leadingIcon={PencilIcon}\n            onClick={openPane}\n            {...testIdProps('insights-configuration-pane-button-open')}\n          >\n            Configure\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1}}"
        }
      ],
      "line_start": 143,
      "line_end": 143,
      "text": " <Text sx={{fontSize: 1}}>{chart.description} </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 161,
      "line_end": 164,
      "text": "\n            <Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n              <PeriodNavigation period={period} />\n              <InsightCustomDatePicker startDate={startDate} endDate={endDate} />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{chartContainerStyles}"
        }
      ],
      "line_start": 166,
      "line_end": 187,
      "text": "<Box sx={chartContainerStyles}>\n            <Box sx={chartBufferStyles}>\n              {isHistorical ? (\n                <HistoricalInsightsChart\n                  chart={chart}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  period={period}\n                  startDate={startDate}\n                  endDate={endDate}\n                  filteredItems={filteredItems}\n                />\n              ) : (\n                <CurrentInsightsChart\n                  configuration={chart.localVersion.configuration}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  filteredItems={filteredItems}\n                />\n              )}\n            </Box>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-chart-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{chartBufferStyles}"
        }
      ],
      "line_start": 167,
      "line_end": 186,
      "text": "<Box sx={chartBufferStyles}>\n              {isHistorical ? (\n                <HistoricalInsightsChart\n                  chart={chart}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  period={period}\n                  startDate={startDate}\n                  endDate={endDate}\n                  filteredItems={filteredItems}\n                />\n              ) : (\n                <CurrentInsightsChart\n                  configuration={chart.localVersion.configuration}\n                  isLoading={isLoading}\n                  filterValue={filterValue}\n                  filteredItems={filteredItems}\n                />\n              )}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-layout.tsx",
      "name": "PageLayout",
      "props": [
        {
          "name": "containerWidth",
          "kind": "StringLiteral",
          "text": "\"full\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '100%', padding: 0, m: 0, [`& > ${Box}`]: {minHeight: '100%'}}}"
        }
      ],
      "line_start": 8,
      "line_end": 27,
      "text": "\n    <PageLayout containerWidth=\"full\" sx={{height: '100%', padding: 0, m: 0, [`& > ${Box}`]: {minHeight: '100%'}}}>\n      <PageLayout.Pane\n        position=\"start\"\n        sx={{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}\n      >\n        <InsightsSideNav />\n      </PageLayout.Pane>\n      <PageLayout.Content\n        width=\"large\"\n        sx={{\n          padding: [3, null, null, 4]\n        }}\n      >\n        {children}\n      </PageLayout.Content>\n    </PageLayout>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-layout.tsx",
      "name": "PageLayout.Pane",
      "parent": "PageLayout",
      "child": "Pane",
      "props": [
        {
          "name": "position",
          "kind": "StringLiteral",
          "text": "\"start\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}"
        }
      ],
      "line_start": 9,
      "line_end": 18,
      "text": "<PageLayout.Pane\n        position=\"start\"\n        sx={{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}\n      >\n        <InsightsSideNav />\n      </PageLayout.Pane>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-layout.tsx",
      "name": "PageLayout.Content",
      "parent": "PageLayout",
      "child": "Content",
      "props": [
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"large\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          padding: [3, null, null, 4]\n        }}"
        }
      ],
      "line_start": 19,
      "line_end": 26,
      "text": "<PageLayout.Content\n        width=\"large\"\n        sx={{\n          padding: [3, null, null, 4]\n        }}\n      >\n        {children}\n      </PageLayout.Content>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.default',\n        display: 'flex',\n        position: 'relative',\n        height: '100%'\n      }}"
        }
      ],
      "line_start": 32,
      "line_end": 59,
      "text": "\n    <Box\n      sx={{\n        backgroundColor: 'canvas.default',\n        display: 'flex',\n        position: 'relative',\n        height: '100%'\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          overflow: 'scroll',\n          paddingTop: 0\n        }}\n      >\n        <ListViewItems key={0} items={items} />\n        <Box sx={{py: 1}}>\n          <Omnibar defaultPlaceholder=\"Add an item\" ref={omnibarRef} />\n        </Box>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          overflow: 'scroll',\n          paddingTop: 0\n        }}"
        }
      ],
      "line_start": 40,
      "line_end": 58,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          overflow: 'scroll',\n          paddingTop: 0\n        }}\n      >\n        <ListViewItems key={0} items={items} />\n        <Box sx={{py: 1}}>\n          <Omnibar defaultPlaceholder=\"Add an item\" ref={omnibarRef} />\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{py: 1}}"
        }
      ],
      "line_start": 55,
      "line_end": 57,
      "text": "<Box sx={{py: 1}}>\n          <Omnibar defaultPlaceholder=\"Add an item\" ref={omnibarRef} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [],
      "line_start": 82,
      "line_end": 86,
      "text": "\n    <Box>\n      {items.map((item: MemexItemModel, index: number) => {\n        return <ListViewItem handleClick={() => handleOnClick(item)} item={item} key={index} level={0} />\n      })}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{isExpanded ? 'Collapse' : 'Expand'}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isDisabled}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        pl: 1,\n        pr: 1,\n        color: 'fg.muted',\n        '&:hover:not([disabled]), &:active': {backgroundColor: 'transparent', color: 'fg.default'}\n      }}"
        }
      ],
      "line_start": 100,
      "line_end": 120,
      "text": "\n    <Button\n      variant=\"invisible\"\n      size=\"small\"\n      onClick={onClick}\n      aria-label={isExpanded ? 'Collapse' : 'Expand'}\n      disabled={isDisabled}\n      sx={{\n        pl: 1,\n        pr: 1,\n        color: 'fg.muted',\n        '&:hover:not([disabled]), &:active': {backgroundColor: 'transparent', color: 'fg.default'}\n      }}\n    >\n      <StyledOcticon\n        icon={ChevronDownIcon}\n        sx={{\n          transform: isExpanded ? 'rotate(0deg)' : 'rotate(-90deg)',\n          transition: 'transform 150ms ease-in-out'\n        }}\n      />\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          gap: 0,\n          justifyContent: 'space-between',\n          backgroundColor: isSelected ? 'accent.subtle' : 'transparent',\n          boxShadow: theme =>\n            isSelected\n              ? `inset 0 1px 0 ${theme.colors.accent.emphasis}, 0 1px 0 ${theme.colors.accent.emphasis}`\n              : 'none',\n          position: 'relative',\n          '&:hover, &:focus': {\n            backgroundColor: 'canvas.subtle',\n            '& .triangleDown': {opacity: 1},\n            '& .dragHandler': {opacity: 1},\n            '& .progressItem': {opacity: 1}\n          },\n          whiteSpace: 'nowrap',\n          width: '100%'\n        }}"
        }
      ],
      "line_start": 197,
      "line_end": 332,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          gap: 0,\n          justifyContent: 'space-between',\n          backgroundColor: isSelected ? 'accent.subtle' : 'transparent',\n          boxShadow: theme =>\n            isSelected\n              ? `inset 0 1px 0 ${theme.colors.accent.emphasis}, 0 1px 0 ${theme.colors.accent.emphasis}`\n              : 'none',\n          position: 'relative',\n          '&:hover, &:focus': {\n            backgroundColor: 'canvas.subtle',\n            '& .triangleDown': {opacity: 1},\n            '& .dragHandler': {opacity: 1},\n            '& .progressItem': {opacity: 1}\n          },\n          whiteSpace: 'nowrap',\n          width: '100%'\n        }}\n      >\n        {new Array(level).fill('').map((cl, index) => (\n          <Box\n            key={index}\n            sx={{\n              display: 'flex',\n              alignItems: 'flex-start',\n              justifyContent: 'flex-end',\n              width: PADDING_PER_LEVEL,\n              borderRight: '1px solid',\n              borderColor: 'border.default',\n              mr: 2\n            }}\n          />\n        ))}\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            flexGrow: 1,\n            pl: 0,\n            overflow: 'hidden',\n            flexShrink: 1\n          }}\n        >\n          {canExpandHierarchy && (\n            <CollapseIcon\n              isExpanded={isExpanded}\n              onClick={onChildViewToggle}\n              isDisabled={item.contentType === ItemType.RedactedItem}\n            />\n          )}\n          <Box\n            sx={{\n              flexGrow: 1,\n              display: 'flex',\n              gap: 2,\n              ml: canExpandHierarchy ? 0 : 4,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              lineHeight: 1,\n              overflow: 'hidden'\n            }}\n          >\n            <ItemIcon item={item} />\n            <Box\n              sx={{\n                display: 'flex',\n                flexGrow: 1,\n                borderBottom: '1px solid',\n                borderColor: 'border.muted',\n                gap: 2,\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                overflow: 'hidden',\n                pr: 2,\n                py: 1\n              }}\n            >\n              <ItemTitle item={item} />\n              <ItemLocation item={item} />\n              {totalCount > 0 && (\n                <Button\n                  variant=\"invisible\"\n                  className=\"progressItem\"\n                  aria-label={`${completedCount} of ${totalCount} completed`}\n                  onClick={handleTracksClick}\n                  sx={{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}\n                >\n                  <SubtaskProgress completed={completedCount} total={totalCount} />\n                </Button>\n              )}\n            </Box>\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            gap: 2,\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 1,\n            flexShrink: 0\n          }}\n        >\n          <ItemLabels item={item} allowFiltering={true} />\n          <ItemAssignees item={item} />\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 2\n          }}\n        >\n          <Box\n            ref={contextMenuRef}\n            sx={{\n              opacity: 0\n            }}\n            className=\"triangleDown\"\n          >\n            {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n          </Box>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            alignItems: 'center',\n            flexGrow: 1,\n            pl: 0,\n            overflow: 'hidden',\n            flexShrink: 1\n          }}"
        }
      ],
      "line_start": 232,
      "line_end": 298,
      "text": "<Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            flexGrow: 1,\n            pl: 0,\n            overflow: 'hidden',\n            flexShrink: 1\n          }}\n        >\n          {canExpandHierarchy && (\n            <CollapseIcon\n              isExpanded={isExpanded}\n              onClick={onChildViewToggle}\n              isDisabled={item.contentType === ItemType.RedactedItem}\n            />\n          )}\n          <Box\n            sx={{\n              flexGrow: 1,\n              display: 'flex',\n              gap: 2,\n              ml: canExpandHierarchy ? 0 : 4,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              lineHeight: 1,\n              overflow: 'hidden'\n            }}\n          >\n            <ItemIcon item={item} />\n            <Box\n              sx={{\n                display: 'flex',\n                flexGrow: 1,\n                borderBottom: '1px solid',\n                borderColor: 'border.muted',\n                gap: 2,\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                overflow: 'hidden',\n                pr: 2,\n                py: 1\n              }}\n            >\n              <ItemTitle item={item} />\n              <ItemLocation item={item} />\n              {totalCount > 0 && (\n                <Button\n                  variant=\"invisible\"\n                  className=\"progressItem\"\n                  aria-label={`${completedCount} of ${totalCount} completed`}\n                  onClick={handleTracksClick}\n                  sx={{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}\n                >\n                  <SubtaskProgress completed={completedCount} total={totalCount} />\n                </Button>\n              )}\n            </Box>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              flexGrow: 1,\n              display: 'flex',\n              gap: 2,\n              ml: canExpandHierarchy ? 0 : 4,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              lineHeight: 1,\n              overflow: 'hidden'\n            }}"
        }
      ],
      "line_start": 249,
      "line_end": 297,
      "text": "<Box\n            sx={{\n              flexGrow: 1,\n              display: 'flex',\n              gap: 2,\n              ml: canExpandHierarchy ? 0 : 4,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              lineHeight: 1,\n              overflow: 'hidden'\n            }}\n          >\n            <ItemIcon item={item} />\n            <Box\n              sx={{\n                display: 'flex',\n                flexGrow: 1,\n                borderBottom: '1px solid',\n                borderColor: 'border.muted',\n                gap: 2,\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                overflow: 'hidden',\n                pr: 2,\n                py: 1\n              }}\n            >\n              <ItemTitle item={item} />\n              <ItemLocation item={item} />\n              {totalCount > 0 && (\n                <Button\n                  variant=\"invisible\"\n                  className=\"progressItem\"\n                  aria-label={`${completedCount} of ${totalCount} completed`}\n                  onClick={handleTracksClick}\n                  sx={{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}\n                >\n                  <SubtaskProgress completed={completedCount} total={totalCount} />\n                </Button>\n              )}\n            </Box>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                display: 'flex',\n                flexGrow: 1,\n                borderBottom: '1px solid',\n                borderColor: 'border.muted',\n                gap: 2,\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                overflow: 'hidden',\n                pr: 2,\n                py: 1\n              }}"
        }
      ],
      "line_start": 262,
      "line_end": 296,
      "text": "<Box\n              sx={{\n                display: 'flex',\n                flexGrow: 1,\n                borderBottom: '1px solid',\n                borderColor: 'border.muted',\n                gap: 2,\n                alignItems: 'center',\n                justifyContent: 'flex-start',\n                overflow: 'hidden',\n                pr: 2,\n                py: 1\n              }}\n            >\n              <ItemTitle item={item} />\n              <ItemLocation item={item} />\n              {totalCount > 0 && (\n                <Button\n                  variant=\"invisible\"\n                  className=\"progressItem\"\n                  aria-label={`${completedCount} of ${totalCount} completed`}\n                  onClick={handleTracksClick}\n                  sx={{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}\n                >\n                  <SubtaskProgress completed={completedCount} total={totalCount} />\n                </Button>\n              )}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"progressItem\""
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`${completedCount} of ${totalCount} completed`}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleTracksClick}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}"
        }
      ],
      "line_start": 279,
      "line_end": 294,
      "text": "\n                <Button\n                  variant=\"invisible\"\n                  className=\"progressItem\"\n                  aria-label={`${completedCount} of ${totalCount} completed`}\n                  onClick={handleTracksClick}\n                  sx={{\n                    p: 0,\n                    borderRadius: 3,\n                    transition: 'opacity 150ms ease-in-out',\n                    transitionDelay: '150ms',\n                    opacity: totalCount > 0 ? 1 : 0,\n                    '&:hover': {backgroundColor: 'transparent'}\n                  }}\n                >\n                  <SubtaskProgress completed={completedCount} total={totalCount} />\n                </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            gap: 2,\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 1,\n            flexShrink: 0\n          }}"
        }
      ],
      "line_start": 299,
      "line_end": 312,
      "text": "<Box\n          sx={{\n            display: 'flex',\n            gap: 2,\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 1,\n            flexShrink: 0\n          }}\n        >\n          <ItemLabels item={item} allowFiltering={true} />\n          <ItemAssignees item={item} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 2\n          }}"
        }
      ],
      "line_start": 313,
      "line_end": 331,
      "text": "<Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            borderBottom: '1px solid',\n            borderColor: 'border.muted',\n            pr: 2\n          }}\n        >\n          <Box\n            ref={contextMenuRef}\n            sx={{\n              opacity: 0\n            }}\n            className=\"triangleDown\"\n          >\n            {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{contextMenuRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              opacity: 0\n            }}"
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"triangleDown\""
        }
      ],
      "line_start": 322,
      "line_end": 330,
      "text": "<Box\n            ref={contextMenuRef}\n            sx={{\n              opacity: 0\n            }}\n            className=\"triangleDown\"\n          >\n            {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              pl: `${PADDING_PER_LEVEL * (level + 3)}px`,\n              py: 2,\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center'\n            }}"
        }
      ],
      "line_start": 335,
      "line_end": 346,
      "text": "\n          <Box\n            sx={{\n              pl: `${PADDING_PER_LEVEL * (level + 3)}px`,\n              py: 2,\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center'\n            }}\n          >\n            <Spinner size=\"small\" />\n            <Text sx={{ml: 2}}>Fetching...</Text>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 345,
      "line_end": 345,
      "text": "<Text sx={{ml: 2}}>Fetching...</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            alignItems: 'center',\n            pl: (level + 2) * PADDING_PER_LEVEL,\n            py: 1,\n            borderBottom: '1px solid',\n            borderColor: 'border.muted'\n          }}"
        }
      ],
      "line_start": 362,
      "line_end": 373,
      "text": "\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            pl: (level + 2) * PADDING_PER_LEVEL,\n            py: 1,\n            borderBottom: '1px solid',\n            borderColor: 'border.muted'\n          }}\n        >\n          <HierarchyOmnibar item={item} onAddItem={onAddItem} defaultPlaceholder=\"Add an item\" />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/progress.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{variantStyle}"
        }
      ],
      "line_start": 97,
      "line_end": 119,
      "text": "\n    <Box sx={variantStyle}>\n      <ProgressIcon progress={progressFraction || 0} />\n      <div {...testIdProps(`progress-text`)}>\n        {showPercent ? Resources.progressCount({percent: progressAsPercent(props), total}) : `${completed} / ${total}`}\n      </div>\n      {variant === 'default' && (\n        <Box\n          className=\"triangle\"\n          sx={{\n            opacity: 0,\n            transitionProperty: 'transform, opacity',\n            transitionDuration: '0.2s',\n            transitionTimingFunction: 'ease-in-out',\n            position: 'absolute',\n            right: 0,\n            paddingRight: 0,\n            transform: 'translateX(-12px)'\n          }}\n        >\n          <StyledOcticon icon={TriangleRightIcon} />\n        </Box>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/list/progress.tsx",
      "name": "Box",
      "props": [
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"triangle\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            opacity: 0,\n            transitionProperty: 'transform, opacity',\n            transitionDuration: '0.2s',\n            transitionTimingFunction: 'ease-in-out',\n            position: 'absolute',\n            right: 0,\n            paddingRight: 0,\n            transform: 'translateX(-12px)'\n          }}"
        }
      ],
      "line_start": 103,
      "line_end": 117,
      "text": "\n        <Box\n          className=\"triangle\"\n          sx={{\n            opacity: 0,\n            transitionProperty: 'transform, opacity',\n            transitionDuration: '0.2s',\n            transitionTimingFunction: 'ease-in-out',\n            position: 'absolute',\n            right: 0,\n            paddingRight: 0,\n            transform: 'translateX(-12px)'\n          }}\n        >\n          <StyledOcticon icon={TriangleRightIcon} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/omnibar/omnibar-container.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...props}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          ...getStyles({isFixed, verticalScrollbarSize, horizontalScrollbarSize, effectiveTableHeight, disableBlur}),\n          ...sx\n        }}"
        }
      ],
      "line_start": 75,
      "line_end": 85,
      "text": "\n      <Box\n        {...props}\n        ref={ref}\n        sx={{\n          display: 'flex',\n          ...getStyles({isFixed, verticalScrollbarSize, horizontalScrollbarSize, effectiveTableHeight, disableBlur}),\n          ...sx\n        }}\n      >\n        {children}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/omnibar/omnibar-drawer.tsx",
      "name": "Box",
      "line_start": 37,
      "line_end": 37,
      "text": " styled(Box)`\n  position: fixed;\n  width: 100%;\n  pointer-events: none;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/omnibar/omnibar-placeholder.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          position: 'absolute',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center'\n        }}"
        }
      ],
      "line_start": 25,
      "line_end": 34,
      "text": "\n      <Box\n        sx={{\n          position: 'absolute',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center'\n        }}\n      >\n        <Text sx={{fontSize: 1, color: 'fg.muted', pl: '12px'}}>{placeholder}</Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/omnibar/omnibar-placeholder.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, color: 'fg.muted', pl: '12px'}}"
        }
      ],
      "line_start": 33,
      "line_end": 33,
      "text": "<Text sx={{fontSize: 1, color: 'fg.muted', pl: '12px'}}>{placeholder}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "name": "Box",
      "props": [
        {
          "name": "className",
          "kind": "JsxExpression",
          "text": "{omnibarClassName}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            flex: 'auto',\n            '&.is-focused': {\n              boxShadow: theme => `inset 0 0 0 2px ${theme.colors.accent.emphasis}`,\n              borderRadius: '2px'\n            },\n            '&.is-fixed': {\n              boxShadow: theme => `inset 1px 0 0 0 ${theme.colors.border.default}`\n            },\n            '&.is-focused.is-fixed': {\n              boxShadow: theme => `inset 1px 0 0 0 ${theme.colors.accent.muted}`\n            }\n          }}"
        }
      ],
      "line_start": 271,
      "line_end": 302,
      "text": "<Box\n          className={omnibarClassName}\n          sx={{\n            display: 'flex',\n            flex: 'auto',\n            '&.is-focused': {\n              boxShadow: theme => `inset 0 0 0 2px ${theme.colors.accent.emphasis}`,\n              borderRadius: '2px'\n            },\n            '&.is-fixed': {\n              boxShadow: theme => `inset 1px 0 0 0 ${theme.colors.border.default}`\n            },\n            '&.is-focused.is-fixed': {\n              boxShadow: theme => `inset 1px 0 0 0 ${theme.colors.accent.muted}`\n            }\n          }}\n        >\n          <OmnibarInput\n            ref={finalInputRef}\n            isFocused={isFocused}\n            filteredItemIds={filteredItemIds}\n            showDiscoveryMenu={showDiscoveryMenu}\n            setShowDiscoveryMenu={setShowDiscoveryMenu}\n            onAddItem={onAddItem}\n            onAddDraftItem={onAddDraftItem}\n            newItemAttributes={newItemAttributes}\n            onFocus={() => setIsFocused(true)}\n            onBlur={handleBlur}\n            defaultPlaceholder={defaultPlaceholder}\n            disabled={disabled}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/omnibar/omnibar.tsx",
      "name": "Box",
      "line_start": 315,
      "line_end": 315,
      "text": " styled(Box)`\n  align-items: stretch;\n  display: flex;\n  flex: auto;\n  height: ${CELL_HEIGHT}px;\n  max-height: ${CELL_HEIGHT}px;\n\n  &.is-fixed {\n    animation: ${fadeInAnimation} 0.25s ease-in;\n    height: ${OMNIBAR_HEIGHT}px;\n    max-height: ${OMNIBAR_HEIGHT}px;\n    width: 100%;\n\n    background-color: ${themeGet('colors.canvas.overlay')};\n    box-shadow: inset -1px 0 0 0 ${themeGet('colors.border.default')},\n      inset 1px 0 0 0 ${themeGet('colors.border.default')}, inset 0px 1px 0 0 ${themeGet('colors.border.default')},\n      inset 0px -1px 0 0 ${themeGet('colors.border.default')}, ${themeGet('shadows.shadow.medium')};\n    border-radius: 6px;\n\n    &.is-focused {\n      box-shadow: inset 0 0 0 2px ${themeGet('colors.accent.emphasis')};\n    }\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{closeModal}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"medium\""
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{\n        ...testIdProps('add-column-menu'),\n        initialFocusRef: textInputRef,\n        sx: maxOverlayHeight\n          ? {maxHeight: maxOverlayHeight, overflowY: 'auto', overflowX: 'visible'}\n          : {overflow: 'visible'}\n      }}"
        },
        {
          "name": "focusZoneSettings",
          "kind": "JsxExpression",
          "text": "{{bindKeys: FocusKeys.Tab}}"
        }
      ],
      "line_start": 358,
      "line_end": 505,
      "text": "\n    <AnchoredOverlay\n      anchorRef={anchorRef}\n      renderAnchor={null}\n      open={isOpen}\n      onClose={closeModal}\n      width=\"medium\"\n      overlayProps={{\n        ...testIdProps('add-column-menu'),\n        initialFocusRef: textInputRef,\n        sx: maxOverlayHeight\n          ? {maxHeight: maxOverlayHeight, overflowY: 'auto', overflowX: 'visible'}\n          : {overflow: 'visible'}\n      }}\n      focusZoneSettings={{bindKeys: FocusKeys.Tab}}\n    >\n      <ActionList ref={selectMenuListRef} {...drop.props} sx={{cursor: 'default', pb: 0}}>\n        <Box sx={{p: 3, pb: 0, mb: 2, position: 'relative'}}>\n          <form onSubmit={e => e.preventDefault()}>\n            <FormControl id=\"add-column-name-input\">\n              <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <EmojiPicker sx={{width: '100%'}}>\n                <TextInput\n                  id=\"add-column-name-input\"\n                  {...inputCompositionProps}\n                  onFocus={handleFocus}\n                  value={title}\n                  className={isTitleValid ? '' : 'error'}\n                  onChange={handleTitleChange}\n                  ref={textInputRef}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                  aria-invalid={!isTitleValid}\n                  {...testIdProps('add-column-name-input')}\n                  aria-describedby=\"add-column-name-input-invalid\"\n                  validationStatus={!isTitleValid ? 'error' : undefined}\n                />\n              </EmojiPicker>\n              {!isTitleValid && (\n                <FormControl.Validation id=\"add-column-name-input-invalid\" variant=\"error\">\n                  {validationMessage}\n                </FormControl.Validation>\n              )}\n            </FormControl>\n          </form>\n        </Box>\n        <Box sx={{px: 3}}>\n          <ActionMenu>\n            <ActionMenu.Button\n              sx={{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}\n              {...testIdProps('add-column-type')}\n            >\n              <Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>\n            </ActionMenu.Button>\n            <ActionMenu.Overlay>\n              <ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </Box>\n        {selectedColumn === MemexColumnDataType.SingleSelect && (\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <SingleSelectForm\n              options={options}\n              canRemoveOption={canRemoveOption}\n              addOption={addOption}\n              updateOption={updateOption}\n              removeOption={removeOption}\n              renderTextInput={(_option, index, props) => (\n                <EmojiPicker sx={{width: '100%'}}>\n                  <TextInput\n                    aria-label=\"New option name\"\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus\n                    placeholder={`Option ${index + 1}`}\n                    {...props}\n                  />\n                </EmojiPicker>\n              )}\n            />\n          </Box>\n        )}\n        {selectedColumn === MemexColumnDataType.Iteration && (\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <NewIterationOptions\n              duration={iterationDuration}\n              onDurationChange={setIterationDuration}\n              onValidChange={setIsIterationOptionsValid}\n              startDate={iterationStartDate}\n              onStartDateChange={setIterationStartDate}\n              minStartDate={minIterationStartDate}\n            />\n          </Box>\n        )}\n        <Box\n          sx={{\n            justifyContent: 'flex-end',\n            px: 3,\n            py: 2,\n            mt: 4,\n            borderTop: '1px solid',\n            borderColor: 'border.muted',\n            display: 'flex',\n            backgroundColor: theme => `${theme.colors.canvas.default}`\n          }}\n        >\n          <Button {...defaultButtonProps} onClick={closeModal}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            {...testIdProps('add-column-modal-save')}\n            {...defaultButtonProps}\n            onClick={saveNewColumn}\n            disabled={!isColumnValid || !isIterationOptionsValid}\n            sx={{ml: 1}}\n          >\n            {saveText}\n          </Button>\n        </Box>\n      </ActionList>\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{selectMenuListRef}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...drop.props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{cursor: 'default', pb: 0}}"
        }
      ],
      "line_start": 373,
      "line_end": 504,
      "text": "<ActionList ref={selectMenuListRef} {...drop.props} sx={{cursor: 'default', pb: 0}}>\n        <Box sx={{p: 3, pb: 0, mb: 2, position: 'relative'}}>\n          <form onSubmit={e => e.preventDefault()}>\n            <FormControl id=\"add-column-name-input\">\n              <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <EmojiPicker sx={{width: '100%'}}>\n                <TextInput\n                  id=\"add-column-name-input\"\n                  {...inputCompositionProps}\n                  onFocus={handleFocus}\n                  value={title}\n                  className={isTitleValid ? '' : 'error'}\n                  onChange={handleTitleChange}\n                  ref={textInputRef}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                  aria-invalid={!isTitleValid}\n                  {...testIdProps('add-column-name-input')}\n                  aria-describedby=\"add-column-name-input-invalid\"\n                  validationStatus={!isTitleValid ? 'error' : undefined}\n                />\n              </EmojiPicker>\n              {!isTitleValid && (\n                <FormControl.Validation id=\"add-column-name-input-invalid\" variant=\"error\">\n                  {validationMessage}\n                </FormControl.Validation>\n              )}\n            </FormControl>\n          </form>\n        </Box>\n        <Box sx={{px: 3}}>\n          <ActionMenu>\n            <ActionMenu.Button\n              sx={{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}\n              {...testIdProps('add-column-type')}\n            >\n              <Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>\n            </ActionMenu.Button>\n            <ActionMenu.Overlay>\n              <ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </Box>\n        {selectedColumn === MemexColumnDataType.SingleSelect && (\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <SingleSelectForm\n              options={options}\n              canRemoveOption={canRemoveOption}\n              addOption={addOption}\n              updateOption={updateOption}\n              removeOption={removeOption}\n              renderTextInput={(_option, index, props) => (\n                <EmojiPicker sx={{width: '100%'}}>\n                  <TextInput\n                    aria-label=\"New option name\"\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus\n                    placeholder={`Option ${index + 1}`}\n                    {...props}\n                  />\n                </EmojiPicker>\n              )}\n            />\n          </Box>\n        )}\n        {selectedColumn === MemexColumnDataType.Iteration && (\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <NewIterationOptions\n              duration={iterationDuration}\n              onDurationChange={setIterationDuration}\n              onValidChange={setIsIterationOptionsValid}\n              startDate={iterationStartDate}\n              onStartDateChange={setIterationStartDate}\n              minStartDate={minIterationStartDate}\n            />\n          </Box>\n        )}\n        <Box\n          sx={{\n            justifyContent: 'flex-end',\n            px: 3,\n            py: 2,\n            mt: 4,\n            borderTop: '1px solid',\n            borderColor: 'border.muted',\n            display: 'flex',\n            backgroundColor: theme => `${theme.colors.canvas.default}`\n          }}\n        >\n          <Button {...defaultButtonProps} onClick={closeModal}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            {...testIdProps('add-column-modal-save')}\n            {...defaultButtonProps}\n            onClick={saveNewColumn}\n            disabled={!isColumnValid || !isIterationOptionsValid}\n            sx={{ml: 1}}\n          >\n            {saveText}\n          </Button>\n        </Box>\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 3, pb: 0, mb: 2, position: 'relative'}}"
        }
      ],
      "line_start": 374,
      "line_end": 403,
      "text": "<Box sx={{p: 3, pb: 0, mb: 2, position: 'relative'}}>\n          <form onSubmit={e => e.preventDefault()}>\n            <FormControl id=\"add-column-name-input\">\n              <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <EmojiPicker sx={{width: '100%'}}>\n                <TextInput\n                  id=\"add-column-name-input\"\n                  {...inputCompositionProps}\n                  onFocus={handleFocus}\n                  value={title}\n                  className={isTitleValid ? '' : 'error'}\n                  onChange={handleTitleChange}\n                  ref={textInputRef}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                  aria-invalid={!isTitleValid}\n                  {...testIdProps('add-column-name-input')}\n                  aria-describedby=\"add-column-name-input-invalid\"\n                  validationStatus={!isTitleValid ? 'error' : undefined}\n                />\n              </EmojiPicker>\n              {!isTitleValid && (\n                <FormControl.Validation id=\"add-column-name-input-invalid\" variant=\"error\">\n                  {validationMessage}\n                </FormControl.Validation>\n              )}\n            </FormControl>\n          </form>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "FormControl",
      "props": [
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"add-column-name-input\""
        }
      ],
      "line_start": 376,
      "line_end": 401,
      "text": "<FormControl id=\"add-column-name-input\">\n              <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <EmojiPicker sx={{width: '100%'}}>\n                <TextInput\n                  id=\"add-column-name-input\"\n                  {...inputCompositionProps}\n                  onFocus={handleFocus}\n                  value={title}\n                  className={isTitleValid ? '' : 'error'}\n                  onChange={handleTitleChange}\n                  ref={textInputRef}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                  aria-invalid={!isTitleValid}\n                  {...testIdProps('add-column-name-input')}\n                  aria-describedby=\"add-column-name-input-invalid\"\n                  validationStatus={!isTitleValid ? 'error' : undefined}\n                />\n              </EmojiPicker>\n              {!isTitleValid && (\n                <FormControl.Validation id=\"add-column-name-input-invalid\" variant=\"error\">\n                  {validationMessage}\n                </FormControl.Validation>\n              )}\n            </FormControl>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "FormControl.Label",
      "parent": "FormControl",
      "child": "Label",
      "props": [
        {
          "name": "visuallyHidden"
        }
      ],
      "line_start": 377,
      "line_end": 377,
      "text": "<FormControl.Label visuallyHidden>Column name</FormControl.Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "FormControl.Validation",
      "parent": "FormControl",
      "child": "Validation",
      "props": [
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"add-column-name-input-invalid\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"error\""
        }
      ],
      "line_start": 397,
      "line_end": 399,
      "text": "\n                <FormControl.Validation id=\"add-column-name-input-invalid\" variant=\"error\">\n                  {validationMessage}\n                </FormControl.Validation>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 3}}"
        }
      ],
      "line_start": 404,
      "line_end": 441,
      "text": "<Box sx={{px: 3}}>\n          <ActionMenu>\n            <ActionMenu.Button\n              sx={{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}\n              {...testIdProps('add-column-type')}\n            >\n              <Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>\n            </ActionMenu.Button>\n            <ActionMenu.Overlay>\n              <ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 405,
      "line_end": 440,
      "text": "<ActionMenu>\n            <ActionMenu.Button\n              sx={{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}\n              {...testIdProps('add-column-type')}\n            >\n              <Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>\n            </ActionMenu.Button>\n            <ActionMenu.Overlay>\n              <ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('add-column-type')}"
        }
      ],
      "line_start": 406,
      "line_end": 422,
      "text": "<ActionMenu.Button\n              sx={{\n                width: '100%',\n                pr: 2,\n                mb: 2,\n                gridTemplateColumns: 'min-content 1fr min-content',\n                '[data-component=text]': {textAlign: 'left'}\n              }}\n              {...testIdProps('add-column-type')}\n            >\n              <Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>\n            </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexGrow: 1, alignItems: 'center', display: 'flex'}}"
        }
      ],
      "line_start": 416,
      "line_end": 421,
      "text": "<Box sx={{flexGrow: 1, alignItems: 'center', display: 'flex'}}>\n                <Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>\n                <Box>{dropdownSelection.text}</Box>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [],
      "line_start": 417,
      "line_end": 419,
      "text": "<Box>\n                  <StyledOcticon icon={SelectedIcon} sx={{mr: 1, color: 'fg.muted'}} />\n                </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [],
      "line_start": 420,
      "line_end": 420,
      "text": "<Box>{dropdownSelection.text}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 423,
      "line_end": 439,
      "text": "<ActionMenu.Overlay>\n              <ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>\n            </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 424,
      "line_end": 438,
      "text": "<ActionList selectionVariant=\"single\">\n                {items.map((item, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>\n                ))}\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{dropdownSelection === item}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => onDropdownChange(item)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...item}"
        }
      ],
      "line_start": 426,
      "line_end": 436,
      "text": "\n                  <ActionList.Item\n                    key={index}\n                    selected={dropdownSelection === item}\n                    onSelect={() => onDropdownChange(item)}\n                    {...item}\n                  >\n                    <ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>\n                    {item.text}\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 432,
      "line_end": 434,
      "text": "<ActionList.LeadingVisual>\n                      <item.leadingVisual />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 3, pt: 2, flexWrap: 'wrap'}}"
        }
      ],
      "line_start": 443,
      "line_end": 463,
      "text": "\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <SingleSelectForm\n              options={options}\n              canRemoveOption={canRemoveOption}\n              addOption={addOption}\n              updateOption={updateOption}\n              removeOption={removeOption}\n              renderTextInput={(_option, index, props) => (\n                <EmojiPicker sx={{width: '100%'}}>\n                  <TextInput\n                    aria-label=\"New option name\"\n                    // eslint-disable-next-line jsx-a11y/no-autofocus\n                    autoFocus\n                    placeholder={`Option ${index + 1}`}\n                    {...props}\n                  />\n                </EmojiPicker>\n              )}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 3, pt: 2, flexWrap: 'wrap'}}"
        }
      ],
      "line_start": 466,
      "line_end": 476,
      "text": "\n          <Box sx={{px: 3, pt: 2, flexWrap: 'wrap'}}>\n            <StyledOptionText>Options</StyledOptionText>\n            <NewIterationOptions\n              duration={iterationDuration}\n              onDurationChange={setIterationDuration}\n              onValidChange={setIsIterationOptionsValid}\n              startDate={iterationStartDate}\n              onStartDateChange={setIterationStartDate}\n              minStartDate={minIterationStartDate}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            justifyContent: 'flex-end',\n            px: 3,\n            py: 2,\n            mt: 4,\n            borderTop: '1px solid',\n            borderColor: 'border.muted',\n            display: 'flex',\n            backgroundColor: theme => `${theme.colors.canvas.default}`\n          }}"
        }
      ],
      "line_start": 478,
      "line_end": 503,
      "text": "<Box\n          sx={{\n            justifyContent: 'flex-end',\n            px: 3,\n            py: 2,\n            mt: 4,\n            borderTop: '1px solid',\n            borderColor: 'border.muted',\n            display: 'flex',\n            backgroundColor: theme => `${theme.colors.canvas.default}`\n          }}\n        >\n          <Button {...defaultButtonProps} onClick={closeModal}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            {...testIdProps('add-column-modal-save')}\n            {...defaultButtonProps}\n            onClick={saveNewColumn}\n            disabled={!isColumnValid || !isIterationOptionsValid}\n            sx={{ml: 1}}\n          >\n            {saveText}\n          </Button>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...defaultButtonProps}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{closeModal}"
        }
      ],
      "line_start": 490,
      "line_end": 492,
      "text": "<Button {...defaultButtonProps} onClick={closeModal}>\n            Cancel\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/add-column-modal.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('add-column-modal-save')}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...defaultButtonProps}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{saveNewColumn}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!isColumnValid || !isIterationOptionsValid}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 493,
      "line_end": 502,
      "text": "<Button\n            variant=\"primary\"\n            {...testIdProps('add-column-modal-save')}\n            {...defaultButtonProps}\n            onClick={saveNewColumn}\n            disabled={!isColumnValid || !isIterationOptionsValid}\n            sx={{ml: 1}}\n          >\n            {saveText}\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...table.getTableProps({onKeyDown, onBlur, role: 'grid'})}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('table-root')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        flex: '1 1 auto',\n        flexDirection: 'column',\n        width: '100%',\n        position: 'relative',\n        backgroundImage: theme =>\n          table.groupedRows\n            ? 'none'\n            : `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 1 1' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='1' height='1' fill='transparent' /%3E%3C/svg%3E\"), url(\"data:image/svg+xml,%3Csvg viewBox='0 0 1 1' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='1' height='1' fill='${encodeURIComponent(\n                theme.colors.border.muted\n              )}' /%3E%3C/svg%3E\")`,\n        backgroundSize: '1px 37px',\n        backgroundPositionY: '15px',\n        backgroundRepeat: 'repeat-x, repeat',\n        bg: table.groupedRows\n          ? theme => `${theme.colors.canvas.inset}`\n          : isOmnibarFixed\n          ? theme => `${theme.colors.canvas.default}`\n          : theme => `${theme.colors.canvas.inset}`,\n        display: 'flex'\n      }}"
        }
      ],
      "line_start": 300,
      "line_end": 419,
      "text": "\n    <Box\n      {...table.getTableProps({onKeyDown, onBlur, role: 'grid'})}\n      {...testIdProps('table-root')}\n      sx={{\n        flex: '1 1 auto',\n        flexDirection: 'column',\n        width: '100%',\n        position: 'relative',\n        backgroundImage: theme =>\n          table.groupedRows\n            ? 'none'\n            : `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 1 1' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='1' height='1' fill='transparent' /%3E%3C/svg%3E\"), url(\"data:image/svg+xml,%3Csvg viewBox='0 0 1 1' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='1' height='1' fill='${encodeURIComponent(\n                theme.colors.border.muted\n              )}' /%3E%3C/svg%3E\")`,\n        backgroundSize: '1px 37px',\n        backgroundPositionY: '15px',\n        backgroundRepeat: 'repeat-x, repeat',\n        bg: table.groupedRows\n          ? theme => `${theme.colors.canvas.inset}`\n          : isOmnibarFixed\n          ? theme => `${theme.colors.canvas.default}`\n          : theme => `${theme.colors.canvas.inset}`,\n        display: 'flex'\n      }}\n    >\n      <Box sx={{position: 'relative', flex: '1 1 auto', width: '100%'}}>\n        <BaseStyles fontSize=\"14px\">\n          <ObserverProvider rootRef={scrollRef} sizeEstimate={CELL_HEIGHT * VIRTUALIZATION_CHUNK_SIZE}>\n            <Box\n              sx={{\n                flexDirection: 'column',\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                overflow: 'auto',\n                userSelect: 'none',\n                scrollBehavior: 'smooth',\n                '@media (prefers-reduced-motion)': {\n                  scrollBehavior: 'auto'\n                },\n                display: 'flex'\n              }}\n              {...testIdProps('table-scroll-container')}\n              ref={scrollRef}\n            >\n              <div\n                style={{\n                  userSelect: 'none',\n                  position: 'relative',\n                  width: table.totalColumnsWidth,\n                  minWidth: '100%',\n                  // Leave enough space at the bottom for the omnibar not to obscure the last row.\n                  paddingBottom: isOmnibarFixed ? computedPaddingBottom : 'unset'\n                }}\n              >\n                <TableHeader\n                  headerGroups={table.headerGroups}\n                  height={TABLE_HEADER_HEIGHT}\n                  scrollRef={scrollRef}\n                  tableWidth={table.totalColumnsWidth}\n                />\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} height={TABLE_HEADER_HEIGHT} sticky />\n                <div ref={containerRef}>\n                  <CopyPasteProvider>\n                    <DragAndDropProvider scrollAxis=\"y\" scrollRef={scrollRef}>\n                      {tableGroups\n                        ? tableGroups.map((group, index) => {\n                            return (\n                              <TableGroup\n                                key={group.id}\n                                groupId={group.id}\n                                rows={group.subRows}\n                                metadata={{\n                                  value: group.groupedValue,\n                                  sourceObject: group.groupedSourceObject\n                                }}\n                                firstRowIndex={group.subRows[0]?.index}\n                                itemData={itemData}\n                                isCollapsed={group.isCollapsed}\n                                scrollRef={scrollRef}\n                                isLastGroup={index === tableGroups.length - 1}\n                                shouldDisableFooter={shouldDisableGroupFooter(group)}\n                                footerPlaceholder={getGroupFooterPlaceholder(group)}\n                                isEditable={hasWritePermissions}\n                              />\n                            )\n                          })\n                        : chunk(table.rows, VIRTUALIZATION_CHUNK_SIZE).map((rowChunk, index) => (\n                            <TableRowChunk\n                              key={index}\n                              rows={rowChunk}\n                              rowOffset={VIRTUALIZATION_CHUNK_SIZE * index}\n                              chunkIndex={index}\n                              chunkSize={VIRTUALIZATION_CHUNK_SIZE}\n                              itemData={itemData}\n                            />\n                          ))}\n                    </DragAndDropProvider>\n                  </CopyPasteProvider>\n                </div>\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} />\n                {!tableGroups && <RowDropZoneSash rowHeight={CELL_HEIGHT} rowCount={table.rows.length} />}\n              </div>\n            </Box>\n          </ObserverProvider>\n        </BaseStyles>\n      </Box>\n      {(!tableGroups || tableGroups.length === 0) && hasWritePermissions && (\n        <OmnibarContainer\n          horizontalScrollbarSize={horizontalScrollbarSize}\n          verticalScrollbarSize={verticalScrollbarSize}\n          isFixed={isOmnibarFixed}\n          effectiveTableHeight={effectiveTableHeight}\n        >\n          <TableOmnibar onAddItem={onNewItem} isFixed={isOmnibarFixed} />\n        </OmnibarContainer>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', flex: '1 1 auto', width: '100%'}}"
        }
      ],
      "line_start": 325,
      "line_end": 408,
      "text": "<Box sx={{position: 'relative', flex: '1 1 auto', width: '100%'}}>\n        <BaseStyles fontSize=\"14px\">\n          <ObserverProvider rootRef={scrollRef} sizeEstimate={CELL_HEIGHT * VIRTUALIZATION_CHUNK_SIZE}>\n            <Box\n              sx={{\n                flexDirection: 'column',\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                overflow: 'auto',\n                userSelect: 'none',\n                scrollBehavior: 'smooth',\n                '@media (prefers-reduced-motion)': {\n                  scrollBehavior: 'auto'\n                },\n                display: 'flex'\n              }}\n              {...testIdProps('table-scroll-container')}\n              ref={scrollRef}\n            >\n              <div\n                style={{\n                  userSelect: 'none',\n                  position: 'relative',\n                  width: table.totalColumnsWidth,\n                  minWidth: '100%',\n                  // Leave enough space at the bottom for the omnibar not to obscure the last row.\n                  paddingBottom: isOmnibarFixed ? computedPaddingBottom : 'unset'\n                }}\n              >\n                <TableHeader\n                  headerGroups={table.headerGroups}\n                  height={TABLE_HEADER_HEIGHT}\n                  scrollRef={scrollRef}\n                  tableWidth={table.totalColumnsWidth}\n                />\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} height={TABLE_HEADER_HEIGHT} sticky />\n                <div ref={containerRef}>\n                  <CopyPasteProvider>\n                    <DragAndDropProvider scrollAxis=\"y\" scrollRef={scrollRef}>\n                      {tableGroups\n                        ? tableGroups.map((group, index) => {\n                            return (\n                              <TableGroup\n                                key={group.id}\n                                groupId={group.id}\n                                rows={group.subRows}\n                                metadata={{\n                                  value: group.groupedValue,\n                                  sourceObject: group.groupedSourceObject\n                                }}\n                                firstRowIndex={group.subRows[0]?.index}\n                                itemData={itemData}\n                                isCollapsed={group.isCollapsed}\n                                scrollRef={scrollRef}\n                                isLastGroup={index === tableGroups.length - 1}\n                                shouldDisableFooter={shouldDisableGroupFooter(group)}\n                                footerPlaceholder={getGroupFooterPlaceholder(group)}\n                                isEditable={hasWritePermissions}\n                              />\n                            )\n                          })\n                        : chunk(table.rows, VIRTUALIZATION_CHUNK_SIZE).map((rowChunk, index) => (\n                            <TableRowChunk\n                              key={index}\n                              rows={rowChunk}\n                              rowOffset={VIRTUALIZATION_CHUNK_SIZE * index}\n                              chunkIndex={index}\n                              chunkSize={VIRTUALIZATION_CHUNK_SIZE}\n                              itemData={itemData}\n                            />\n                          ))}\n                    </DragAndDropProvider>\n                  </CopyPasteProvider>\n                </div>\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} />\n                {!tableGroups && <RowDropZoneSash rowHeight={CELL_HEIGHT} rowCount={table.rows.length} />}\n              </div>\n            </Box>\n          </ObserverProvider>\n        </BaseStyles>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "name": "BaseStyles",
      "props": [
        {
          "name": "fontSize",
          "kind": "StringLiteral",
          "text": "\"14px\""
        }
      ],
      "line_start": 326,
      "line_end": 407,
      "text": "<BaseStyles fontSize=\"14px\">\n          <ObserverProvider rootRef={scrollRef} sizeEstimate={CELL_HEIGHT * VIRTUALIZATION_CHUNK_SIZE}>\n            <Box\n              sx={{\n                flexDirection: 'column',\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                overflow: 'auto',\n                userSelect: 'none',\n                scrollBehavior: 'smooth',\n                '@media (prefers-reduced-motion)': {\n                  scrollBehavior: 'auto'\n                },\n                display: 'flex'\n              }}\n              {...testIdProps('table-scroll-container')}\n              ref={scrollRef}\n            >\n              <div\n                style={{\n                  userSelect: 'none',\n                  position: 'relative',\n                  width: table.totalColumnsWidth,\n                  minWidth: '100%',\n                  // Leave enough space at the bottom for the omnibar not to obscure the last row.\n                  paddingBottom: isOmnibarFixed ? computedPaddingBottom : 'unset'\n                }}\n              >\n                <TableHeader\n                  headerGroups={table.headerGroups}\n                  height={TABLE_HEADER_HEIGHT}\n                  scrollRef={scrollRef}\n                  tableWidth={table.totalColumnsWidth}\n                />\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} height={TABLE_HEADER_HEIGHT} sticky />\n                <div ref={containerRef}>\n                  <CopyPasteProvider>\n                    <DragAndDropProvider scrollAxis=\"y\" scrollRef={scrollRef}>\n                      {tableGroups\n                        ? tableGroups.map((group, index) => {\n                            return (\n                              <TableGroup\n                                key={group.id}\n                                groupId={group.id}\n                                rows={group.subRows}\n                                metadata={{\n                                  value: group.groupedValue,\n                                  sourceObject: group.groupedSourceObject\n                                }}\n                                firstRowIndex={group.subRows[0]?.index}\n                                itemData={itemData}\n                                isCollapsed={group.isCollapsed}\n                                scrollRef={scrollRef}\n                                isLastGroup={index === tableGroups.length - 1}\n                                shouldDisableFooter={shouldDisableGroupFooter(group)}\n                                footerPlaceholder={getGroupFooterPlaceholder(group)}\n                                isEditable={hasWritePermissions}\n                              />\n                            )\n                          })\n                        : chunk(table.rows, VIRTUALIZATION_CHUNK_SIZE).map((rowChunk, index) => (\n                            <TableRowChunk\n                              key={index}\n                              rows={rowChunk}\n                              rowOffset={VIRTUALIZATION_CHUNK_SIZE * index}\n                              chunkIndex={index}\n                              chunkSize={VIRTUALIZATION_CHUNK_SIZE}\n                              itemData={itemData}\n                            />\n                          ))}\n                    </DragAndDropProvider>\n                  </CopyPasteProvider>\n                </div>\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} />\n                {!tableGroups && <RowDropZoneSash rowHeight={CELL_HEIGHT} rowCount={table.rows.length} />}\n              </div>\n            </Box>\n          </ObserverProvider>\n        </BaseStyles>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/react-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                flexDirection: 'column',\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                overflow: 'auto',\n                userSelect: 'none',\n                scrollBehavior: 'smooth',\n                '@media (prefers-reduced-motion)': {\n                  scrollBehavior: 'auto'\n                },\n                display: 'flex'\n              }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('table-scroll-container')}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{scrollRef}"
        }
      ],
      "line_start": 328,
      "line_end": 405,
      "text": "<Box\n              sx={{\n                flexDirection: 'column',\n                position: 'absolute',\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                overflow: 'auto',\n                userSelect: 'none',\n                scrollBehavior: 'smooth',\n                '@media (prefers-reduced-motion)': {\n                  scrollBehavior: 'auto'\n                },\n                display: 'flex'\n              }}\n              {...testIdProps('table-scroll-container')}\n              ref={scrollRef}\n            >\n              <div\n                style={{\n                  userSelect: 'none',\n                  position: 'relative',\n                  width: table.totalColumnsWidth,\n                  minWidth: '100%',\n                  // Leave enough space at the bottom for the omnibar not to obscure the last row.\n                  paddingBottom: isOmnibarFixed ? computedPaddingBottom : 'unset'\n                }}\n              >\n                <TableHeader\n                  headerGroups={table.headerGroups}\n                  height={TABLE_HEADER_HEIGHT}\n                  scrollRef={scrollRef}\n                  tableWidth={table.totalColumnsWidth}\n                />\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} height={TABLE_HEADER_HEIGHT} sticky />\n                <div ref={containerRef}>\n                  <CopyPasteProvider>\n                    <DragAndDropProvider scrollAxis=\"y\" scrollRef={scrollRef}>\n                      {tableGroups\n                        ? tableGroups.map((group, index) => {\n                            return (\n                              <TableGroup\n                                key={group.id}\n                                groupId={group.id}\n                                rows={group.subRows}\n                                metadata={{\n                                  value: group.groupedValue,\n                                  sourceObject: group.groupedSourceObject\n                                }}\n                                firstRowIndex={group.subRows[0]?.index}\n                                itemData={itemData}\n                                isCollapsed={group.isCollapsed}\n                                scrollRef={scrollRef}\n                                isLastGroup={index === tableGroups.length - 1}\n                                shouldDisableFooter={shouldDisableGroupFooter(group)}\n                                footerPlaceholder={getGroupFooterPlaceholder(group)}\n                                isEditable={hasWritePermissions}\n                              />\n                            )\n                          })\n                        : chunk(table.rows, VIRTUALIZATION_CHUNK_SIZE).map((rowChunk, index) => (\n                            <TableRowChunk\n                              key={index}\n                              rows={rowChunk}\n                              rowOffset={VIRTUALIZATION_CHUNK_SIZE * index}\n                              chunkIndex={index}\n                              chunkSize={VIRTUALIZATION_CHUNK_SIZE}\n                              itemData={itemData}\n                            />\n                          ))}\n                    </DragAndDropProvider>\n                  </CopyPasteProvider>\n                </div>\n                <ColumnDropZoneSash visibleColumns={table.visibleColumns} />\n                {!tableGroups && <RowDropZoneSash rowHeight={CELL_HEIGHT} rowCount={table.rows.length} />}\n              </div>\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/repo-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'center', my: 4, display: 'flex'}}"
        }
      ],
      "line_start": 46,
      "line_end": 48,
      "text": "\n            <Box sx={{justifyContent: 'center', my: 4, display: 'flex'}}>\n              <Spinner size=\"medium\" />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/repo-searcher.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        width: '100%',\n        cursor: 'text',\n        display: 'flex',\n        position: 'relative'\n      }}"
        }
      ],
      "line_start": 248,
      "line_end": 272,
      "text": "\n    <Box\n      sx={{\n        width: '100%',\n        cursor: 'text',\n        display: 'flex',\n        position: 'relative'\n      }}\n    >\n      <OmnibarPlaceholder\n        inputHasFocus={inputHasFocus}\n        value={inputRef.current?.value}\n        placeholder={defaultPlaceholder}\n      />\n      {input}\n      <RepoList\n        {...getListProps()}\n        inputRef={inputRef}\n        aria-label={placeholder}\n        isOpen={isOpen}\n        loading={refreshing}\n        positionDataMap={positionDataMap}\n        getItemProps={getItemProps}\n        repositories={searchResults || []}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{numberRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          width: '100%',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'fg.muted',\n          paddingLeft: 3,\n          display: 'flex'\n        }}"
        }
      ],
      "line_start": 202,
      "line_end": 214,
      "text": "<Box\n        ref={numberRef}\n        sx={{\n          width: '100%',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'fg.muted',\n          paddingLeft: 3,\n          display: 'flex'\n        }}\n      >\n        {rowNumber}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{menuOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{setMenuState}"
        }
      ],
      "line_start": 217,
      "line_end": 294,
      "text": "<ActionMenu open={menuOpen} onOpenChange={setMenuState}>\n            <ActionMenu.Anchor>\n              <RowMenuButton\n                icon={TriangleDownIcon}\n                aria-label=\"Row actions\"\n                className=\"menu-trigger\"\n                tabIndex={-1}\n                {...testIdProps('row-menu-trigger')}\n              />\n            </ActionMenu.Anchor>\n            <ActionMenu.Overlay portalContainerName=\"table-portal-root\" {...testIdProps('row-menu')}>\n              <ActionList>\n                {!multipleSelected && contentType === ItemType.DraftIssue ? (\n                  <ActionList.Item\n                    onSelect={() => setRepoPickerOpen(true)}\n                    {...testIdProps('row-menu-convert-to-issue')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n\n                {isArchivable ? (\n                  <>\n                    {multipleSelected ? (\n                      <ActionList.Item onSelect={archiveMultipleOnClick} {...testIdProps('row-menu-archive-multiple')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive {selectedRows.length} items\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ) : (\n                      <ActionList.Item onSelect={archiveOnClick} {...testIdProps('row-menu-archive')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    )}\n                  </>\n                ) : null}\n\n                {multipleSelected ? (\n                  <ActionList.Item\n                    variant=\"danger\"\n                    onSelect={deleteMultipleOnClick}\n                    {...testIdProps('row-menu-delete-multiple')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete {selectedRows.length} selected items from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : (\n                  <ActionList.Item variant=\"danger\" onSelect={deleteOnClick} {...testIdProps('row-menu-delete')}>\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                )}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 218,
      "line_end": 226,
      "text": "<ActionMenu.Anchor>\n              <RowMenuButton\n                icon={TriangleDownIcon}\n                aria-label=\"Row actions\"\n                className=\"menu-trigger\"\n                tabIndex={-1}\n                {...testIdProps('row-menu-trigger')}\n              />\n            </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "portalContainerName",
          "kind": "StringLiteral",
          "text": "\"table-portal-root\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('row-menu')}"
        }
      ],
      "line_start": 227,
      "line_end": 293,
      "text": "<ActionMenu.Overlay portalContainerName=\"table-portal-root\" {...testIdProps('row-menu')}>\n              <ActionList>\n                {!multipleSelected && contentType === ItemType.DraftIssue ? (\n                  <ActionList.Item\n                    onSelect={() => setRepoPickerOpen(true)}\n                    {...testIdProps('row-menu-convert-to-issue')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n\n                {isArchivable ? (\n                  <>\n                    {multipleSelected ? (\n                      <ActionList.Item onSelect={archiveMultipleOnClick} {...testIdProps('row-menu-archive-multiple')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive {selectedRows.length} items\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ) : (\n                      <ActionList.Item onSelect={archiveOnClick} {...testIdProps('row-menu-archive')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    )}\n                  </>\n                ) : null}\n\n                {multipleSelected ? (\n                  <ActionList.Item\n                    variant=\"danger\"\n                    onSelect={deleteMultipleOnClick}\n                    {...testIdProps('row-menu-delete-multiple')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete {selectedRows.length} selected items from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : (\n                  <ActionList.Item variant=\"danger\" onSelect={deleteOnClick} {...testIdProps('row-menu-delete')}>\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                )}\n              </ActionList>\n            </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 228,
      "line_end": 292,
      "text": "<ActionList>\n                {!multipleSelected && contentType === ItemType.DraftIssue ? (\n                  <ActionList.Item\n                    onSelect={() => setRepoPickerOpen(true)}\n                    {...testIdProps('row-menu-convert-to-issue')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n\n                {isArchivable ? (\n                  <>\n                    {multipleSelected ? (\n                      <ActionList.Item onSelect={archiveMultipleOnClick} {...testIdProps('row-menu-archive-multiple')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive {selectedRows.length} items\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ) : (\n                      <ActionList.Item onSelect={archiveOnClick} {...testIdProps('row-menu-archive')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    )}\n                  </>\n                ) : null}\n\n                {multipleSelected ? (\n                  <ActionList.Item\n                    variant=\"danger\"\n                    onSelect={deleteMultipleOnClick}\n                    {...testIdProps('row-menu-delete-multiple')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete {selectedRows.length} selected items from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : (\n                  <ActionList.Item variant=\"danger\" onSelect={deleteOnClick} {...testIdProps('row-menu-delete')}>\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                )}\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => setRepoPickerOpen(true)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...testIdProps('row-menu-convert-to-issue')}"
        }
      ],
      "line_start": 230,
      "line_end": 238,
      "text": "\n                  <ActionList.Item\n                    onSelect={() => setRepoPickerOpen(true)}\n                    {...testIdProps('row-menu-convert-to-issue')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 234,
      "line_end": 236,
      "text": "<ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{archiveMultipleOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('row-menu-archive-multiple')}"
        }
      ],
      "line_start": 244,
      "line_end": 252,
      "text": "\n                      <ActionList.Item onSelect={archiveMultipleOnClick} {...testIdProps('row-menu-archive-multiple')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive {selectedRows.length} items\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 245,
      "line_end": 247,
      "text": "<ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 249,
      "line_end": 251,
      "text": "<ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{archiveOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('row-menu-archive')}"
        }
      ],
      "line_start": 254,
      "line_end": 262,
      "text": "\n                      <ActionList.Item onSelect={archiveOnClick} {...testIdProps('row-menu-archive')}>\n                        <ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>\n                        Archive\n                        <ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>\n                      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 255,
      "line_end": 257,
      "text": "<ActionList.LeadingVisual>\n                          <ArchiveIcon />\n                        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 259,
      "line_end": 261,
      "text": "<ActionList.TrailingVisual>\n                          <EKey />\n                        </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{deleteMultipleOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...testIdProps('row-menu-delete-multiple')}"
        }
      ],
      "line_start": 268,
      "line_end": 280,
      "text": "\n                  <ActionList.Item\n                    variant=\"danger\"\n                    onSelect={deleteMultipleOnClick}\n                    {...testIdProps('row-menu-delete-multiple')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete {selectedRows.length} selected items from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 273,
      "line_end": 275,
      "text": "<ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 277,
      "line_end": 279,
      "text": "<ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{deleteOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('row-menu-delete')}"
        }
      ],
      "line_start": 282,
      "line_end": 290,
      "text": "\n                  <ActionList.Item variant=\"danger\" onSelect={deleteOnClick} {...testIdProps('row-menu-delete')}>\n                    <ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>\n                    Delete from project\n                    <ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 283,
      "line_end": 285,
      "text": "<ActionList.LeadingVisual>\n                      <TrashIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 287,
      "line_end": 289,
      "text": "<ActionList.TrailingVisual>\n                      <DelKey />\n                    </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/row-dragger.tsx",
      "name": "IconButton",
      "line_start": 309,
      "line_end": 309,
      "text": " styled(IconButton)`\n  position: absolute;\n  right: 30px;\n  width: 18px;\n  height: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n\n  &:focus {\n    opacity: 1;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/selected-repository-pill.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', display: 'flex'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('repo-searcher-selected-repo')}"
        }
      ],
      "line_start": 8,
      "line_end": 11,
      "text": "\n    <Box sx={{alignItems: 'center', display: 'flex'}} {...testIdProps('repo-searcher-selected-repo')}>\n      <Text sx={{fontSize: 1, mr: 0, color: 'fg.subtle'}}>repo:</Text>\n      <Text sx={{fontSize: 1, color: 'accent.fg', mr: 2}}>{repository.name}</Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/selected-repository-pill.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, mr: 0, color: 'fg.subtle'}}"
        }
      ],
      "line_start": 9,
      "line_end": 9,
      "text": "<Text sx={{fontSize: 1, mr: 0, color: 'fg.subtle'}}>repo:</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/selected-repository-pill.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, color: 'accent.fg', mr: 2}}"
        }
      ],
      "line_start": 10,
      "line_end": 10,
      "text": "<Text sx={{fontSize: 1, color: 'accent.fg', mr: 2}}>{repository.name}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'flex-start', display: 'flex'}}"
        }
      ],
      "line_start": 133,
      "line_end": 137,
      "text": "\n        <Box sx={{justifyContent: 'flex-start', display: 'flex'}}>\n          <Text as=\"p\" sx={{color: 'state.error'}} {...testIdProps('single-select-option-limit-warning')}>\n            {Resources.singleSelectOptionLimitWarning}\n          </Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'state.error'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('single-select-option-limit-warning')}"
        }
      ],
      "line_start": 134,
      "line_end": 136,
      "text": "<Text as=\"p\" sx={{color: 'state.error'}} {...testIdProps('single-select-option-limit-warning')}>\n            {Resources.singleSelectOptionLimitWarning}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'flex-start', mt: 3, display: 'flex'}}"
        }
      ],
      "line_start": 139,
      "line_end": 145,
      "text": "\n        <Box sx={{justifyContent: 'flex-start', mt: 3, display: 'flex'}}>\n          <StyledButton onClick={handleAddOptionClick} {...testIdProps('single-select-add-option')}>\n            <Link muted sx={{fontWeight: 'normal'}}>\n              <StyledOcticon icon={PlusIcon} sx={{mr: 2}} /> Add option\n            </Link>\n          </StyledButton>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Link",
      "props": [
        {
          "name": "muted"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'normal'}}"
        }
      ],
      "line_start": 141,
      "line_end": 143,
      "text": "<Link muted sx={{fontWeight: 'normal'}}>\n              <StyledOcticon icon={PlusIcon} sx={{mr: 2}} /> Add option\n            </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Button",
      "line_start": 151,
      "line_end": 151,
      "text": " styled(Button).attrs({variant: 'invisible'})`\n  padding: 0;\n  border-radius: 3px;\n\n  &:focus {\n    box-shadow: ${themeGet('shadows.btn.focusShadow')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Button",
      "line_start": 151,
      "line_end": 151,
      "text": " styled(Button).attrs",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/single-select-form.tsx",
      "name": "Box",
      "line_start": 173,
      "line_end": 173,
      "text": " styled(Box)`\n  margin-top: 0;\n  margin-bottom: ${themeGet('space.2')};\n  text-align: left;\n  transition: transform 75ms;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/table-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{style}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`table-group-${title}`)}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"rowgroup\""
        }
      ],
      "line_start": 127,
      "line_end": 163,
      "text": "\n    <Box sx={style} ref={ref} {...testIdProps(`table-group-${title}`)} role=\"rowgroup\">\n      {shouldRender ? (\n        <>\n          <Box\n            sx={{\n              boxShadow: 'shadow.medium',\n              borderTop: `${BORDER_WIDTH}px solid`,\n              borderBottom: `${BORDER_WIDTH}px solid`,\n              borderColor: 'border.muted',\n              position: 'relative',\n              zIndex: 0\n            }}\n          >\n            <TableGroupHeader isCollapsed={isCollapsed} metadata={metadata} numberOfRows={rows.length}>\n              <GroupHeaderLabel metadata={metadata} rowCount={rows.length} />\n            </TableGroupHeader>\n\n            {missingRequiredColumnData ? null : (\n              <TableGroupContents\n                groupId={groupId}\n                firstRowIndex={firstRowIndex}\n                isCollapsed={isCollapsed}\n                itemData={itemData}\n                metadata={metadata}\n                rows={rows}\n                scrollRef={scrollRef}\n                isLastGroup={isLastGroup}\n                shouldDisableFooter={shouldDisableFooter}\n                footerPlaceholder={footerPlaceholder}\n                isEditable={isEditable}\n              />\n            )}\n          </Box>\n          <TableGroupSeparator />\n        </>\n      ) : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/table-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              boxShadow: 'shadow.medium',\n              borderTop: `${BORDER_WIDTH}px solid`,\n              borderBottom: `${BORDER_WIDTH}px solid`,\n              borderColor: 'border.muted',\n              position: 'relative',\n              zIndex: 0\n            }}"
        }
      ],
      "line_start": 130,
      "line_end": 159,
      "text": "<Box\n            sx={{\n              boxShadow: 'shadow.medium',\n              borderTop: `${BORDER_WIDTH}px solid`,\n              borderBottom: `${BORDER_WIDTH}px solid`,\n              borderColor: 'border.muted',\n              position: 'relative',\n              zIndex: 0\n            }}\n          >\n            <TableGroupHeader isCollapsed={isCollapsed} metadata={metadata} numberOfRows={rows.length}>\n              <GroupHeaderLabel metadata={metadata} rowCount={rows.length} />\n            </TableGroupHeader>\n\n            {missingRequiredColumnData ? null : (\n              <TableGroupContents\n                groupId={groupId}\n                firstRowIndex={firstRowIndex}\n                isCollapsed={isCollapsed}\n                itemData={itemData}\n                metadata={metadata}\n                rows={rows}\n                scrollRef={scrollRef}\n                isLastGroup={isLastGroup}\n                shouldDisableFooter={shouldDisableFooter}\n                footerPlaceholder={footerPlaceholder}\n                isEditable={isEditable}\n              />\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              '> div:nth-child(2)': {\n                borderLeft: 'none'\n              }\n            }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...headerGroup.getHeaderGroupProps({\n              style: {width: '100%'}\n            })}"
        }
      ],
      "line_start": 125,
      "line_end": 150,
      "text": "\n          /* react-table provides `key` */\n          /* eslint-disable-next-line react/jsx-key */\n          <Box\n            // Ensure the first column to the right of the Toggle filter button has no border\n            sx={{\n              '> div:nth-child(2)': {\n                borderLeft: 'none'\n              }\n            }}\n            {...headerGroup.getHeaderGroupProps({\n              style: {width: '100%'}\n            })}\n          >\n            {headerGroup.headers.map(header =>\n              header.columnModel ? (\n                <TableHeaderCell\n                  key={header.id}\n                  header={header}\n                  headers={headerGroup.headers}\n                  sortByColumn={sortByColumn}\n                  groupByColumn={groupByColumn}\n                  height={props.height}\n                />\n              ) : (\n                <DummyHeaderCell header={header} height={props.height} key={header.id} />\n              )\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/table-search-button.tsx",
      "name": "IconButton",
      "line_start": 76,
      "line_end": 76,
      "text": " styled(IconButton)`\n  z-index: 2;\n  margin: 0;\n  padding: 0;\n\n  &:hover {\n    color: ${themeGet('colors.accent.fg')};\n  }\n\n  &:focus {\n    border: 0;\n    outline: 0;\n    box-shadow: ${themeGet('shadows.btn.focusShadow')};\n  }\n\n  .is-focused & {\n    color: ${themeGet('colors.accent.fg')};\n  }\n  ${sx}\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/react_table/use-row-drag-drop.tsx",
      "name": "Link",
      "props": [
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{link}"
        }
      ],
      "line_start": 48,
      "line_end": 50,
      "text": "<Link target=\"_blank\" href={link}>\n          issue page\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"table\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', flex: 1, display: 'flex'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`column-settings-${column.name}`)}"
        }
      ],
      "line_start": 95,
      "line_end": 169,
      "text": "\n    <Box\n      role=\"table\"\n      sx={{flexDirection: 'column', flex: 1, display: 'flex'}}\n      {...testIdProps(`column-settings-${column.name}`)}\n    >\n      <Heading\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        {column.name} field settings\n        {column.userDefined ? (\n          <DeleteField\n            column={column}\n            numberOfColumns={userEditableColumns.length}\n            onDeleteColumn={() => {\n              const index = userEditableColumns.findIndex(col => col.id === column.id)\n\n              navigate(\n                PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                  projectNumber,\n                  fieldId: userEditableColumns[Math.max(0, index - 1)].id\n                }),\n                {replace: true}\n              )\n            }}\n          />\n        ) : null}\n      </Heading>\n      <Box sx={{pb: 2, mb: 2}}>\n        <FieldTitle>Field name</FieldTitle>\n        {column.userDefined ? (\n          <>\n            <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n              <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n                <TextInput\n                  block\n                  key={column.id}\n                  value={localValue}\n                  ref={inputRef}\n                  {...inputProps}\n                  sx={{...additionalStyle}}\n                  {...testIdProps('change-column-name-input')}\n                />\n              </EmojiPicker>\n              {isSuccess && <SuccessState />}\n              {isError && <ErrorState caret=\"top-left\" message={getErrorMessage()} />}\n            </Box>\n          </>\n        ) : (\n          <>\n            <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', mb: 2, display: 'flex'}}>\n              <TextInput disabled sx={{flex: `0 1 ${WIDTH}px`, ...additionalStyle}} value={column.name} />\n            </Box>\n            <Text sx={{fontSize: 0, color: 'fg.muted'}}>\n              {column.name} fields are created by GitHub and cannot be renamed.\n            </Text>\n          </>\n        )}\n      </Box>\n      <Box>\n        <FieldTitle>Field type</FieldTitle>\n        <Button leadingIcon={Icon} disabled>\n          {getColumnText(column.dataType)}\n        </Button>\n      </Box>\n      <ConfigurationOptions column={column} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}"
        }
      ],
      "line_start": 100,
      "line_end": 130,
      "text": "<Heading\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2,\n          display: 'flex',\n          justifyContent: 'space-between'\n        }}\n      >\n        {column.name} field settings\n        {column.userDefined ? (\n          <DeleteField\n            column={column}\n            numberOfColumns={userEditableColumns.length}\n            onDeleteColumn={() => {\n              const index = userEditableColumns.findIndex(col => col.id === column.id)\n\n              navigate(\n                PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                  projectNumber,\n                  fieldId: userEditableColumns[Math.max(0, index - 1)].id\n                }),\n                {replace: true}\n              )\n            }}\n          />\n        ) : null}\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pb: 2, mb: 2}}"
        }
      ],
      "line_start": 131,
      "line_end": 161,
      "text": "<Box sx={{pb: 2, mb: 2}}>\n        <FieldTitle>Field name</FieldTitle>\n        {column.userDefined ? (\n          <>\n            <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n              <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n                <TextInput\n                  block\n                  key={column.id}\n                  value={localValue}\n                  ref={inputRef}\n                  {...inputProps}\n                  sx={{...additionalStyle}}\n                  {...testIdProps('change-column-name-input')}\n                />\n              </EmojiPicker>\n              {isSuccess && <SuccessState />}\n              {isError && <ErrorState caret=\"top-left\" message={getErrorMessage()} />}\n            </Box>\n          </>\n        ) : (\n          <>\n            <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', mb: 2, display: 'flex'}}>\n              <TextInput disabled sx={{flex: `0 1 ${WIDTH}px`, ...additionalStyle}} value={column.name} />\n            </Box>\n            <Text sx={{fontSize: 0, color: 'fg.muted'}}>\n              {column.name} fields are created by GitHub and cannot be renamed.\n            </Text>\n          </>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}"
        }
      ],
      "line_start": 135,
      "line_end": 149,
      "text": "<Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n              <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n                <TextInput\n                  block\n                  key={column.id}\n                  value={localValue}\n                  ref={inputRef}\n                  {...inputProps}\n                  sx={{...additionalStyle}}\n                  {...testIdProps('change-column-name-input')}\n                />\n              </EmojiPicker>\n              {isSuccess && <SuccessState />}\n              {isError && <ErrorState caret=\"top-left\" message={getErrorMessage()} />}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', mb: 2, display: 'flex'}}"
        }
      ],
      "line_start": 153,
      "line_end": 155,
      "text": "<Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', mb: 2, display: 'flex'}}>\n              <TextInput disabled sx={{flex: `0 1 ${WIDTH}px`, ...additionalStyle}} value={column.name} />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, color: 'fg.muted'}}"
        }
      ],
      "line_start": 156,
      "line_end": 158,
      "text": "<Text sx={{fontSize: 0, color: 'fg.muted'}}>\n              {column.name} fields are created by GitHub and cannot be renamed.\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Box",
      "props": [],
      "line_start": 162,
      "line_end": 167,
      "text": "<Box>\n        <FieldTitle>Field type</FieldTitle>\n        <Button leadingIcon={Icon} disabled>\n          {getColumnText(column.dataType)}\n        </Button>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{Icon}"
        },
        {
          "name": "disabled"
        }
      ],
      "line_start": 164,
      "line_end": 166,
      "text": "<Button leadingIcon={Icon} disabled>\n          {getColumnText(column.dataType)}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 186,
      "line_end": 202,
      "text": "<ActionMenu>\n        <ActionMenu.Anchor>\n          <IconButton icon={KebabHorizontalIcon} aria-label=\"Field options\" />\n        </ActionMenu.Anchor>\n        <ActionMenu.Overlay align=\"end\">\n          <ActionList>\n            <ActionList.Item\n              variant=\"danger\"\n              onSelect={() => {\n                setIsDialogOpen(true)\n              }}\n            >\n              Delete field\n            </ActionList.Item>\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 187,
      "line_end": 189,
      "text": "<ActionMenu.Anchor>\n          <IconButton icon={KebabHorizontalIcon} aria-label=\"Field options\" />\n        </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"end\""
        }
      ],
      "line_start": 190,
      "line_end": 201,
      "text": "<ActionMenu.Overlay align=\"end\">\n          <ActionList>\n            <ActionList.Item\n              variant=\"danger\"\n              onSelect={() => {\n                setIsDialogOpen(true)\n              }}\n            >\n              Delete field\n            </ActionList.Item>\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 191,
      "line_end": 200,
      "text": "<ActionList>\n            <ActionList.Item\n              variant=\"danger\"\n              onSelect={() => {\n                setIsDialogOpen(true)\n              }}\n            >\n              Delete field\n            </ActionList.Item>\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => {\n                setIsDialogOpen(true)\n              }}"
        }
      ],
      "line_start": 192,
      "line_end": 199,
      "text": "<ActionList.Item\n              variant=\"danger\"\n              onSelect={() => {\n                setIsDialogOpen(true)\n              }}\n            >\n              Delete field\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 244,
      "line_end": 244,
      "text": "<Text as=\"h2\">This field no longer exists</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/column-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 245,
      "line_end": 247,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n        Select another field to view settings.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Flash",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"warning\""
        },
        {
          "name": "full"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 2}}"
        }
      ],
      "line_start": 13,
      "line_end": 15,
      "text": "<Flash variant=\"warning\" full sx={{mb: 2}}>\n        {SettingsResources.deleteProjectWarning}\n      </Flash>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold'}}"
        }
      ],
      "line_start": 21,
      "line_end": 21,
      "text": " <Text sx={{fontWeight: 'bold'}}>{children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Dialog",
      "props": [
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{SettingsResources.deleteProjectTitle}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"large\""
        },
        {
          "name": "renderBody",
          "kind": "JsxExpression",
          "text": "{SingleConfirmBody}"
        },
        {
          "name": "renderHeader",
          "kind": "JsxExpression",
          "text": "{CloseHeaderWithAlert}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{onClose}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"alertdialog\""
        }
      ],
      "line_start": 40,
      "line_end": 89,
      "text": "\n    <Dialog\n      title={SettingsResources.deleteProjectTitle}\n      width=\"large\"\n      renderBody={SingleConfirmBody}\n      renderHeader={CloseHeaderWithAlert}\n      onClose={onClose}\n      role=\"alertdialog\"\n    >\n      <Text as=\"p\">\n        This action <BoldText>cannot</BoldText> be undone. This will permanently delete the{' '}\n        <BoldText>{projectName}</BoldText> project, saved views, custom fields and associated values, and Insights data.\n      </Text>\n      {draftIssueCount ? (\n        <Text as=\"p\">\n          This will also delete{' '}\n          <BoldText>\n            {draftIssueCount} draft issue{draftIssueCount > 1 ? 's' : ''}\n          </BoldText>{' '}\n          that {draftIssueCount > 1 ? 'were' : 'was'} created in this project.\n        </Text>\n      ) : null}\n      <Text as=\"p\">This will not delete issues or pull requests themselves.</Text>\n      <Text as=\"p\">\n        Please type <BoldText>{projectName}</BoldText> to confirm.\n      </Text>\n\n      <form onSubmit={onConfirm} {...testIdProps('confirm-delete-form')}>\n        <TextInput\n          aria-label={SettingsResources.deleteProjectInputLabel}\n          ref={inputRef}\n          block\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\n          value={inputValue}\n          sx={{mb: 3}}\n          {...testIdProps('confirm-delete-input')}\n        />\n\n        <Dialog.Buttons\n          buttons={[\n            {\n              content: SettingsResources.deleteProjectConfirmation,\n              buttonType: 'danger',\n              disabled: inputValue !== projectName,\n              type: 'submit',\n              sx: {width: '100%'}\n            }\n          ]}\n        />\n      </form>\n    </Dialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        }
      ],
      "line_start": 48,
      "line_end": 51,
      "text": "<Text as=\"p\">\n        This action <BoldText>cannot</BoldText> be undone. This will permanently delete the{' '}\n        <BoldText>{projectName}</BoldText> project, saved views, custom fields and associated values, and Insights data.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        }
      ],
      "line_start": 53,
      "line_end": 59,
      "text": "\n        <Text as=\"p\">\n          This will also delete{' '}\n          <BoldText>\n            {draftIssueCount} draft issue{draftIssueCount > 1 ? 's' : ''}\n          </BoldText>{' '}\n          that {draftIssueCount > 1 ? 'were' : 'was'} created in this project.\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        }
      ],
      "line_start": 61,
      "line_end": 61,
      "text": "<Text as=\"p\">This will not delete issues or pull requests themselves.</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/delete-project-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        }
      ],
      "line_start": 62,
      "line_end": 64,
      "text": "<Text as=\"p\">\n        Please type <BoldText>{projectName}</BoldText> to confirm.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', flexGrow: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('general-settings')}"
        }
      ],
      "line_start": 134,
      "line_end": 311,
      "text": "\n    <Box sx={{display: 'flex', flexDirection: 'column', flexGrow: 1}} {...testIdProps('general-settings')}>\n      <Heading\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2\n        }}\n      >\n        Project settings\n      </Heading>\n      <Box sx={{mb: 5}}>\n        <FieldTitle id=\"settings-project-name-label\">Project name</FieldTitle>\n        <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n          <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n            <TextInput\n              aria-labelledby=\"settings-project-name-label\"\n              value={projectName}\n              {...inputProps}\n              sx={{...additionalStyle, '& > input': {padding: '6px 8px'}}}\n              {...testIdProps('change-project-name-input')}\n            />\n          </EmojiPicker>\n          {isSuccess && <SuccessState />}\n          {isError && (\n            <ErrorState\n              testId=\"project-name-error-message\"\n              caret=\"top-left\"\n              message={getProjectNameErrorMessage({projectName})}\n            />\n          )}\n        </Box>\n      </Box>\n\n      {memex_project_description && (\n        <>\n          <Box sx={{display: 'flex', flexDirection: 'column', mb: 5, mt: 0}} {...testIdProps('description-edit')}>\n            <FieldTitle id=\"settings-project-description-label\">\n              {DescriptionEditorResources.shortDescriptionTitle}\n            </FieldTitle>\n            <ShortDescriptionEditor onSaveStats={onSaveStatsShortDescription} editModeOff />\n          </Box>\n          <Box sx={{mb: 5, mt: 0}} {...testIdProps('readme-edit')}>\n            <FieldTitle>{DescriptionEditorResources.readmeTitle}</FieldTitle>\n            <DescriptionEditor onSaveStats={onSaveStatsDescription} editModeOff />\n          </Box>\n        </>\n      )}\n\n      <Heading as=\"h2\" sx={{fontSize: 4, mb: 2, fontWeight: 'normal'}}>\n        Danger zone\n      </Heading>\n      <Box sx={{borderColor: 'danger.emphasis', borderWidth: '1px', borderStyle: 'solid', borderRadius: 2, mb: 4}}>\n        <Box sx={{justifyItems: 'center', display: 'flex', flexDirection: 'column'}}>\n          {hasAdminPermissions && (\n            <ProjectSettingsCard showDivider>\n              <Box sx={{flex: 'auto'}}>\n                <Heading as=\"h4\" id=\"visibilityHeading\" sx={{fontSize: 1, mb: 1}}>\n                  Visibility\n                </Heading>\n                <Text sx={{fontSize: 1}} {...testIdProps('project-visibility-text')}>\n                  The project is currently set to {isPublicProject ? 'Public' : 'Private'}.\n                </Text>\n              </Box>\n              <ProjectSettingsCardBody>\n                <Box sx={{display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'flex-end'}}>\n                  <Box sx={{pt: 2}}>\n                    <div aria-live=\"polite\" {...testIdProps('project-visibility-update-status')}>\n                      {visibilityState === 'success' && (\n                        <>\n                          <SuccessState />\n                          <Text sx={{ml: 1}}>Changes saved</Text>\n                        </>\n                      )}\n                      {visibilityState === 'error' && <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>}\n                    </div>\n                  </Box>\n                  <ActionMenu>\n                    <ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>\n                    <ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>\n                  </ActionMenu>\n                </Box>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n\n          <ProjectSettingsCard showDivider={canDeleteProjects}>\n            {isClosed ? (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Re-open project\"\n                  description=\"Re-opening a project will add it to the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button {...testIdProps('reopen-project-button')} onClick={() => onMemexClose(false)}>\n                    Re-open this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            ) : (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Close project\"\n                  description=\"Closing a project will remove it from the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button variant=\"danger\" {...testIdProps('close-project-button')} onClick={() => onMemexClose(true)}>\n                    Close this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            )}\n          </ProjectSettingsCard>\n          {canDeleteProjects && (\n            <ProjectSettingsCard>\n              <ProjectSettingsCardHeader\n                title=\"Delete project\"\n                description=\"Once you delete a project, there is no going back. Please be certain.\"\n              />\n              <ProjectSettingsCardBody>\n                <Button\n                  variant=\"danger\"\n                  {...testIdProps('delete-project-button')}\n                  onClick={() => setIsDeleteProjectDialogOpen(true)}\n                >\n                  Delete this project\n                </Button>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n        </Box>\n      </Box>\n      {isDeleteProjectDialogOpen && (\n        <DeleteProjectDialog\n          onClose={() => setIsDeleteProjectDialogOpen(false)}\n          projectName={projectName}\n          onConfirm={handleDeleteMemex}\n          draftIssueCount={draftIssueCount}\n        />\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2\n        }}"
        }
      ],
      "line_start": 135,
      "line_end": 146,
      "text": "<Heading\n        as=\"h2\"\n        sx={{\n          borderBottom: (theme: FixMeTheme) => `1px solid ${theme.colors.border.muted}`,\n          fontSize: 4,\n          fontWeight: 'normal',\n          pb: 2,\n          mb: 2\n        }}\n      >\n        Project settings\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 5}}"
        }
      ],
      "line_start": 147,
      "line_end": 168,
      "text": "<Box sx={{mb: 5}}>\n        <FieldTitle id=\"settings-project-name-label\">Project name</FieldTitle>\n        <Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n          <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n            <TextInput\n              aria-labelledby=\"settings-project-name-label\"\n              value={projectName}\n              {...inputProps}\n              sx={{...additionalStyle, '& > input': {padding: '6px 8px'}}}\n              {...testIdProps('change-project-name-input')}\n            />\n          </EmojiPicker>\n          {isSuccess && <SuccessState />}\n          {isError && (\n            <ErrorState\n              testId=\"project-name-error-message\"\n              caret=\"top-left\"\n              message={getProjectNameErrorMessage({projectName})}\n            />\n          )}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}"
        }
      ],
      "line_start": 149,
      "line_end": 167,
      "text": "<Box sx={{flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap', display: 'flex'}}>\n          <EmojiPicker sx={{display: 'block', width: WIDTH, flex: `0 1 ${WIDTH}px`}}>\n            <TextInput\n              aria-labelledby=\"settings-project-name-label\"\n              value={projectName}\n              {...inputProps}\n              sx={{...additionalStyle, '& > input': {padding: '6px 8px'}}}\n              {...testIdProps('change-project-name-input')}\n            />\n          </EmojiPicker>\n          {isSuccess && <SuccessState />}\n          {isError && (\n            <ErrorState\n              testId=\"project-name-error-message\"\n              caret=\"top-left\"\n              message={getProjectNameErrorMessage({projectName})}\n            />\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', mb: 5, mt: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('description-edit')}"
        }
      ],
      "line_start": 172,
      "line_end": 177,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column', mb: 5, mt: 0}} {...testIdProps('description-edit')}>\n            <FieldTitle id=\"settings-project-description-label\">\n              {DescriptionEditorResources.shortDescriptionTitle}\n            </FieldTitle>\n            <ShortDescriptionEditor onSaveStats={onSaveStatsShortDescription} editModeOff />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 5, mt: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('readme-edit')}"
        }
      ],
      "line_start": 178,
      "line_end": 181,
      "text": "<Box sx={{mb: 5, mt: 0}} {...testIdProps('readme-edit')}>\n            <FieldTitle>{DescriptionEditorResources.readmeTitle}</FieldTitle>\n            <DescriptionEditor onSaveStats={onSaveStatsDescription} editModeOff />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 4, mb: 2, fontWeight: 'normal'}}"
        }
      ],
      "line_start": 185,
      "line_end": 187,
      "text": "<Heading as=\"h2\" sx={{fontSize: 4, mb: 2, fontWeight: 'normal'}}>\n        Danger zone\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{borderColor: 'danger.emphasis', borderWidth: '1px', borderStyle: 'solid', borderRadius: 2, mb: 4}}"
        }
      ],
      "line_start": 188,
      "line_end": 302,
      "text": "<Box sx={{borderColor: 'danger.emphasis', borderWidth: '1px', borderStyle: 'solid', borderRadius: 2, mb: 4}}>\n        <Box sx={{justifyItems: 'center', display: 'flex', flexDirection: 'column'}}>\n          {hasAdminPermissions && (\n            <ProjectSettingsCard showDivider>\n              <Box sx={{flex: 'auto'}}>\n                <Heading as=\"h4\" id=\"visibilityHeading\" sx={{fontSize: 1, mb: 1}}>\n                  Visibility\n                </Heading>\n                <Text sx={{fontSize: 1}} {...testIdProps('project-visibility-text')}>\n                  The project is currently set to {isPublicProject ? 'Public' : 'Private'}.\n                </Text>\n              </Box>\n              <ProjectSettingsCardBody>\n                <Box sx={{display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'flex-end'}}>\n                  <Box sx={{pt: 2}}>\n                    <div aria-live=\"polite\" {...testIdProps('project-visibility-update-status')}>\n                      {visibilityState === 'success' && (\n                        <>\n                          <SuccessState />\n                          <Text sx={{ml: 1}}>Changes saved</Text>\n                        </>\n                      )}\n                      {visibilityState === 'error' && <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>}\n                    </div>\n                  </Box>\n                  <ActionMenu>\n                    <ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>\n                    <ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>\n                  </ActionMenu>\n                </Box>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n\n          <ProjectSettingsCard showDivider={canDeleteProjects}>\n            {isClosed ? (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Re-open project\"\n                  description=\"Re-opening a project will add it to the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button {...testIdProps('reopen-project-button')} onClick={() => onMemexClose(false)}>\n                    Re-open this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            ) : (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Close project\"\n                  description=\"Closing a project will remove it from the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button variant=\"danger\" {...testIdProps('close-project-button')} onClick={() => onMemexClose(true)}>\n                    Close this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            )}\n          </ProjectSettingsCard>\n          {canDeleteProjects && (\n            <ProjectSettingsCard>\n              <ProjectSettingsCardHeader\n                title=\"Delete project\"\n                description=\"Once you delete a project, there is no going back. Please be certain.\"\n              />\n              <ProjectSettingsCardBody>\n                <Button\n                  variant=\"danger\"\n                  {...testIdProps('delete-project-button')}\n                  onClick={() => setIsDeleteProjectDialogOpen(true)}\n                >\n                  Delete this project\n                </Button>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyItems: 'center', display: 'flex', flexDirection: 'column'}}"
        }
      ],
      "line_start": 189,
      "line_end": 301,
      "text": "<Box sx={{justifyItems: 'center', display: 'flex', flexDirection: 'column'}}>\n          {hasAdminPermissions && (\n            <ProjectSettingsCard showDivider>\n              <Box sx={{flex: 'auto'}}>\n                <Heading as=\"h4\" id=\"visibilityHeading\" sx={{fontSize: 1, mb: 1}}>\n                  Visibility\n                </Heading>\n                <Text sx={{fontSize: 1}} {...testIdProps('project-visibility-text')}>\n                  The project is currently set to {isPublicProject ? 'Public' : 'Private'}.\n                </Text>\n              </Box>\n              <ProjectSettingsCardBody>\n                <Box sx={{display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'flex-end'}}>\n                  <Box sx={{pt: 2}}>\n                    <div aria-live=\"polite\" {...testIdProps('project-visibility-update-status')}>\n                      {visibilityState === 'success' && (\n                        <>\n                          <SuccessState />\n                          <Text sx={{ml: 1}}>Changes saved</Text>\n                        </>\n                      )}\n                      {visibilityState === 'error' && <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>}\n                    </div>\n                  </Box>\n                  <ActionMenu>\n                    <ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>\n                    <ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>\n                  </ActionMenu>\n                </Box>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n\n          <ProjectSettingsCard showDivider={canDeleteProjects}>\n            {isClosed ? (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Re-open project\"\n                  description=\"Re-opening a project will add it to the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button {...testIdProps('reopen-project-button')} onClick={() => onMemexClose(false)}>\n                    Re-open this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            ) : (\n              <>\n                <ProjectSettingsCardHeader\n                  title=\"Close project\"\n                  description=\"Closing a project will remove it from the list of open projects.\"\n                />\n                <ProjectSettingsCardBody>\n                  <Button variant=\"danger\" {...testIdProps('close-project-button')} onClick={() => onMemexClose(true)}>\n                    Close this project\n                  </Button>\n                </ProjectSettingsCardBody>\n              </>\n            )}\n          </ProjectSettingsCard>\n          {canDeleteProjects && (\n            <ProjectSettingsCard>\n              <ProjectSettingsCardHeader\n                title=\"Delete project\"\n                description=\"Once you delete a project, there is no going back. Please be certain.\"\n              />\n              <ProjectSettingsCardBody>\n                <Button\n                  variant=\"danger\"\n                  {...testIdProps('delete-project-button')}\n                  onClick={() => setIsDeleteProjectDialogOpen(true)}\n                >\n                  Delete this project\n                </Button>\n              </ProjectSettingsCardBody>\n            </ProjectSettingsCard>\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 'auto'}}"
        }
      ],
      "line_start": 192,
      "line_end": 199,
      "text": "<Box sx={{flex: 'auto'}}>\n                <Heading as=\"h4\" id=\"visibilityHeading\" sx={{fontSize: 1, mb: 1}}>\n                  Visibility\n                </Heading>\n                <Text sx={{fontSize: 1}} {...testIdProps('project-visibility-text')}>\n                  The project is currently set to {isPublicProject ? 'Public' : 'Private'}.\n                </Text>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"visibilityHeading\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, mb: 1}}"
        }
      ],
      "line_start": 193,
      "line_end": 195,
      "text": "<Heading as=\"h4\" id=\"visibilityHeading\" sx={{fontSize: 1, mb: 1}}>\n                  Visibility\n                </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('project-visibility-text')}"
        }
      ],
      "line_start": 196,
      "line_end": 198,
      "text": "<Text sx={{fontSize: 1}} {...testIdProps('project-visibility-text')}>\n                  The project is currently set to {isPublicProject ? 'Public' : 'Private'}.\n                </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'flex-end'}}"
        }
      ],
      "line_start": 201,
      "line_end": 252,
      "text": "<Box sx={{display: 'flex', flexWrap: 'wrap-reverse', justifyContent: 'flex-end'}}>\n                  <Box sx={{pt: 2}}>\n                    <div aria-live=\"polite\" {...testIdProps('project-visibility-update-status')}>\n                      {visibilityState === 'success' && (\n                        <>\n                          <SuccessState />\n                          <Text sx={{ml: 1}}>Changes saved</Text>\n                        </>\n                      )}\n                      {visibilityState === 'error' && <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>}\n                    </div>\n                  </Box>\n                  <ActionMenu>\n                    <ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>\n                    <ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>\n                  </ActionMenu>\n                </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 2}}"
        }
      ],
      "line_start": 202,
      "line_end": 212,
      "text": "<Box sx={{pt: 2}}>\n                    <div aria-live=\"polite\" {...testIdProps('project-visibility-update-status')}>\n                      {visibilityState === 'success' && (\n                        <>\n                          <SuccessState />\n                          <Text sx={{ml: 1}}>Changes saved</Text>\n                        </>\n                      )}\n                      {visibilityState === 'error' && <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>}\n                    </div>\n                  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 207,
      "line_end": 207,
      "text": "<Text sx={{ml: 1}}>Changes saved</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'danger.fg'}}"
        }
      ],
      "line_start": 210,
      "line_end": 210,
      "text": " <Text sx={{color: 'danger.fg'}}>Something went wrong</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 213,
      "line_end": 251,
      "text": "<ActionMenu>\n                    <ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>\n                    <ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>\n                  </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                      {...testIdProps('project-visibility-button')}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"summary\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', ml: '16px', px: 3}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{resetNetworkCall}"
        },
        {
          "name": "aria-describedby",
          "kind": "StringLiteral",
          "text": "\"visibilityHeading\""
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{isPublicProject ? GlobeIcon : LockIcon}"
        }
      ],
      "line_start": 214,
      "line_end": 223,
      "text": "<ActionMenu.Button\n                      {...testIdProps('project-visibility-button')}\n                      as=\"summary\"\n                      sx={{position: 'relative', ml: '16px', px: 3}}\n                      onClick={resetNetworkCall}\n                      aria-describedby=\"visibilityHeading\"\n                      leadingIcon={isPublicProject ? GlobeIcon : LockIcon}\n                    >\n                      {isPublicProject ? 'Public' : 'Private'}\n                    </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "anchorSide",
          "kind": "StringLiteral",
          "text": "\"inside-right\""
        }
      ],
      "line_start": 224,
      "line_end": 250,
      "text": "<ActionMenu.Overlay anchorSide=\"inside-right\">\n                      <ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>\n                    </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 225,
      "line_end": 249,
      "text": "<ActionList selectionVariant=\"single\">\n                        <ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                        <ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>\n                      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"private\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => onMemexPublic(false)}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{!isPublicProject}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'flex-start'}}"
        }
      ],
      "line_start": 226,
      "line_end": 236,
      "text": "<ActionList.Item\n                          key=\"private\"\n                          onSelect={() => onMemexPublic(false)}\n                          selected={!isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Private\n                          <ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>\n                        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 233,
      "line_end": 235,
      "text": "<ActionList.Description variant=\"block\">\n                            You choose who can read, write, and admin this project.\n                          </ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"public\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => onMemexPublic(true)}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{isPublicProject}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'flex-start'}}"
        }
      ],
      "line_start": 237,
      "line_end": 248,
      "text": "<ActionList.Item\n                          key=\"public\"\n                          onSelect={() => onMemexPublic(true)}\n                          selected={isPublicProject}\n                          sx={{alignItems: 'flex-start'}}\n                        >\n                          Public\n                          <ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>\n                        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 244,
      "line_end": 247,
      "text": "<ActionList.Description variant=\"block\">\n                            Everyone on the internet has read access to this project. You choose who has write and admin\n                            access.\n                          </ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('reopen-project-button')}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onMemexClose(false)}"
        }
      ],
      "line_start": 265,
      "line_end": 267,
      "text": "<Button {...testIdProps('reopen-project-button')} onClick={() => onMemexClose(false)}>\n                    Re-open this project\n                  </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('close-project-button')}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onMemexClose(true)}"
        }
      ],
      "line_start": 277,
      "line_end": 279,
      "text": "<Button variant=\"danger\" {...testIdProps('close-project-button')} onClick={() => onMemexClose(true)}>\n                    Close this project\n                  </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                  {...testIdProps('delete-project-button')}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => setIsDeleteProjectDialogOpen(true)}"
        }
      ],
      "line_start": 291,
      "line_end": 297,
      "text": "<Button\n                  variant=\"danger\"\n                  {...testIdProps('delete-project-button')}\n                  onClick={() => setIsDeleteProjectDialogOpen(true)}\n                >\n                  Delete this project\n                </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/general-settings-view.tsx",
      "name": "Heading",
      "line_start": 315,
      "line_end": 315,
      "text": " styled(Heading)`\n  font-size: 14px;\n  margin-bottom: 6px;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          width: '100%',\n          borderRadius: '6px',\n          border: (theme: FixMeTheme) => `1px solid ${theme.colors.border.default}`,\n          overflow: 'hidden',\n          position: 'relative',\n          mt: 4\n        }}"
        }
      ],
      "line_start": 289,
      "line_end": 314,
      "text": "<Box\n        sx={{\n          width: '100%',\n          borderRadius: '6px',\n          border: (theme: FixMeTheme) => `1px solid ${theme.colors.border.default}`,\n          overflow: 'hidden',\n          position: 'relative',\n          mt: 4\n        }}\n      >\n        <IterationsHeader\n          configuration={localConfiguration}\n          selectedTab={selectedTab}\n          setSelectedTab={setSelectedTab}\n          addButtonProps={{minimumStartDate, defaultDuration, onCreate: handleCreateIteration}}\n          disabled={hasUnsavedChanges}\n        />\n\n        {rows.length > 0 ? rows : <NoIterationsPlaceholder isActiveTab={isActiveTab} />}\n\n        {selectedTab === 'completed' && countPushedActiveIterations > 0 && (\n          <Flash sx={{border: 'none', borderRadius: 0}} {...testIdProps('active-changes-notice')}>\n            {SettingsResources.willPushActiveIterations(countPushedActiveIterations)}\n          </Flash>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Flash",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{border: 'none', borderRadius: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('active-changes-notice')}"
        }
      ],
      "line_start": 310,
      "line_end": 312,
      "text": "\n          <Flash sx={{border: 'none', borderRadius: 0}} {...testIdProps('active-changes-notice')}>\n            {SettingsResources.willPushActiveIterations(countPushedActiveIterations)}\n          </Flash>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          gap: 2,\n          my: 3,\n          display: 'flex',\n          alignItems: 'center'\n        }}"
        }
      ],
      "line_start": 318,
      "line_end": 350,
      "text": "<Box\n        sx={{\n          gap: 2,\n          my: 3,\n          display: 'flex',\n          alignItems: 'center'\n        }}\n      >\n        <Button\n          variant=\"primary\"\n          disabled={!hasUnsavedChanges || requestStatus === 'loading'}\n          onClick={() => saveChanges()}\n          {...testIdProps('iteration-field-settings-save')}\n        >\n          {Resources.saveChanges}\n        </Button>\n        <Button\n          disabled={!hasUnsavedChanges || requestStatus === 'loading'}\n          onClick={() => setLocalConfiguration(serverConfiguration)}\n          {...testIdProps('iteration-field-settings-reset')}\n        >\n          {Resources.reset}\n        </Button>\n\n        <Box sx={{pl: 1}}>\n          <RequestStateIcon status={requestStatus} />\n          {requestStatus === 'succeeded' ? (\n            <ColumnSettingsSavedMessage />\n          ) : requestStatus === 'failed' ? (\n            <Text sx={{ml: 2}}>{Resources.genericErrorMessage}</Text>\n          ) : null}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!hasUnsavedChanges || requestStatus === 'loading'}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => saveChanges()}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('iteration-field-settings-save')}"
        }
      ],
      "line_start": 326,
      "line_end": 333,
      "text": "<Button\n          variant=\"primary\"\n          disabled={!hasUnsavedChanges || requestStatus === 'loading'}\n          onClick={() => saveChanges()}\n          {...testIdProps('iteration-field-settings-save')}\n        >\n          {Resources.saveChanges}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Button",
      "props": [
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!hasUnsavedChanges || requestStatus === 'loading'}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => setLocalConfiguration(serverConfiguration)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('iteration-field-settings-reset')}"
        }
      ],
      "line_start": 334,
      "line_end": 340,
      "text": "<Button\n          disabled={!hasUnsavedChanges || requestStatus === 'loading'}\n          onClick={() => setLocalConfiguration(serverConfiguration)}\n          {...testIdProps('iteration-field-settings-reset')}\n        >\n          {Resources.reset}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 1}}"
        }
      ],
      "line_start": 342,
      "line_end": 349,
      "text": "<Box sx={{pl: 1}}>\n          <RequestStateIcon status={requestStatus} />\n          {requestStatus === 'succeeded' ? (\n            <ColumnSettingsSavedMessage />\n          ) : requestStatus === 'failed' ? (\n            <Text sx={{ml: 2}}>{Resources.genericErrorMessage}</Text>\n          ) : null}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration-field-options.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 347,
      "line_end": 347,
      "text": "\n            <Text sx={{ml: 2}}>{Resources.genericErrorMessage}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/no-iterations-placeholder.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: '100%', p: 6, display: 'flex', flexDirection: 'column', alignItems: 'center'}}"
        }
      ],
      "line_start": 7,
      "line_end": 14,
      "text": "\n    <Box sx={{width: '100%', p: 6, display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n      <Text as=\"h3\" sx={{color: 'fg.default'}}>\n        {isActiveTab ? SettingsResources.noIterationsTitle : SettingsResources.noCompletedIterationsTitle}\n      </Text>\n      <Text sx={{color: 'fg.muted'}}>\n        {isActiveTab ? SettingsResources.noIterationsDescription : SettingsResources.noCompletedIterationsDescription}\n      </Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/no-iterations-placeholder.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h3\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 8,
      "line_end": 10,
      "text": "<Text as=\"h3\" sx={{color: 'fg.default'}}>\n        {isActiveTab ? SettingsResources.noIterationsTitle : SettingsResources.noCompletedIterationsTitle}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/no-iterations-placeholder.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 11,
      "line_end": 13,
      "text": "<Text sx={{color: 'fg.muted'}}>\n        {isActiveTab ? SettingsResources.noIterationsDescription : SettingsResources.noCompletedIterationsDescription}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        justifyItems: 'center',\n        p: 3,\n        display: 'flex',\n        borderBottom: (theme: FixMeTheme) => (showDivider ? `1px solid ${theme.colors.border.muted}` : 'unset')\n      }}"
        }
      ],
      "line_start": 11,
      "line_end": 20,
      "text": "\n    <Box\n      sx={{\n        justifyItems: 'center',\n        p: 3,\n        display: 'flex',\n        borderBottom: (theme: FixMeTheme) => (showDivider ? `1px solid ${theme.colors.border.muted}` : 'unset')\n      }}\n    >\n      {children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 'auto'}}"
        }
      ],
      "line_start": 31,
      "line_end": 36,
      "text": "\n    <Box sx={{flex: 'auto'}}>\n      <Heading as=\"h4\" sx={{mb: 1, fontSize: 1}}>\n        {title}\n      </Heading>\n      <Text sx={{fontSize: 1}}>{description}</Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 1, fontSize: 1}}"
        }
      ],
      "line_start": 32,
      "line_end": 34,
      "text": "<Heading as=\"h4\" sx={{mb: 1, fontSize: 1}}>\n        {title}\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1}}"
        }
      ],
      "line_start": 35,
      "line_end": 35,
      "text": "<Text sx={{fontSize: 1}}>{description}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/project-settings-card.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 41,
      "line_end": 41,
      "text": " <Box sx={{display: 'flex', alignItems: 'center'}}>{children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 1, pb: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('settings-side-nav')}"
        }
      ],
      "line_start": 33,
      "line_end": 120,
      "text": "<ActionList sx={{pt: 1, pb: 0}} {...testIdProps('settings-side-nav')}>\n        <NavLinkActionListItem\n          end\n          to={PROJECT_SETTINGS_ROUTE.generatePath({projectNumber})}\n          {...testIdProps('general-settings-item')}\n          onClick={(e: React.MouseEvent) => {\n            postStats({\n              name: SettingsOpen,\n              ui: SettingsOpenSidebarUI,\n              context: `${e.type}: ${e.currentTarget.tagName}`\n            })\n          }}\n        >\n          <ActionList.LeadingVisual>\n            <GearIcon />\n          </ActionList.LeadingVisual>\n          Project settings\n        </NavLinkActionListItem>\n        {hasAdminPermissions && (\n          <NavLinkActionListItem\n            to={PROJECT_SETTINGS_ACCESS_ROUTE.generatePath({projectNumber})}\n            {...testIdProps('manage-access-item')}\n          >\n            Manage access\n          </NavLinkActionListItem>\n        )}\n        <ActionList.Divider />\n        <ActionList.Group\n          aria-label=\"Custom fields\"\n          sx={{mr: 0}}\n          title={\n            (\n              <Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                Custom fields\n                <Button\n                  ref={anchorRef}\n                  variant=\"invisible\"\n                  size=\"small\"\n                  aria-label=\"Add new field\"\n                  sx={{color: 'accent.fg', mr: -3}}\n                  leadingIcon={PlusIcon}\n                  onClick={() => setShow(s => !s)}\n                >\n                  New field\n                </Button>\n              </Box>\n            ) as any // until primer has better support to allow this in types\n          }\n        >\n          {useMemo(\n            () =>\n              allColumns\n                .filter(column => {\n                  return isColumnUserEditable(column)\n                })\n                .map(col => {\n                  const Icon = getColumnIcon(col.dataType)\n                  return (\n                    <NavLinkActionListItem\n                      key={col.id}\n                      to={{\n                        pathname: PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                          projectNumber,\n                          fieldId: encodeURIComponent(col.id)\n                        })\n                      }}\n                      onClick={(e: React.MouseEvent) => {\n                        postStats({\n                          name: SettingsOpenField,\n                          ui: SettingsOpenSidebarUI,\n                          memexProjectColumnId: col.id,\n                          context: `${e.type}: ${e.currentTarget.tagName}`\n                        })\n                      }}\n                      {...testIdProps(`ColumnSettingsItem{id: ${col.name}}`)}\n                    >\n                      <ActionList.LeadingVisual>\n                        <Icon />\n                      </ActionList.LeadingVisual>\n\n                      {col.name}\n                    </NavLinkActionListItem>\n                  )\n                }),\n            [allColumns, postStats, projectNumber]\n          )}\n        </ActionList.Group>\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 46,
      "line_end": 48,
      "text": "<ActionList.LeadingVisual>\n            <GearIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Custom fields\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 0}}"
        },
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{\n            (\n              <Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                Custom fields\n                <Button\n                  ref={anchorRef}\n                  variant=\"invisible\"\n                  size=\"small\"\n                  aria-label=\"Add new field\"\n                  sx={{color: 'accent.fg', mr: -3}}\n                  leadingIcon={PlusIcon}\n                  onClick={() => setShow(s => !s)}\n                >\n                  New field\n                </Button>\n              </Box>\n            ) as any // until primer has better support to allow this in types\n          }"
        }
      ],
      "line_start": 60,
      "line_end": 119,
      "text": "<ActionList.Group\n          aria-label=\"Custom fields\"\n          sx={{mr: 0}}\n          title={\n            (\n              <Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                Custom fields\n                <Button\n                  ref={anchorRef}\n                  variant=\"invisible\"\n                  size=\"small\"\n                  aria-label=\"Add new field\"\n                  sx={{color: 'accent.fg', mr: -3}}\n                  leadingIcon={PlusIcon}\n                  onClick={() => setShow(s => !s)}\n                >\n                  New field\n                </Button>\n              </Box>\n            ) as any // until primer has better support to allow this in types\n          }\n        >\n          {useMemo(\n            () =>\n              allColumns\n                .filter(column => {\n                  return isColumnUserEditable(column)\n                })\n                .map(col => {\n                  const Icon = getColumnIcon(col.dataType)\n                  return (\n                    <NavLinkActionListItem\n                      key={col.id}\n                      to={{\n                        pathname: PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                          projectNumber,\n                          fieldId: encodeURIComponent(col.id)\n                        })\n                      }}\n                      onClick={(e: React.MouseEvent) => {\n                        postStats({\n                          name: SettingsOpenField,\n                          ui: SettingsOpenSidebarUI,\n                          memexProjectColumnId: col.id,\n                          context: `${e.type}: ${e.currentTarget.tagName}`\n                        })\n                      }}\n                      {...testIdProps(`ColumnSettingsItem{id: ${col.name}}`)}\n                    >\n                      <ActionList.LeadingVisual>\n                        <Icon />\n                      </ActionList.LeadingVisual>\n\n                      {col.name}\n                    </NavLinkActionListItem>\n                  )\n                }),\n            [allColumns, postStats, projectNumber]\n          )}\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}"
        }
      ],
      "line_start": 65,
      "line_end": 78,
      "text": "\n              <Box sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\n                Custom fields\n                <Button\n                  ref={anchorRef}\n                  variant=\"invisible\"\n                  size=\"small\"\n                  aria-label=\"Add new field\"\n                  sx={{color: 'accent.fg', mr: -3}}\n                  leadingIcon={PlusIcon}\n                  onClick={() => setShow(s => !s)}\n                >\n                  New field\n                </Button>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "Button",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Add new field\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'accent.fg', mr: -3}}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{PlusIcon}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => setShow(s => !s)}"
        }
      ],
      "line_start": 67,
      "line_end": 77,
      "text": "<Button\n                  ref={anchorRef}\n                  variant=\"invisible\"\n                  size=\"small\"\n                  aria-label=\"Add new field\"\n                  sx={{color: 'accent.fg', mr: -3}}\n                  leadingIcon={PlusIcon}\n                  onClick={() => setShow(s => !s)}\n                >\n                  New field\n                </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-side-nav.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 109,
      "line_end": 111,
      "text": "<ActionList.LeadingVisual>\n                        <Icon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-view.tsx",
      "name": "PageLayout",
      "props": [
        {
          "name": "containerWidth",
          "kind": "StringLiteral",
          "text": "\"full\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '100%', padding: 0, m: 0, [`& > ${Box}`]: {minHeight: '100%'}}}"
        }
      ],
      "line_start": 36,
      "line_end": 55,
      "text": "\n    // Warning: PageLayout is an experimental component.\n    // Please reach out in the #primer channel before using PageLayout on other pages.\n    <PageLayout containerWidth=\"full\" sx={{height: '100%', padding: 0, m: 0, [`& > ${Box}`]: {minHeight: '100%'}}}>\n      <PageLayout.Pane\n        position=\"start\"\n        sx={{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}\n      >\n        <SettingsSideNav />\n      </PageLayout.Pane>\n      <PageLayout.Content\n        width=\"large\"\n        sx={{\n          padding: [3, null, null, 4]\n        }}\n      >\n        <Outlet />\n      </PageLayout.Content>\n    </PageLayout>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-view.tsx",
      "name": "PageLayout.Pane",
      "parent": "PageLayout",
      "child": "Pane",
      "props": [
        {
          "name": "position",
          "kind": "StringLiteral",
          "text": "\"start\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}"
        }
      ],
      "line_start": 37,
      "line_end": 46,
      "text": "<PageLayout.Pane\n        position=\"start\"\n        sx={{\n          padding: [3, null, null, 4],\n          borderRight: '1px solid',\n          borderColor: 'border.subtle'\n        }}\n      >\n        <SettingsSideNav />\n      </PageLayout.Pane>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/settings-view.tsx",
      "name": "PageLayout.Content",
      "parent": "PageLayout",
      "child": "Content",
      "props": [
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"large\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          padding: [3, null, null, 4]\n        }}"
        }
      ],
      "line_start": 47,
      "line_end": 54,
      "text": "<PageLayout.Content\n        width=\"large\"\n        sx={{\n          padding: [3, null, null, 4]\n        }}\n      >\n        <Outlet />\n      </PageLayout.Content>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onClose?.()}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{IssueClosedIcon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'done.fg'}}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!onClose}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('sidepanel-close-issue-button')}"
        }
      ],
      "line_start": 108,
      "line_end": 119,
      "text": "\n        <Button\n          size=\"small\"\n          onClick={() => onClose?.()}\n          leadingIcon={IssueClosedIcon}\n          sx={{color: 'done.fg'}}\n          disabled={!onClose}\n          {...testIdProps('sidepanel-close-issue-button')}\n        >\n          <Text sx={{color: 'fg.default'}}>\n            {hasComment ? Resources.issueButtonLabel.closeWithComment : Resources.issueButtonLabel.closeIssue}\n          </Text>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 116,
      "line_end": 118,
      "text": "<Text sx={{color: 'fg.default'}}>\n            {hasComment ? Resources.issueButtonLabel.closeWithComment : Resources.issueButtonLabel.closeIssue}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onReopen}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{IssueReopenedIcon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'open.fg'}}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!onReopen}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('sidepanel-reopen-issue-button')}"
        }
      ],
      "line_start": 123,
      "line_end": 132,
      "text": "\n        <Button\n          size=\"small\"\n          onClick={onReopen}\n          leadingIcon={IssueReopenedIcon}\n          sx={{color: 'open.fg'}}\n          disabled={!onReopen}\n          {...testIdProps('sidepanel-reopen-issue-button')}\n        >\n          <Text sx={{color: 'fg.default'}}>{Resources.issueButtonLabel.reopenIssue}</Text>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 131,
      "line_end": 131,
      "text": "<Text sx={{color: 'fg.default'}}>{Resources.issueButtonLabel.reopenIssue}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onClose?.(IssueStateReason.NotPlanned)}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{SkipIcon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!onClose}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('sidepanel-skip-issue-button')}"
        }
      ],
      "line_start": 136,
      "line_end": 147,
      "text": "\n        <Button\n          size=\"small\"\n          onClick={() => onClose?.(IssueStateReason.NotPlanned)}\n          leadingIcon={SkipIcon}\n          sx={{color: 'fg.muted'}}\n          disabled={!onClose}\n          {...testIdProps('sidepanel-skip-issue-button')}\n        >\n          <Text sx={{color: 'fg.default'}}>\n            {hasComment ? Resources.issueButtonLabel.closeWithComment : Resources.issueButtonLabel.closeIssue}\n          </Text>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 144,
      "line_end": 146,
      "text": "<Text sx={{color: 'fg.default'}}>\n            {hasComment ? Resources.issueButtonLabel.closeWithComment : Resources.issueButtonLabel.closeIssue}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"listbox\""
        },
        {
          "name": "aria-roledescription",
          "kind": "StringLiteral",
          "text": "\"update issue state options menu\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      display: 'flex',\n      flexDirection: 'column'\n    }}"
        }
      ],
      "line_start": 161,
      "line_end": 211,
      "text": "\n  <ActionList\n    selectionVariant=\"single\"\n    role=\"listbox\"\n    aria-roledescription=\"update issue state options menu\"\n    sx={{\n      display: 'flex',\n      flexDirection: 'column'\n    }}\n  >\n    {issueState === IssueState.Open && (\n      <ActionList.Item\n        key={'close-issue-option'}\n        onSelect={() => setButtonState('open')}\n        selected={buttonState === 'open'}\n        disabled={!canClose}\n      >\n        <ActionList.LeadingVisual sx={{color: 'done.fg'}}>\n          <IssueClosedIcon />\n        </ActionList.LeadingVisual>\n        Close as completed\n        <ActionList.Description variant=\"block\">Done, closed, fixed, resolved</ActionList.Description>\n      </ActionList.Item>\n    )}\n    {issueState === IssueState.Closed && (\n      <ActionList.Item\n        key={'reopen-issue-option'}\n        onSelect={() => setButtonState('closed')}\n        selected={buttonState === 'closed'}\n        disabled={!canReopen}\n      >\n        <ActionList.LeadingVisual sx={{color: 'open.fg'}}>\n          <IssueReopenedIcon />\n        </ActionList.LeadingVisual>\n        Reopen issue\n      </ActionList.Item>\n    )}\n    <ActionList.Item\n      key={'skip-issue-option'}\n      onSelect={() => setButtonState('skip')}\n      selected={buttonState === 'skip'}\n      disabled={!canClose}\n    >\n      <ActionList.LeadingVisual>\n        <SkipIcon />\n      </ActionList.LeadingVisual>\n      Close as not planned\n      <ActionList.Description variant=\"block\">\n        Won&apos;t fix, can&apos;t repro, duplicate, stale\n      </ActionList.Description>\n    </ActionList.Item>\n  </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{'close-issue-option'}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => setButtonState('open')}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{buttonState === 'open'}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!canClose}"
        }
      ],
      "line_start": 171,
      "line_end": 182,
      "text": "\n      <ActionList.Item\n        key={'close-issue-option'}\n        onSelect={() => setButtonState('open')}\n        selected={buttonState === 'open'}\n        disabled={!canClose}\n      >\n        <ActionList.LeadingVisual sx={{color: 'done.fg'}}>\n          <IssueClosedIcon />\n        </ActionList.LeadingVisual>\n        Close as completed\n        <ActionList.Description variant=\"block\">Done, closed, fixed, resolved</ActionList.Description>\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'done.fg'}}"
        }
      ],
      "line_start": 177,
      "line_end": 179,
      "text": "<ActionList.LeadingVisual sx={{color: 'done.fg'}}>\n          <IssueClosedIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 181,
      "line_end": 181,
      "text": "<ActionList.Description variant=\"block\">Done, closed, fixed, resolved</ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{'reopen-issue-option'}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => setButtonState('closed')}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{buttonState === 'closed'}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!canReopen}"
        }
      ],
      "line_start": 185,
      "line_end": 195,
      "text": "\n      <ActionList.Item\n        key={'reopen-issue-option'}\n        onSelect={() => setButtonState('closed')}\n        selected={buttonState === 'closed'}\n        disabled={!canReopen}\n      >\n        <ActionList.LeadingVisual sx={{color: 'open.fg'}}>\n          <IssueReopenedIcon />\n        </ActionList.LeadingVisual>\n        Reopen issue\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'open.fg'}}"
        }
      ],
      "line_start": 191,
      "line_end": 193,
      "text": "<ActionList.LeadingVisual sx={{color: 'open.fg'}}>\n          <IssueReopenedIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{'skip-issue-option'}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => setButtonState('skip')}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{buttonState === 'skip'}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!canClose}"
        }
      ],
      "line_start": 197,
      "line_end": 210,
      "text": "<ActionList.Item\n      key={'skip-issue-option'}\n      onSelect={() => setButtonState('skip')}\n      selected={buttonState === 'skip'}\n      disabled={!canClose}\n    >\n      <ActionList.LeadingVisual>\n        <SkipIcon />\n      </ActionList.LeadingVisual>\n      Close as not planned\n      <ActionList.Description variant=\"block\">\n        Won&apos;t fix, can&apos;t repro, duplicate, stale\n      </ActionList.Description>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 203,
      "line_end": 205,
      "text": "<ActionList.LeadingVisual>\n        <SkipIcon />\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 207,
      "line_end": 209,
      "text": "<ActionList.Description variant=\"block\">\n        Won&apos;t fix, can&apos;t repro, duplicate, stale\n      </ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2}}"
        }
      ],
      "line_start": 228,
      "line_end": 261,
      "text": "\n    <Box sx={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2}}>\n      {(onClose || onReopen) && (\n        <ButtonGroup sx={{display: 'flex'}}>\n          <UpdateStateButton hasComment={!isCommentEmpty} state={buttonState} onClose={onClose} onReopen={onReopen} />\n\n          {issues_close_state && (\n            <ActionMenu open={closeMenuOpen} onOpenChange={setCloseMenuOpen}>\n              <ActionMenu.Anchor>\n                <IconButton size=\"small\" icon={TriangleDownIcon} aria-label=\"More options\" />\n              </ActionMenu.Anchor>\n\n              <ActionMenu.Overlay>\n                <UpdateStateButtonOptions\n                  buttonState={buttonState}\n                  setButtonState={setButtonState}\n                  canClose={onClose !== undefined}\n                  canReopen={onReopen !== undefined}\n                  issueState={currentIssueState}\n                />\n              </ActionMenu.Overlay>\n            </ActionMenu>\n          )}\n        </ButtonGroup>\n      )}\n      <Button\n        variant=\"primary\"\n        size=\"small\"\n        disabled={isCommentEmpty}\n        onClick={onAddComent}\n        {...testIdProps(`add-comment-button`)}\n      >\n        Comment\n      </Button>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ButtonGroup",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 230,
      "line_end": 250,
      "text": "\n        <ButtonGroup sx={{display: 'flex'}}>\n          <UpdateStateButton hasComment={!isCommentEmpty} state={buttonState} onClose={onClose} onReopen={onReopen} />\n\n          {issues_close_state && (\n            <ActionMenu open={closeMenuOpen} onOpenChange={setCloseMenuOpen}>\n              <ActionMenu.Anchor>\n                <IconButton size=\"small\" icon={TriangleDownIcon} aria-label=\"More options\" />\n              </ActionMenu.Anchor>\n\n              <ActionMenu.Overlay>\n                <UpdateStateButtonOptions\n                  buttonState={buttonState}\n                  setButtonState={setButtonState}\n                  canClose={onClose !== undefined}\n                  canReopen={onReopen !== undefined}\n                  issueState={currentIssueState}\n                />\n              </ActionMenu.Overlay>\n            </ActionMenu>\n          )}\n        </ButtonGroup>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{closeMenuOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{setCloseMenuOpen}"
        }
      ],
      "line_start": 234,
      "line_end": 248,
      "text": "\n            <ActionMenu open={closeMenuOpen} onOpenChange={setCloseMenuOpen}>\n              <ActionMenu.Anchor>\n                <IconButton size=\"small\" icon={TriangleDownIcon} aria-label=\"More options\" />\n              </ActionMenu.Anchor>\n\n              <ActionMenu.Overlay>\n                <UpdateStateButtonOptions\n                  buttonState={buttonState}\n                  setButtonState={setButtonState}\n                  canClose={onClose !== undefined}\n                  canReopen={onReopen !== undefined}\n                  issueState={currentIssueState}\n                />\n              </ActionMenu.Overlay>\n            </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 235,
      "line_end": 237,
      "text": "<ActionMenu.Anchor>\n                <IconButton size=\"small\" icon={TriangleDownIcon} aria-label=\"More options\" />\n              </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 239,
      "line_end": 247,
      "text": "<ActionMenu.Overlay>\n                <UpdateStateButtonOptions\n                  buttonState={buttonState}\n                  setButtonState={setButtonState}\n                  canClose={onClose !== undefined}\n                  canReopen={onReopen !== undefined}\n                  issueState={currentIssueState}\n                />\n              </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/add-comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isCommentEmpty}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onAddComent}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`add-comment-button`)}"
        }
      ],
      "line_start": 252,
      "line_end": 260,
      "text": "<Button\n        variant=\"primary\"\n        size=\"small\"\n        disabled={isCommentEmpty}\n        onClick={onAddComent}\n        {...testIdProps(`add-comment-button`)}\n      >\n        Comment\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/body.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: fullHeight ? 'auto' : undefined, px: 2}}"
        }
      ],
      "line_start": 50,
      "line_end": 83,
      "text": "\n    <Box sx={{flex: fullHeight ? 'auto' : undefined, px: 2}}>\n      <SidePanelLiveUpdate />\n      {isLoading ? (\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            py: 6,\n            justifyContent: 'center'\n          }}\n        >\n          <Spinner aria-label=\"Loading\" />\n        </Box>\n      ) : (\n        <Box as=\"section\" sx={{height: fullHeight ? '100%' : undefined}}>\n          <h3 style={{position: 'absolute', clipPath: 'circle(0)'}}>Description</h3>\n          <SidePanelComment\n            allowEmptyBody={true}\n            author={sidePanelMetadata.user}\n            createdAt={new Date(sidePanelMetadata.createdAt)}\n            editedAt={\n              sidePanelMetadata.description.editedAt ? new Date(sidePanelMetadata.description.editedAt) : undefined\n            }\n            reactions={sidePanelMetadata.reactions ?? {}}\n            description={sidePanelMetadata.description}\n            context={markdownContext}\n            onEdit={onEdit}\n            onReact={onReact}\n            uniqueId=\"body\"\n            fullHeight={fullHeight}\n          />\n        </Box>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/body.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            flexDirection: 'row',\n            py: 6,\n            justifyContent: 'center'\n          }}"
        }
      ],
      "line_start": 53,
      "line_end": 62,
      "text": "\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            py: 6,\n            justifyContent: 'center'\n          }}\n        >\n          <Spinner aria-label=\"Loading\" />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/body.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"section\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: fullHeight ? '100%' : undefined}}"
        }
      ],
      "line_start": 64,
      "line_end": 81,
      "text": "\n        <Box as=\"section\" sx={{height: fullHeight ? '100%' : undefined}}>\n          <h3 style={{position: 'absolute', clipPath: 'circle(0)'}}>Description</h3>\n          <SidePanelComment\n            allowEmptyBody={true}\n            author={sidePanelMetadata.user}\n            createdAt={new Date(sidePanelMetadata.createdAt)}\n            editedAt={\n              sidePanelMetadata.description.editedAt ? new Date(sidePanelMetadata.description.editedAt) : undefined\n            }\n            reactions={sidePanelMetadata.reactions ?? {}}\n            description={sidePanelMetadata.description}\n            context={markdownContext}\n            onEdit={onEdit}\n            onReact={onReact}\n            uniqueId=\"body\"\n            fullHeight={fullHeight}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 29,
      "line_end": 51,
      "text": "\n  <ActionMenu>\n    <ActionMenu.Anchor>\n      <IconButtonWithTooltip\n        icon={KebabHorizontalIcon}\n        variant=\"invisible\"\n        size=\"small\"\n        label=\"Comment actions\"\n        sx={{color: 'fg.default'}}\n        {...testIdProps('comment-overflow-menu-button')}\n      />\n    </ActionMenu.Anchor>\n\n    <ActionMenu.Overlay align=\"end\">\n      <ActionList>\n        <ActionList.Item onSelect={() => navigator.clipboard.writeText(url)}>Copy link</ActionList.Item>\n        {onEdit && (\n          <ActionList.Item onSelect={onEdit} {...testIdProps('overflow-menu-edit-button')}>\n            Edit\n          </ActionList.Item>\n        )}\n      </ActionList>\n    </ActionMenu.Overlay>\n  </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 30,
      "line_end": 39,
      "text": "<ActionMenu.Anchor>\n      <IconButtonWithTooltip\n        icon={KebabHorizontalIcon}\n        variant=\"invisible\"\n        size=\"small\"\n        label=\"Comment actions\"\n        sx={{color: 'fg.default'}}\n        {...testIdProps('comment-overflow-menu-button')}\n      />\n    </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"end\""
        }
      ],
      "line_start": 41,
      "line_end": 50,
      "text": "<ActionMenu.Overlay align=\"end\">\n      <ActionList>\n        <ActionList.Item onSelect={() => navigator.clipboard.writeText(url)}>Copy link</ActionList.Item>\n        {onEdit && (\n          <ActionList.Item onSelect={onEdit} {...testIdProps('overflow-menu-edit-button')}>\n            Edit\n          </ActionList.Item>\n        )}\n      </ActionList>\n    </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 42,
      "line_end": 49,
      "text": "<ActionList>\n        <ActionList.Item onSelect={() => navigator.clipboard.writeText(url)}>Copy link</ActionList.Item>\n        {onEdit && (\n          <ActionList.Item onSelect={onEdit} {...testIdProps('overflow-menu-edit-button')}>\n            Edit\n          </ActionList.Item>\n        )}\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => navigator.clipboard.writeText(url)}"
        }
      ],
      "line_start": 43,
      "line_end": 43,
      "text": "<ActionList.Item onSelect={() => navigator.clipboard.writeText(url)}>Copy link</ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onEdit}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('overflow-menu-edit-button')}"
        }
      ],
      "line_start": 45,
      "line_end": 47,
      "text": "\n          <ActionList.Item onSelect={onEdit} {...testIdProps('overflow-menu-edit-button')}>\n            Edit\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        color: 'fg.default'\n      }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onEdit}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Edit comment\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('edit-comment-button')}"
        }
      ],
      "line_start": 61,
      "line_end": 72,
      "text": "\n    <Button\n      size=\"small\"\n      variant=\"invisible\"\n      sx={{\n        color: 'fg.default'\n      }}\n      onClick={onEdit}\n      aria-label=\"Edit comment\"\n      {...testIdProps('edit-comment-button')}\n    >\n      Edit\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('edit-timestamp')}"
        }
      ],
      "line_start": 81,
      "line_end": 84,
      "text": "\n    <Text sx={{color: 'fg.muted'}} {...testIdProps('edit-timestamp')}>\n      <DistanceTime time={latestDate} strict fuzzSmallValues />\n      {latestDate === editedAt && ' (edited)'}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', gap: 2}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"header\""
        }
      ],
      "line_start": 96,
      "line_end": 131,
      "text": "\n  <Box sx={{display: 'flex', alignItems: 'center', gap: 2}} as=\"header\">\n    {author.avatarUrl && (\n      <Avatar\n        size={24}\n        key={author.id}\n        alt=\"\" // alt text not needed since we have the username right next to it\n        src={author.avatarUrl}\n        {...testIdProps('author-avatar')}\n      />\n    )}\n\n    <Text sx={{fontWeight: 600, fontStyle: 'normal'}} {...testIdProps('author-login')} as=\"address\">\n      {author.login}\n    </Text>\n\n    {url ? (\n      <Link href={url} target=\"_blank\" {...testIdProps('edit-timestamp-link')}>\n        <Timestamp createdAt={createdAt} editedAt={editedAt} />\n      </Link>\n    ) : (\n      <Timestamp createdAt={createdAt} editedAt={editedAt} />\n    )}\n\n    {authorAssociation && authorAssociation !== CommentAuthorAssociation.NONE && (\n      <>\n        <Text sx={{color: 'fg.muted'}}>&middot;</Text>\n        <Label sx={{fontWeight: 600, alignSelf: 'center'}} {...testIdProps('author-association')}>\n          {toTitleCase(authorAssociation)}\n        </Label>\n      </>\n    )}\n\n    <Box sx={{flex: 1}} />\n\n    <Actions url={url} onEdit={onStartEdit} />\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 600, fontStyle: 'normal'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('author-login')}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"address\""
        }
      ],
      "line_start": 107,
      "line_end": 109,
      "text": "<Text sx={{fontWeight: 600, fontStyle: 'normal'}} {...testIdProps('author-login')} as=\"address\">\n      {author.login}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{url}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('edit-timestamp-link')}"
        }
      ],
      "line_start": 112,
      "line_end": 114,
      "text": "\n      <Link href={url} target=\"_blank\" {...testIdProps('edit-timestamp-link')}>\n        <Timestamp createdAt={createdAt} editedAt={editedAt} />\n      </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 121,
      "line_end": 121,
      "text": "<Text sx={{color: 'fg.muted'}}>&middot;</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 600, alignSelf: 'center'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('author-association')}"
        }
      ],
      "line_start": 122,
      "line_end": 124,
      "text": "<Label sx={{fontWeight: 600, alignSelf: 'center'}} {...testIdProps('author-association')}>\n          {toTitleCase(authorAssociation)}\n        </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onCancel}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('cancel-button')}"
        }
      ],
      "line_start": 140,
      "line_end": 148,
      "text": "<Button\n      variant=\"invisible\"\n      sx={{color: 'fg.muted'}}\n      size=\"small\"\n      onClick={onCancel}\n      {...testIdProps('cancel-button')}\n    >\n      Cancel\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onSave}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('save-button')}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{updateButtonDisabled}"
        }
      ],
      "line_start": 149,
      "line_end": 157,
      "text": "<Button\n      variant=\"primary\"\n      size=\"small\"\n      onClick={onSave}\n      {...testIdProps('save-button')}\n      disabled={updateButtonDisabled}\n    >\n      Update comment\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'row',\n        py: 6,\n        justifyContent: 'center'\n      }}"
        }
      ],
      "line_start": 271,
      "line_end": 280,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        py: 6,\n        justifyContent: 'center'\n      }}\n    >\n      <Spinner aria-label=\"Loading\" />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'column',\n        p: 3,\n        gap: 3\n      }}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"article\""
        }
      ],
      "line_start": 296,
      "line_end": 331,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        p: 3,\n        gap: 3\n      }}\n      as=\"article\"\n    >\n      <Header\n        author={author}\n        createdAt={createdAt}\n        editedAt={editedAt}\n        url={url}\n        onStartEdit={onStartEdit}\n        authorAssociation={authorAssociation}\n      />\n\n      {description.bodyHtml ? (\n        <SanitizedMarkdownViewer\n          dangerousRenderedHTML={renderedHtml}\n          onChange={onInteractWithBody}\n          markdownValue={description.body || ''}\n          disabled={!onEdit}\n          {...testIdProps('comment-body')}\n        />\n      ) : (\n        <Text sx={{color: 'fg.muted', m: 0, fontStyle: 'italic'}} {...testIdProps('empty-body-placeholder')} as=\"p\">\n          {Resources.noDescriptionProvided}\n        </Text>\n      )}\n\n      <footer>\n        <SidePanelReactions reactions={reactions} onReact={onReact} />\n      </footer>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comment.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', m: 0, fontStyle: 'italic'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('empty-body-placeholder')}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        }
      ],
      "line_start": 323,
      "line_end": 325,
      "text": "\n        <Text sx={{color: 'fg.muted', m: 0, fontStyle: 'italic'}} {...testIdProps('empty-body-placeholder')} as=\"p\">\n          {Resources.noDescriptionProvided}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'column',\n        px: 2,\n        backgroundColor: 'canvas.subtle',\n        borderTop: '1px solid',\n        borderColor: 'border.muted',\n        flex: 'auto'\n      }}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"section\""
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{setContainer}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('all-comments-box')}"
        }
      ],
      "line_start": 37,
      "line_end": 72,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        px: 2,\n        backgroundColor: 'canvas.subtle',\n        borderTop: '1px solid',\n        borderColor: 'border.muted',\n        flex: 'auto'\n      }}\n      as=\"section\"\n      ref={setContainer}\n      {...testIdProps('all-comments-box')}\n    >\n      <h3 style={{clipPath: 'circle(0)', position: 'absolute'}}>Comments</h3>\n\n      <JumpToBottomButton onClick={goToEditor} visible={height >= JUMP_TO_BOTTOM_HEIGHT_THRESHOLD_PX} />\n\n      <ul style={{listStyle: 'none'}}>\n        {comments.map(comment => (\n          <SidePanelIssueComment\n            key={comment.id}\n            comment={comment}\n            editIssueComment={editIssueComment}\n            reactToSidePanelItem={reactToSidePanelItem}\n            itemURL={itemURL}\n          />\n        ))}\n      </ul>\n      {\n        // The close/reopen issues are inside the addcomment component, so by doing this we are assuming\n        // that if a user can close/reopen, they must also be able to comment. This is reasonable but if\n        // incorrect we can revisit later - this is just much simpler from a readability perspective.\n        capabilities.includes('comment') && <SidePanelAddComment ref={addCommentEditorRef} />\n      }\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "trailingIcon",
          "kind": "JsxExpression",
          "text": "{ArrowDownIcon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        px: 2,\n        position: visible ? 'unset' : 'absolute',\n        clipPath: visible ? 'unset' : 'Circle(0)',\n        ':focus': {\n          position: 'unset',\n          clipPath: 'unset'\n        }\n      }}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Jump to 'add comment' input\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('jump-to-bottom-button')}"
        }
      ],
      "line_start": 86,
      "line_end": 104,
      "text": "<Button\n      variant=\"invisible\"\n      size=\"small\"\n      onClick={onClick}\n      trailingIcon={ArrowDownIcon}\n      sx={{\n        px: 2,\n        position: visible ? 'unset' : 'absolute',\n        clipPath: visible ? 'unset' : 'Circle(0)',\n        ':focus': {\n          position: 'unset',\n          clipPath: 'unset'\n        }\n      }}\n      aria-label=\"Jump to 'add comment' input\"\n      {...testIdProps('jump-to-bottom-button')}\n    >\n      {Resources.jumpToBottom}\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{borderLeft: `1px solid`, borderColor: 'border.muted', py: 2, ml: 4, ...sx}}"
        }
      ],
      "line_start": 109,
      "line_end": 109,
      "text": "\n  <Box sx={{borderLeft: `1px solid`, borderColor: 'border.muted', py: 2, ml: 4, ...sx}}>{children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"li\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`comments-box-${comment.id}`)}"
        }
      ],
      "line_start": 142,
      "line_end": 167,
      "text": "\n    <Box as=\"li\" {...testIdProps(`comments-box-${comment.id}`)}>\n      <Box\n        sx={{\n          border: '1px solid',\n          borderColor: 'border.muted',\n          backgroundColor: 'canvas.default',\n          borderRadius: 2,\n          boxShadow: 'shadow.small'\n        }}\n      >\n        <SidePanelComment\n          author={comment.user}\n          authorAssociation={comment.authorAssociation}\n          createdAt={new Date(comment.createdAt)}\n          editedAt={comment.description.editedAt ? new Date(comment.description.editedAt) : undefined}\n          description={comment.description}\n          reactions={comment.reactions}\n          context={editorContext}\n          onEdit={onEdit}\n          onReact={onReact}\n          url={commentUrl}\n          uniqueId={`comment-${comment.id}`}\n        />\n      </Box>\n      <TimelineSpacer />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/comments.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          border: '1px solid',\n          borderColor: 'border.muted',\n          backgroundColor: 'canvas.default',\n          borderRadius: 2,\n          boxShadow: 'shadow.small'\n        }}"
        }
      ],
      "line_start": 143,
      "line_end": 165,
      "text": "<Box\n        sx={{\n          border: '1px solid',\n          borderColor: 'border.muted',\n          backgroundColor: 'canvas.default',\n          borderRadius: 2,\n          boxShadow: 'shadow.small'\n        }}\n      >\n        <SidePanelComment\n          author={comment.user}\n          authorAssociation={comment.authorAssociation}\n          createdAt={new Date(comment.createdAt)}\n          editedAt={comment.description.editedAt ? new Date(comment.description.editedAt) : undefined}\n          description={comment.description}\n          reactions={comment.reactions}\n          context={editorContext}\n          onEdit={onEdit}\n          onReact={onReact}\n          url={commentUrl}\n          uniqueId={`comment-${comment.id}`}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: [3, '', 4], pt: 4}}"
        }
      ],
      "line_start": 46,
      "line_end": 78,
      "text": "<Box sx={{px: [3, '', 4], pt: 4}}>\n        <Box sx={{display: 'flex', mb: 2}}>\n          <Box sx={{display: 'flex', flex: 'auto', alignItems: 'center', flexWrap: 'wrap', gap: 2}}>\n            <ItemStateLabel item={item} overrideState={sidePanelMetadata.state} />\n            {isLoading ? (\n              'Loading...'\n            ) : createdAt && login ? (\n              <Text sx={{fontSize: 1, fontStyle: 'normal'}} as=\"address\">\n                <Text sx={{fontWeight: 'bold'}}>{login}</Text>\n                <Text sx={{color: 'fg.muted'}}>\n                  {' opened '}\n                  <DistanceTime time={createdAt} />\n                </Text>\n              </Text>\n            ) : null}\n          </Box>\n          <Box>\n            <IconButton\n              variant=\"invisible\"\n              // Safe to hide because the backdrop is a focuseable close button\n              aria-hidden=\"true\"\n              // Even though it's hidden it's still focuseable, so the label still helps in some situations\n              aria-label=\"Close\"\n              sx={{color: 'fg.muted', mr: -2, mt: -1}}\n              icon={XIcon}\n              onClick={() => closePane()}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>\n        </Box>\n\n        <SidePanelTitle ref={initialFocusRef} item={item} title={title} isLoading={isLoading} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 47,
      "line_end": 75,
      "text": "<Box sx={{display: 'flex', mb: 2}}>\n          <Box sx={{display: 'flex', flex: 'auto', alignItems: 'center', flexWrap: 'wrap', gap: 2}}>\n            <ItemStateLabel item={item} overrideState={sidePanelMetadata.state} />\n            {isLoading ? (\n              'Loading...'\n            ) : createdAt && login ? (\n              <Text sx={{fontSize: 1, fontStyle: 'normal'}} as=\"address\">\n                <Text sx={{fontWeight: 'bold'}}>{login}</Text>\n                <Text sx={{color: 'fg.muted'}}>\n                  {' opened '}\n                  <DistanceTime time={createdAt} />\n                </Text>\n              </Text>\n            ) : null}\n          </Box>\n          <Box>\n            <IconButton\n              variant=\"invisible\"\n              // Safe to hide because the backdrop is a focuseable close button\n              aria-hidden=\"true\"\n              // Even though it's hidden it's still focuseable, so the label still helps in some situations\n              aria-label=\"Close\"\n              sx={{color: 'fg.muted', mr: -2, mt: -1}}\n              icon={XIcon}\n              onClick={() => closePane()}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flex: 'auto', alignItems: 'center', flexWrap: 'wrap', gap: 2}}"
        }
      ],
      "line_start": 48,
      "line_end": 61,
      "text": "<Box sx={{display: 'flex', flex: 'auto', alignItems: 'center', flexWrap: 'wrap', gap: 2}}>\n            <ItemStateLabel item={item} overrideState={sidePanelMetadata.state} />\n            {isLoading ? (\n              'Loading...'\n            ) : createdAt && login ? (\n              <Text sx={{fontSize: 1, fontStyle: 'normal'}} as=\"address\">\n                <Text sx={{fontWeight: 'bold'}}>{login}</Text>\n                <Text sx={{color: 'fg.muted'}}>\n                  {' opened '}\n                  <DistanceTime time={createdAt} />\n                </Text>\n              </Text>\n            ) : null}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, fontStyle: 'normal'}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"address\""
        }
      ],
      "line_start": 53,
      "line_end": 59,
      "text": "\n              <Text sx={{fontSize: 1, fontStyle: 'normal'}} as=\"address\">\n                <Text sx={{fontWeight: 'bold'}}>{login}</Text>\n                <Text sx={{color: 'fg.muted'}}>\n                  {' opened '}\n                  <DistanceTime time={createdAt} />\n                </Text>\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold'}}"
        }
      ],
      "line_start": 54,
      "line_end": 54,
      "text": "<Text sx={{fontWeight: 'bold'}}>{login}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 55,
      "line_end": 58,
      "text": "<Text sx={{color: 'fg.muted'}}>\n                  {' opened '}\n                  <DistanceTime time={createdAt} />\n                </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [],
      "line_start": 62,
      "line_end": 74,
      "text": "<Box>\n            <IconButton\n              variant=\"invisible\"\n              // Safe to hide because the backdrop is a focuseable close button\n              aria-hidden=\"true\"\n              // Even though it's hidden it's still focuseable, so the label still helps in some situations\n              aria-label=\"Close\"\n              sx={{color: 'fg.muted', mr: -2, mt: -1}}\n              icon={XIcon}\n              onClick={() => closePane()}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 2,\n          pt: isEditing ? 1 : 0,\n          mb: isEditing ? 1 : 0\n        }}"
        }
      ],
      "line_start": 221,
      "line_end": 306,
      "text": "\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 2,\n          pt: isEditing ? 1 : 0,\n          mb: isEditing ? 1 : 0\n        }}\n      >\n        <Box\n          sx={{\n            flexGrow: 1\n          }}\n          {...testIdProps('side-panel-title')}\n        >\n          {isEditing ? (\n            <EmojiPicker sx={{width: '100%'}}>\n              <TextInput\n                aria-label=\"Item title\"\n                sx={{lineHeight: '18px'}}\n                ref={inputRef as React.RefObject<HTMLInputElement>}\n                value={editingTitle}\n                onChange={onChange}\n                {...inputCompositionProps}\n                size=\"small\"\n                {...testIdProps('side-panel-title-input')}\n              />\n            </EmojiPicker>\n          ) : (\n            <>\n              <Text\n                sx={{\n                  fontSize: 4,\n                  fontWeight: 'bold',\n                  color: 'fg.default',\n                  mr: 2,\n                  maxWidth: '100%',\n                  cursor: 'default',\n                  display: 'inline',\n                  wordBreak: 'break-word'\n                }}\n                as=\"h2\"\n                {...testIdProps('side-panel-title-content')}\n              >\n                <SanitizedHtmlSpan>{title.html}</SanitizedHtmlSpan>\n              </Text>\n              <ItemNumberLink item={item} />\n            </>\n          )}\n        </Box>\n        <Box sx={{mt: isEditing ? 0 : 1}}>\n          {!isEditing && !isLoading && canEditTitle && (\n            <Button\n              size=\"small\"\n              onClick={onClick}\n              {...testIdProps('side-panel-title-edit-button')}\n              aria-label=\"Edit title\"\n            >\n              Edit\n            </Button>\n          )}\n          {isEditing && (\n            <Box sx={{display: 'flex', gap: 2}}>\n              <Button\n                size=\"small\"\n                variant=\"primary\"\n                onClick={stopEditingAndSave}\n                {...testIdProps('side-panel-title-save-button')}\n              >\n                Save\n              </Button>\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setEditingTitleFromItem()\n                  setIsEditing(false)\n                }}\n                {...testIdProps('side-panel-title-revert-button')}\n              >\n                Cancel\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            flexGrow: 1\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('side-panel-title')}"
        }
      ],
      "line_start": 231,
      "line_end": 271,
      "text": "<Box\n          sx={{\n            flexGrow: 1\n          }}\n          {...testIdProps('side-panel-title')}\n        >\n          {isEditing ? (\n            <EmojiPicker sx={{width: '100%'}}>\n              <TextInput\n                aria-label=\"Item title\"\n                sx={{lineHeight: '18px'}}\n                ref={inputRef as React.RefObject<HTMLInputElement>}\n                value={editingTitle}\n                onChange={onChange}\n                {...inputCompositionProps}\n                size=\"small\"\n                {...testIdProps('side-panel-title-input')}\n              />\n            </EmojiPicker>\n          ) : (\n            <>\n              <Text\n                sx={{\n                  fontSize: 4,\n                  fontWeight: 'bold',\n                  color: 'fg.default',\n                  mr: 2,\n                  maxWidth: '100%',\n                  cursor: 'default',\n                  display: 'inline',\n                  wordBreak: 'break-word'\n                }}\n                as=\"h2\"\n                {...testIdProps('side-panel-title-content')}\n              >\n                <SanitizedHtmlSpan>{title.html}</SanitizedHtmlSpan>\n              </Text>\n              <ItemNumberLink item={item} />\n            </>\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                  fontSize: 4,\n                  fontWeight: 'bold',\n                  color: 'fg.default',\n                  mr: 2,\n                  maxWidth: '100%',\n                  cursor: 'default',\n                  display: 'inline',\n                  wordBreak: 'break-word'\n                }}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                {...testIdProps('side-panel-title-content')}"
        }
      ],
      "line_start": 252,
      "line_end": 267,
      "text": "<Text\n                sx={{\n                  fontSize: 4,\n                  fontWeight: 'bold',\n                  color: 'fg.default',\n                  mr: 2,\n                  maxWidth: '100%',\n                  cursor: 'default',\n                  display: 'inline',\n                  wordBreak: 'break-word'\n                }}\n                as=\"h2\"\n                {...testIdProps('side-panel-title-content')}\n              >\n                <SanitizedHtmlSpan>{title.html}</SanitizedHtmlSpan>\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: isEditing ? 0 : 1}}"
        }
      ],
      "line_start": 272,
      "line_end": 305,
      "text": "<Box sx={{mt: isEditing ? 0 : 1}}>\n          {!isEditing && !isLoading && canEditTitle && (\n            <Button\n              size=\"small\"\n              onClick={onClick}\n              {...testIdProps('side-panel-title-edit-button')}\n              aria-label=\"Edit title\"\n            >\n              Edit\n            </Button>\n          )}\n          {isEditing && (\n            <Box sx={{display: 'flex', gap: 2}}>\n              <Button\n                size=\"small\"\n                variant=\"primary\"\n                onClick={stopEditingAndSave}\n                {...testIdProps('side-panel-title-save-button')}\n              >\n                Save\n              </Button>\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setEditingTitleFromItem()\n                  setIsEditing(false)\n                }}\n                {...testIdProps('side-panel-title-revert-button')}\n              >\n                Cancel\n              </Button>\n            </Box>\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('side-panel-title-edit-button')}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Edit title\""
        }
      ],
      "line_start": 274,
      "line_end": 281,
      "text": "\n            <Button\n              size=\"small\"\n              onClick={onClick}\n              {...testIdProps('side-panel-title-edit-button')}\n              aria-label=\"Edit title\"\n            >\n              Edit\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 2}}"
        }
      ],
      "line_start": 284,
      "line_end": 303,
      "text": "\n            <Box sx={{display: 'flex', gap: 2}}>\n              <Button\n                size=\"small\"\n                variant=\"primary\"\n                onClick={stopEditingAndSave}\n                {...testIdProps('side-panel-title-save-button')}\n              >\n                Save\n              </Button>\n              <Button\n                size=\"small\"\n                onClick={() => {\n                  setEditingTitleFromItem()\n                  setIsEditing(false)\n                }}\n                {...testIdProps('side-panel-title-revert-button')}\n              >\n                Cancel\n              </Button>\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{stopEditingAndSave}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                {...testIdProps('side-panel-title-save-button')}"
        }
      ],
      "line_start": 285,
      "line_end": 292,
      "text": "<Button\n                size=\"small\"\n                variant=\"primary\"\n                onClick={stopEditingAndSave}\n                {...testIdProps('side-panel-title-save-button')}\n              >\n                Save\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => {\n                  setEditingTitleFromItem()\n                  setIsEditing(false)\n                }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                {...testIdProps('side-panel-title-revert-button')}"
        }
      ],
      "line_start": 293,
      "line_end": 302,
      "text": "<Button\n                size=\"small\"\n                onClick={() => {\n                  setEditingTitleFromItem()\n                  setIsEditing(false)\n                }}\n                {...testIdProps('side-panel-title-revert-button')}\n              >\n                Cancel\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{item.getUrl()}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 4, color: 'fg.muted'}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => postStats({name: SidePanelNavigateToItem})}"
        }
      ],
      "line_start": 325,
      "line_end": 330,
      "text": "\n    <Link\n      href={item.getUrl()}\n      target=\"_blank\"\n      sx={{fontSize: 4, color: 'fg.muted'}}\n      onClick={() => postStats({name: SidePanelNavigateToItem})}\n    >{`#${item.getItemNumber()}`}</Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "UnderlineNav",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 3, flexShrink: 0, cursor: 'pointer', borderBottom: 0}}"
        }
      ],
      "line_start": 338,
      "line_end": 353,
      "text": "\n  <UnderlineNav sx={{pl: 3, flexShrink: 0, cursor: 'pointer', borderBottom: 0}}>\n    <UnderlineNav.Link\n      onClick={() => onTabChange('details')}\n      selected={selectedTab === 'details'}\n      sx={{'&:hover': {outline: 'none'}}}\n    >\n      Details\n    </UnderlineNav.Link>\n    <UnderlineNav.Link\n      onClick={() => onTabChange('tracks')}\n      selected={selectedTab === 'tracks'}\n      sx={{'&:hover': {outline: 'none'}}}\n    >\n      Tracks\n    </UnderlineNav.Link>\n  </UnderlineNav>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "UnderlineNav.Link",
      "parent": "UnderlineNav",
      "child": "Link",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onTabChange('details')}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedTab === 'details'}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{'&:hover': {outline: 'none'}}}"
        }
      ],
      "line_start": 339,
      "line_end": 345,
      "text": "<UnderlineNav.Link\n      onClick={() => onTabChange('details')}\n      selected={selectedTab === 'details'}\n      sx={{'&:hover': {outline: 'none'}}}\n    >\n      Details\n    </UnderlineNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/header.tsx",
      "name": "UnderlineNav.Link",
      "parent": "UnderlineNav",
      "child": "Link",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onTabChange('tracks')}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedTab === 'tracks'}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{'&:hover': {outline: 'none'}}}"
        }
      ],
      "line_start": 346,
      "line_end": 352,
      "text": "<UnderlineNav.Link\n      onClick={() => onTabChange('tracks')}\n      selected={selectedTab === 'tracks'}\n      sx={{'&:hover': {outline: 'none'}}}\n    >\n      Tracks\n    </UnderlineNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [],
      "line_start": 25,
      "line_end": 43,
      "text": "\n    <Box>\n      {trackedItems.map((item: SidePanelItem, index: number) => {\n        return (\n          <SidePanelHierarchyItem\n            parentItem={parentItem}\n            item={item}\n            reloadParentChildren={reloadParentChildren}\n            handleClick={() => handleClick(item)}\n            key={index}\n          />\n        )\n      })}\n      <HierarchyOmnibar\n        item={parentItem}\n        defaultPlaceholder=\"Add new\"\n        reloadParentChildren={reloadParentChildren}\n        filteredItemIds={filteredItemIds}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        gap: 0,\n        justifyContent: 'space-between',\n        backgroundColor: isSelected ? 'accent.subtle' : 'transparent',\n        boxShadow: theme =>\n          isSelected\n            ? `inset 0 1px 0 ${theme.colors.accent.emphasis}, 0 1px 0 ${theme.colors.accent.emphasis}`\n            : 'none',\n        position: 'relative',\n        '&:hover, &:focus': {\n          backgroundColor: 'canvas.subtle',\n          '& .triangleDown': {opacity: 1},\n          '& .dragHandler': {opacity: 1},\n          '& .progressItem': {opacity: 1}\n        },\n        whiteSpace: 'nowrap',\n        width: '100%'\n      }}"
        }
      ],
      "line_start": 75,
      "line_end": 189,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        gap: 0,\n        justifyContent: 'space-between',\n        backgroundColor: isSelected ? 'accent.subtle' : 'transparent',\n        boxShadow: theme =>\n          isSelected\n            ? `inset 0 1px 0 ${theme.colors.accent.emphasis}, 0 1px 0 ${theme.colors.accent.emphasis}`\n            : 'none',\n        position: 'relative',\n        '&:hover, &:focus': {\n          backgroundColor: 'canvas.subtle',\n          '& .triangleDown': {opacity: 1},\n          '& .dragHandler': {opacity: 1},\n          '& .progressItem': {opacity: 1}\n        },\n        whiteSpace: 'nowrap',\n        width: '100%'\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          flexGrow: 1,\n          pl: 0,\n          overflow: 'hidden',\n          flexShrink: 1\n        }}\n      >\n        <Box\n          sx={{\n            flexGrow: 1,\n            display: 'flex',\n            gap: 2,\n            ml: 24,\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            lineHeight: 1,\n            overflow: 'hidden'\n          }}\n        >\n          <ItemIcon item={item} />\n          <Box\n            sx={{\n              display: 'flex',\n              flexGrow: 1,\n              borderBottom: '1px solid',\n              borderColor: 'border.muted',\n              gap: 2,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              overflow: 'hidden',\n              pr: 2,\n              py: 1\n            }}\n          >\n            <ItemTitle item={item} />\n            <ItemLocation item={item} />\n            {totalCount > 0 && (\n              <Button\n                variant=\"invisible\"\n                className=\"progressItem\"\n                aria-label={`${completedCount} of ${totalCount} completed`}\n                onClick={handleClick}\n                sx={{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}\n              >\n                <SubtaskProgress completed={completedCount} total={totalCount} />\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          gap: 2,\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted',\n          pr: 1,\n          flexShrink: 0\n        }}\n      >\n        <ItemLabels item={item} allowFiltering={false} />\n        <ItemAssignees item={item} />\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted'\n        }}\n      >\n        <Box\n          ref={contextMenuRef}\n          sx={{\n            opacity: 0,\n            pr: 1\n          }}\n          className=\"triangleDown\"\n        >\n          {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n        </Box>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          alignItems: 'center',\n          flexGrow: 1,\n          pl: 0,\n          overflow: 'hidden',\n          flexShrink: 1\n        }}"
        }
      ],
      "line_start": 96,
      "line_end": 155,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          flexGrow: 1,\n          pl: 0,\n          overflow: 'hidden',\n          flexShrink: 1\n        }}\n      >\n        <Box\n          sx={{\n            flexGrow: 1,\n            display: 'flex',\n            gap: 2,\n            ml: 24,\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            lineHeight: 1,\n            overflow: 'hidden'\n          }}\n        >\n          <ItemIcon item={item} />\n          <Box\n            sx={{\n              display: 'flex',\n              flexGrow: 1,\n              borderBottom: '1px solid',\n              borderColor: 'border.muted',\n              gap: 2,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              overflow: 'hidden',\n              pr: 2,\n              py: 1\n            }}\n          >\n            <ItemTitle item={item} />\n            <ItemLocation item={item} />\n            {totalCount > 0 && (\n              <Button\n                variant=\"invisible\"\n                className=\"progressItem\"\n                aria-label={`${completedCount} of ${totalCount} completed`}\n                onClick={handleClick}\n                sx={{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}\n              >\n                <SubtaskProgress completed={completedCount} total={totalCount} />\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            flexGrow: 1,\n            display: 'flex',\n            gap: 2,\n            ml: 24,\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            lineHeight: 1,\n            overflow: 'hidden'\n          }}"
        }
      ],
      "line_start": 106,
      "line_end": 154,
      "text": "<Box\n          sx={{\n            flexGrow: 1,\n            display: 'flex',\n            gap: 2,\n            ml: 24,\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            lineHeight: 1,\n            overflow: 'hidden'\n          }}\n        >\n          <ItemIcon item={item} />\n          <Box\n            sx={{\n              display: 'flex',\n              flexGrow: 1,\n              borderBottom: '1px solid',\n              borderColor: 'border.muted',\n              gap: 2,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              overflow: 'hidden',\n              pr: 2,\n              py: 1\n            }}\n          >\n            <ItemTitle item={item} />\n            <ItemLocation item={item} />\n            {totalCount > 0 && (\n              <Button\n                variant=\"invisible\"\n                className=\"progressItem\"\n                aria-label={`${completedCount} of ${totalCount} completed`}\n                onClick={handleClick}\n                sx={{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}\n              >\n                <SubtaskProgress completed={completedCount} total={totalCount} />\n              </Button>\n            )}\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              display: 'flex',\n              flexGrow: 1,\n              borderBottom: '1px solid',\n              borderColor: 'border.muted',\n              gap: 2,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              overflow: 'hidden',\n              pr: 2,\n              py: 1\n            }}"
        }
      ],
      "line_start": 119,
      "line_end": 153,
      "text": "<Box\n            sx={{\n              display: 'flex',\n              flexGrow: 1,\n              borderBottom: '1px solid',\n              borderColor: 'border.muted',\n              gap: 2,\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n              overflow: 'hidden',\n              pr: 2,\n              py: 1\n            }}\n          >\n            <ItemTitle item={item} />\n            <ItemLocation item={item} />\n            {totalCount > 0 && (\n              <Button\n                variant=\"invisible\"\n                className=\"progressItem\"\n                aria-label={`${completedCount} of ${totalCount} completed`}\n                onClick={handleClick}\n                sx={{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}\n              >\n                <SubtaskProgress completed={completedCount} total={totalCount} />\n              </Button>\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"progressItem\""
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`${completedCount} of ${totalCount} completed`}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleClick}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}"
        }
      ],
      "line_start": 136,
      "line_end": 151,
      "text": "\n              <Button\n                variant=\"invisible\"\n                className=\"progressItem\"\n                aria-label={`${completedCount} of ${totalCount} completed`}\n                onClick={handleClick}\n                sx={{\n                  p: 0,\n                  borderRadius: 3,\n                  transition: 'opacity 150ms ease-in-out',\n                  transitionDelay: '150ms',\n                  opacity: totalCount > 0 ? 1 : 0,\n                  '&:hover': {backgroundColor: 'transparent'}\n                }}\n              >\n                <SubtaskProgress completed={completedCount} total={totalCount} />\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          gap: 2,\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted',\n          pr: 1,\n          flexShrink: 0\n        }}"
        }
      ],
      "line_start": 156,
      "line_end": 169,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          gap: 2,\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted',\n          pr: 1,\n          flexShrink: 0\n        }}\n      >\n        <ItemLabels item={item} allowFiltering={false} />\n        <ItemAssignees item={item} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted'\n        }}"
        }
      ],
      "line_start": 170,
      "line_end": 188,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          borderBottom: '1px solid',\n          borderColor: 'border.muted'\n        }}\n      >\n        <Box\n          ref={contextMenuRef}\n          sx={{\n            opacity: 0,\n            pr: 1\n          }}\n          className=\"triangleDown\"\n        >\n          {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/hierarchy.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{contextMenuRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            opacity: 0,\n            pr: 1\n          }}"
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"triangleDown\""
        }
      ],
      "line_start": 178,
      "line_end": 187,
      "text": "<Box\n          ref={contextMenuRef}\n          sx={{\n            opacity: 0,\n            pr: 1\n          }}\n          className=\"triangleDown\"\n        >\n          {hasWritePermissions && <ItemMenu item={item} onRemoveItem={onRemoveItem} menuRef={contextMenuRef} />}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Overlay",
      "props": [
        {
          "name": "initialFocusRef",
          "kind": "JsxExpression",
          "text": "{initialFocusRef}"
        },
        {
          "name": "returnFocusRef",
          "kind": "JsxExpression",
          "text": "{returnFocusRef}"
        },
        {
          "name": "onEscape",
          "kind": "JsxExpression",
          "text": "{tryClosePane}"
        },
        {
          "name": "onClickOutside",
          "kind": "JsxExpression",
          "text": "{noop}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{preventShortcutBubbling}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"dialog\""
        },
        {
          "name": "aria-modal",
          "kind": "StringLiteral",
          "text": "\"true\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Item details\""
        }
      ],
      "line_start": 123,
      "line_end": 151,
      "text": "\n    <Overlay\n      initialFocusRef={initialFocusRef}\n      returnFocusRef={returnFocusRef}\n      onEscape={tryClosePane}\n      onClickOutside={noop}\n      onKeyDown={preventShortcutBubbling}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label=\"Item details\"\n    >\n      <Button\n        variant=\"invisible\"\n        onClick={tryClosePane}\n        aria-label=\"Close\"\n        sx={{\n          backgroundColor: 'primer.canvas.backdrop',\n          borderRadius: 0,\n          position: 'fixed',\n          left: 0,\n          bottom: 0,\n          width: '100vw',\n          top: siteHeaderHeight,\n          '&:hover:not([disabled]), &:focus:not([disabled])': {\n            backgroundColor: 'primer.canvas.backdrop'\n          }\n        }}\n      />\n      {content}\n    </Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef as React.RefObject<HTMLDivElement>}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        position: 'fixed',\n        top: siteHeaderHeight,\n        bottom: '0',\n        right: '0',\n        width: ['100%', '', width],\n        minWidth: '300px',\n        maxWidth: ['100%', '', '', 'min(90%, 1280px)'],\n        ':focus': {outline: 'none'},\n        overflowX: 'hidden',\n        overflowY: 'auto'\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('side-panel')}"
        }
      ],
      "line_start": 167,
      "line_end": 187,
      "text": "\n    <Box\n      ref={containerRef as React.RefObject<HTMLDivElement>}\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        position: 'fixed',\n        top: siteHeaderHeight,\n        bottom: '0',\n        right: '0',\n        width: ['100%', '', width],\n        minWidth: '300px',\n        maxWidth: ['100%', '', '', 'min(90%, 1280px)'],\n        ':focus': {outline: 'none'},\n        overflowX: 'hidden',\n        overflowY: 'auto'\n      }}\n      {...testIdProps('side-panel')}\n    >\n      {children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column', backgroundColor: 'canvas.default', width: '100%'}}"
        }
      ],
      "line_start": 235,
      "line_end": 268,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column', backgroundColor: 'canvas.default', width: '100%'}}>\n        <Box sx={{mt: 4, mx: [3, '', 4]}}>\n          <Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n            <Text sx={{fontWeight: '600', fontSize: 2}}>{title}</Text>\n            <IconButton\n              variant=\"invisible\"\n              icon={XIcon}\n              sx={{px: 2}}\n              onClick={onClose}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>\n\n          <ShortDescriptionEditor\n            onSaveStats={onSaveStatsShortDescription}\n            setHasUnsavedChanges={setHasUnsavedShortDescription}\n          />\n        </Box>\n        {(!hasWritePermissions && !!description) || hasWritePermissions ? (\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 'auto',\n              borderTop: '1px solid',\n              borderColor: 'border.muted',\n              padding: 4,\n              mt: 3\n            }}\n          >\n            <DescriptionEditor onSaveStats={onSaveStatsDescription} setHasUnsavedChanges={setHasUnsavedDescription} />\n          </Box>\n        ) : null}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 4, mx: [3, '', 4]}}"
        }
      ],
      "line_start": 236,
      "line_end": 252,
      "text": "<Box sx={{mt: 4, mx: [3, '', 4]}}>\n          <Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n            <Text sx={{fontWeight: '600', fontSize: 2}}>{title}</Text>\n            <IconButton\n              variant=\"invisible\"\n              icon={XIcon}\n              sx={{px: 2}}\n              onClick={onClose}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>\n\n          <ShortDescriptionEditor\n            onSaveStats={onSaveStatsShortDescription}\n            setHasUnsavedChanges={setHasUnsavedShortDescription}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 237,
      "line_end": 246,
      "text": "<Box sx={{display: 'flex', justifyContent: 'space-between'}}>\n            <Text sx={{fontWeight: '600', fontSize: 2}}>{title}</Text>\n            <IconButton\n              variant=\"invisible\"\n              icon={XIcon}\n              sx={{px: 2}}\n              onClick={onClose}\n              {...testIdProps('side-panel-button-close')}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: '600', fontSize: 2}}"
        }
      ],
      "line_start": 238,
      "line_end": 238,
      "text": "<Text sx={{fontWeight: '600', fontSize: 2}}>{title}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 'auto',\n              borderTop: '1px solid',\n              borderColor: 'border.muted',\n              padding: 4,\n              mt: 3\n            }}"
        }
      ],
      "line_start": 254,
      "line_end": 266,
      "text": "\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 'auto',\n              borderTop: '1px solid',\n              borderColor: 'border.muted',\n              padding: 4,\n              mt: 3\n            }}\n          >\n            <DescriptionEditor onSaveStats={onSaveStatsDescription} setHasUnsavedChanges={setHasUnsavedDescription} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      display: 'flex',\n      flex: 'auto',\n      flexDirection: ['column', '', '', 'row'],\n      backgroundColor: 'canvas.default',\n      justifyContent: 'stretch'\n    }}"
        }
      ],
      "line_start": 279,
      "line_end": 301,
      "text": "\n  <Box\n    sx={{\n      display: 'flex',\n      flex: 'auto',\n      flexDirection: ['column', '', '', 'row'],\n      backgroundColor: 'canvas.default',\n      justifyContent: 'stretch'\n    }}\n  >\n    <Box\n      sx={{\n        display: 'flex',\n        flex: 'auto',\n        flexDirection: 'column',\n        width: ['100%', '', '', '66%'],\n        mx: 'auto'\n      }}\n    >\n      <SidePanelBody item={item} isLoading={isLoading} fullHeight={!supportsComments} />\n      <SidePanelComments itemURL={item.getUrl()} />\n    </Box>\n    <SidePanelSidebar item={item} />\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flex: 'auto',\n        flexDirection: 'column',\n        width: ['100%', '', '', '66%'],\n        mx: 'auto'\n      }}"
        }
      ],
      "line_start": 288,
      "line_end": 299,
      "text": "<Box\n      sx={{\n        display: 'flex',\n        flex: 'auto',\n        flexDirection: 'column',\n        width: ['100%', '', '', '66%'],\n        mx: 'auto'\n      }}\n    >\n      <SidePanelBody item={item} isLoading={isLoading} fullHeight={!supportsComments} />\n      <SidePanelComments itemURL={item.getUrl()} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          position: 'relative',\n          backgroundColor: 'canvas.default',\n          height: '100%',\n          width: '100%',\n          flexGrow: 1,\n          zIndex: 2,\n          borderLeft: '1px solid',\n          borderColor: 'border.muted',\n          display: 'flex',\n          flexDirection: 'column'\n        }}"
        }
      ],
      "line_start": 378,
      "line_end": 410,
      "text": "<Box\n        sx={{\n          position: 'relative',\n          backgroundColor: 'canvas.default',\n          height: '100%',\n          width: '100%',\n          flexGrow: 1,\n          zIndex: 2,\n          borderLeft: '1px solid',\n          borderColor: 'border.muted',\n          display: 'flex',\n          flexDirection: 'column'\n        }}\n      >\n        <SidePanelHeader\n          initialFocusRef={initialFocusRef}\n          item={item}\n          isLoading={isLoading}\n          showTabs={showTabs}\n          selectedTab={selectedTab}\n          onTabChange={setSelectedTab}\n        />\n\n        {selectedTab === 'details' ? (\n          <SidePanelItemDetails item={item} supportsComments={comments !== undefined} isLoading={isLoading} />\n        ) : (\n          <SidePanelHierarchy\n            parentItem={item}\n            reloadParentChildren={reloadIssueHierarchy}\n            handleClick={handleClickItem}\n          />\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 33,
      "line_end": 33,
      "text": "<Text as=\"h2\">No items found</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 34,
      "line_end": 36,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n        {hasSearchInput ? Resources.noItemsInSearchResult : Resources.repoIsEmpty}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        }
      ],
      "line_start": 59,
      "line_end": 59,
      "text": "<Text as=\"h2\">No items found</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 60,
      "line_end": 64,
      "text": "<Text as=\"p\" sx={{color: 'fg.muted'}}>\n        Create a{' '}\n        <Link href={isOrganization ? `/orgs/${owner}/repositories` : `/${owner}?tab=repositories`}>repository</Link> to\n        get started.\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{isOrganization ? `/orgs/${owner}/repositories` : `/${owner}?tab=repositories`}"
        }
      ],
      "line_start": 62,
      "line_end": 62,
      "text": "<Link href={isOrganization ? `/orgs/${owner}/repositories` : `/${owner}?tab=repositories`}>repository</Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{ulStyles}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('side-panel-suggested-items')}"
        }
      ],
      "line_start": 92,
      "line_end": 146,
      "text": "\n    <Box sx={ulStyles} {...testIdProps('side-panel-suggested-items')}>\n      {loading ? (\n        <Loader />\n      ) : items?.length === 0 && finishedFetchingRepoItems && selectedRepo ? (\n        <NoSuggestedItems hasSearchInput={false} />\n      ) : selectedRepo ? (\n        <Box>\n          <Box\n            {...testIdProps('side-panel-suggested-items-header')}\n            sx={{borderBottom: '1px solid', borderColor: 'border.default', paddingBottom: 2, paddingTop: 3}}\n          >\n            <Box as=\"label\" sx={{pl: 1, pr: '10px'}} {...testIdProps('selection-all-items')}>\n              <Checkbox\n                sx={{alignSelf: 'start'}}\n                aria-labelledby=\"select-all-items\"\n                checked={areAllItemsSelected}\n                onChange={selectAllItems}\n              />\n            </Box>\n            <Text>\n              {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}\n            </Text>\n          </Box>\n          <Box as=\"ul\">\n            {items?.map(suggestedItem => {\n              const repoName = selectedRepo.nameWithOwner\n              return (\n                <SuggestedItem\n                  item={suggestedItem}\n                  // key is a reserved name in react and thus it is not passing this prop further\n                  // so we need a key for this render method and a keyName to pass it down to the children\n                  key={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  keyName={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  repoName={repoName}\n                  url={\n                    suggestedItem.type === ItemType.PullRequest\n                      ? `/${repoName}/pull/${suggestedItem.number}`\n                      : `/${repoName}/issues/${suggestedItem.number}`\n                  }\n                />\n              )\n            })}\n          </Box>\n          <Text\n            {...testIdProps('side-panel-suggested-items-footer')}\n            sx={{color: 'fg.muted', display: 'block', textAlign: 'center', paddingTop: 4, paddingBottom: 4}}\n          >\n            showing {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}. Use search to find any item in{' '}\n            {selectedRepo.nameWithOwner}\n          </Text>\n        </Box>\n      ) : (\n        <NoSuggestedRepos owner={owner} isOrganization={isOrganization} />\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Box",
      "props": [],
      "line_start": 98,
      "line_end": 142,
      "text": "\n        <Box>\n          <Box\n            {...testIdProps('side-panel-suggested-items-header')}\n            sx={{borderBottom: '1px solid', borderColor: 'border.default', paddingBottom: 2, paddingTop: 3}}\n          >\n            <Box as=\"label\" sx={{pl: 1, pr: '10px'}} {...testIdProps('selection-all-items')}>\n              <Checkbox\n                sx={{alignSelf: 'start'}}\n                aria-labelledby=\"select-all-items\"\n                checked={areAllItemsSelected}\n                onChange={selectAllItems}\n              />\n            </Box>\n            <Text>\n              {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}\n            </Text>\n          </Box>\n          <Box as=\"ul\">\n            {items?.map(suggestedItem => {\n              const repoName = selectedRepo.nameWithOwner\n              return (\n                <SuggestedItem\n                  item={suggestedItem}\n                  // key is a reserved name in react and thus it is not passing this prop further\n                  // so we need a key for this render method and a keyName to pass it down to the children\n                  key={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  keyName={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  repoName={repoName}\n                  url={\n                    suggestedItem.type === ItemType.PullRequest\n                      ? `/${repoName}/pull/${suggestedItem.number}`\n                      : `/${repoName}/issues/${suggestedItem.number}`\n                  }\n                />\n              )\n            })}\n          </Box>\n          <Text\n            {...testIdProps('side-panel-suggested-items-footer')}\n            sx={{color: 'fg.muted', display: 'block', textAlign: 'center', paddingTop: 4, paddingBottom: 4}}\n          >\n            showing {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}. Use search to find any item in{' '}\n            {selectedRepo.nameWithOwner}\n          </Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('side-panel-suggested-items-header')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{borderBottom: '1px solid', borderColor: 'border.default', paddingBottom: 2, paddingTop: 3}}"
        }
      ],
      "line_start": 99,
      "line_end": 114,
      "text": "<Box\n            {...testIdProps('side-panel-suggested-items-header')}\n            sx={{borderBottom: '1px solid', borderColor: 'border.default', paddingBottom: 2, paddingTop: 3}}\n          >\n            <Box as=\"label\" sx={{pl: 1, pr: '10px'}} {...testIdProps('selection-all-items')}>\n              <Checkbox\n                sx={{alignSelf: 'start'}}\n                aria-labelledby=\"select-all-items\"\n                checked={areAllItemsSelected}\n                onChange={selectAllItems}\n              />\n            </Box>\n            <Text>\n              {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}\n            </Text>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 1, pr: '10px'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('selection-all-items')}"
        }
      ],
      "line_start": 103,
      "line_end": 110,
      "text": "<Box as=\"label\" sx={{pl: 1, pr: '10px'}} {...testIdProps('selection-all-items')}>\n              <Checkbox\n                sx={{alignSelf: 'start'}}\n                aria-labelledby=\"select-all-items\"\n                checked={areAllItemsSelected}\n                onChange={selectAllItems}\n              />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [],
      "line_start": 111,
      "line_end": 113,
      "text": "<Text>\n              {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"ul\""
        }
      ],
      "line_start": 115,
      "line_end": 134,
      "text": "<Box as=\"ul\">\n            {items?.map(suggestedItem => {\n              const repoName = selectedRepo.nameWithOwner\n              return (\n                <SuggestedItem\n                  item={suggestedItem}\n                  // key is a reserved name in react and thus it is not passing this prop further\n                  // so we need a key for this render method and a keyName to pass it down to the children\n                  key={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  keyName={`${selectedRepo.nameWithOwner}-${suggestedItem.number}`}\n                  repoName={repoName}\n                  url={\n                    suggestedItem.type === ItemType.PullRequest\n                      ? `/${repoName}/pull/${suggestedItem.number}`\n                      : `/${repoName}/issues/${suggestedItem.number}`\n                  }\n                />\n              )\n            })}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/item-suggestions-list.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('side-panel-suggested-items-footer')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', display: 'block', textAlign: 'center', paddingTop: 4, paddingBottom: 4}}"
        }
      ],
      "line_start": 135,
      "line_end": 141,
      "text": "<Text\n            {...testIdProps('side-panel-suggested-items-footer')}\n            sx={{color: 'fg.muted', display: 'block', textAlign: 'center', paddingTop: 4, paddingBottom: 4}}\n          >\n            showing {items?.length} most recent {items?.length === 1 ? 'item' : 'items'}. Use search to find any item in{' '}\n            {selectedRepo.nameWithOwner}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"figure\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{m: 0}}"
        }
      ],
      "line_start": 28,
      "line_end": 31,
      "text": "\n    <Box as=\"figure\" sx={{m: 0}}>\n      <figcaption style={{position: 'absolute', clipPath: 'circle(0)'}}>Item status</figcaption>\n      {label}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"issueDraft\""
        }
      ],
      "line_start": 35,
      "line_end": 35,
      "text": " <StateLabel status=\"issueDraft\">Draft</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"issueOpened\""
        }
      ],
      "line_start": 39,
      "line_end": 39,
      "text": "\n    <StateLabel status=\"issueOpened\">Open</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"draft\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{'& > svg:first-child': {visibility: 'hidden', position: 'absolute'}}}"
        }
      ],
      "line_start": 41,
      "line_end": 44,
      "text": "\n    <StateLabel status=\"draft\" sx={{'& > svg:first-child': {visibility: 'hidden', position: 'absolute'}}}>\n      <SkipIcon />\n      <Text sx={{pl: 1}}>Closed</Text>\n    </StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 1}}"
        }
      ],
      "line_start": 43,
      "line_end": 43,
      "text": "<Text sx={{pl: 1}}>Closed</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"issueClosed\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{bg: 'done.fg'}}"
        }
      ],
      "line_start": 46,
      "line_end": 48,
      "text": "\n    <StateLabel status=\"issueClosed\" sx={{bg: 'done.fg'}}>\n      Closed\n    </StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"draft\""
        }
      ],
      "line_start": 53,
      "line_end": 53,
      "text": "\n    <StateLabel status=\"draft\">Draft</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"pullOpened\""
        }
      ],
      "line_start": 55,
      "line_end": 55,
      "text": "\n    <StateLabel status=\"pullOpened\">Open</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"pullClosed\""
        }
      ],
      "line_start": 57,
      "line_end": 57,
      "text": "\n    <StateLabel status=\"pullClosed\">Closed</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/label.tsx",
      "name": "StateLabel",
      "props": [
        {
          "name": "status",
          "kind": "StringLiteral",
          "text": "\"pullMerged\""
        }
      ],
      "line_start": 59,
      "line_end": 59,
      "text": "\n    <StateLabel status=\"pullMerged\">Merged</StateLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "Box",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"toolbar\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Reactions\""
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef as React.RefObject<HTMLDivElement>}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('reactions-toolbar')}"
        }
      ],
      "line_start": 32,
      "line_end": 51,
      "text": "\n    <Box\n      role=\"toolbar\"\n      aria-label=\"Reactions\"\n      ref={containerRef as React.RefObject<HTMLDivElement>}\n      sx={{display: 'flex', gap: 1}}\n      {...testIdProps('reactions-toolbar')}\n    >\n      {!disabled && <ReactionsMenu onReact={onReact} reactedReactions={reactedReactions} />}\n\n      {reactionEntries.map(([reaction, reactedUsers]) => (\n        <ReactionButton\n          reaction={reaction}\n          reactedUsers={reactedUsers}\n          key={reaction}\n          reacted={reactedReactions.has(reaction)}\n          onClick={() => onReact(reaction)}\n          disabled={disabled}\n        />\n      ))}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{() => setOpen(true)}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{() => setOpen(false)}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        },
        {
          "name": "focusZoneSettings",
          "kind": "JsxExpression",
          "text": "{{\n        bindKeys: FocusKeys.ArrowAll | FocusKeys.HomeAndEnd,\n        focusOutBehavior: 'wrap'\n      }}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{p => (\n        <IconButton\n          size=\"small\"\n          sx={{\n            borderRadius: '50%',\n            height: 28,\n            width: 28,\n            '& > span': {\n              ml: '-1px'\n            }\n          }}\n          icon={SmileyIcon}\n          aria-label=\"All reactions\"\n          {...testIdProps('all-reactions-button')}\n          {...p}\n        />\n      )}"
        }
      ],
      "line_start": 69,
      "line_end": 129,
      "text": "\n    <AnchoredOverlay\n      open={isOpen}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      anchorRef={containerRef}\n      focusZoneSettings={{\n        bindKeys: FocusKeys.ArrowAll | FocusKeys.HomeAndEnd,\n        focusOutBehavior: 'wrap'\n      }}\n      renderAnchor={p => (\n        <IconButton\n          size=\"small\"\n          sx={{\n            borderRadius: '50%',\n            height: 28,\n            width: 28,\n            '& > span': {\n              ml: '-1px'\n            }\n          }}\n          icon={SmileyIcon}\n          aria-label=\"All reactions\"\n          {...testIdProps('all-reactions-button')}\n          {...p}\n        />\n      )}\n    >\n      <ActionList\n        sx={{display: 'flex', flexDirection: 'row', p: 1, gap: 1}}\n        role=\"menu\"\n        aria-orientation=\"horizontal\"\n        {...testIdProps('reactions-overlay')}\n      >\n        {Object.values(ReactionEmotion).map(emotion => (\n          <ActionList.Item\n            key={emotion}\n            sx={{\n              '&:hover': {\n                backgroundColor: 'accent.emphasis'\n              },\n              py: 1,\n              px: 2,\n              m: 0,\n              backgroundColor: reactedReactions.has(emotion) ? 'accent.subtle' : 'transparent'\n            }}\n            role=\"menuitemcheckbox\"\n            aria-checked={reactedReactions.has(emotion)}\n            onClick={() => react(emotion)}\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.stopPropagation()\n                react(emotion)\n              }\n            }}\n            {...testIdProps(`all-reactions-${emotion}-reaction-button`)}\n          >\n            {getReactionEmoji(emotion)}\n          </ActionList.Item>\n        ))}\n      </ActionList>\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', p: 1, gap: 1}}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"menu\""
        },
        {
          "name": "aria-orientation",
          "kind": "StringLiteral",
          "text": "\"horizontal\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('reactions-overlay')}"
        }
      ],
      "line_start": 96,
      "line_end": 128,
      "text": "<ActionList\n        sx={{display: 'flex', flexDirection: 'row', p: 1, gap: 1}}\n        role=\"menu\"\n        aria-orientation=\"horizontal\"\n        {...testIdProps('reactions-overlay')}\n      >\n        {Object.values(ReactionEmotion).map(emotion => (\n          <ActionList.Item\n            key={emotion}\n            sx={{\n              '&:hover': {\n                backgroundColor: 'accent.emphasis'\n              },\n              py: 1,\n              px: 2,\n              m: 0,\n              backgroundColor: reactedReactions.has(emotion) ? 'accent.subtle' : 'transparent'\n            }}\n            role=\"menuitemcheckbox\"\n            aria-checked={reactedReactions.has(emotion)}\n            onClick={() => react(emotion)}\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.stopPropagation()\n                react(emotion)\n              }\n            }}\n            {...testIdProps(`all-reactions-${emotion}-reaction-button`)}\n          >\n            {getReactionEmoji(emotion)}\n          </ActionList.Item>\n        ))}\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{emotion}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              '&:hover': {\n                backgroundColor: 'accent.emphasis'\n              },\n              py: 1,\n              px: 2,\n              m: 0,\n              backgroundColor: reactedReactions.has(emotion) ? 'accent.subtle' : 'transparent'\n            }}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"menuitemcheckbox\""
        },
        {
          "name": "aria-checked",
          "kind": "JsxExpression",
          "text": "{reactedReactions.has(emotion)}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => react(emotion)}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.stopPropagation()\n                react(emotion)\n              }\n            }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps(`all-reactions-${emotion}-reaction-button`)}"
        }
      ],
      "line_start": 103,
      "line_end": 126,
      "text": "\n          <ActionList.Item\n            key={emotion}\n            sx={{\n              '&:hover': {\n                backgroundColor: 'accent.emphasis'\n              },\n              py: 1,\n              px: 2,\n              m: 0,\n              backgroundColor: reactedReactions.has(emotion) ? 'accent.subtle' : 'transparent'\n            }}\n            role=\"menuitemcheckbox\"\n            aria-checked={reactedReactions.has(emotion)}\n            onClick={() => react(emotion)}\n            onKeyDown={e => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.stopPropagation()\n                react(emotion)\n              }\n            }}\n            {...testIdProps(`all-reactions-${emotion}-reaction-button`)}\n          >\n            {getReactionEmoji(emotion)}\n          </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{summarizeReactions(reactedUsers)}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"presentation\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: '100%'}}"
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"ne\""
        },
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"left\""
        }
      ],
      "line_start": 149,
      "line_end": 179,
      "text": "\n    <Tooltip\n      aria-label={summarizeReactions(reactedUsers)}\n      role=\"presentation\"\n      sx={{maxWidth: '100%'}}\n      wrap={true}\n      direction=\"ne\"\n      align=\"left\"\n    >\n      <Button\n        size=\"small\"\n        sx={{\n          '&:hover:not([disabled])': {\n            backgroundColor: 'accent.muted'\n          },\n          backgroundColor: reacted ? 'accent.subtle' : 'transparent',\n          borderColor: reacted ? `accent.emphasis` : 'border.default',\n          borderRadius: 20,\n          px: 2,\n          shadow: 'none'\n        }}\n        aria-label={label}\n        role=\"switch\"\n        aria-checked={reacted}\n        leadingIcon={() => getReactionEmoji(reaction)}\n        {...testIdProps(`${reaction}-reaction-button`)}\n        onClick={onClick}\n        disabled={disabled}\n      >\n        {reactedUsers.length}\n      </Button>\n    </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/reactions.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          '&:hover:not([disabled])': {\n            backgroundColor: 'accent.muted'\n          },\n          backgroundColor: reacted ? 'accent.subtle' : 'transparent',\n          borderColor: reacted ? `accent.emphasis` : 'border.default',\n          borderRadius: 20,\n          px: 2,\n          shadow: 'none'\n        }}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{label}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"switch\""
        },
        {
          "name": "aria-checked",
          "kind": "JsxExpression",
          "text": "{reacted}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{() => getReactionEmoji(reaction)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`${reaction}-reaction-button`)}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        }
      ],
      "line_start": 157,
      "line_end": 178,
      "text": "<Button\n        size=\"small\"\n        sx={{\n          '&:hover:not([disabled])': {\n            backgroundColor: 'accent.muted'\n          },\n          backgroundColor: reacted ? 'accent.subtle' : 'transparent',\n          borderColor: reacted ? `accent.emphasis` : 'border.default',\n          borderRadius: 20,\n          px: 2,\n          shadow: 'none'\n        }}\n        aria-label={label}\n        role=\"switch\"\n        aria-checked={reacted}\n        leadingIcon={() => getReactionEmoji(reaction)}\n        {...testIdProps(`${reaction}-reaction-button`)}\n        onClick={onClick}\n        disabled={disabled}\n      >\n        {reactedUsers.length}\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/repo-suggestions.tsx",
      "name": "Button",
      "props": [
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{hasFetchedRepos && !selected}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{selected?.leadingVisual}"
        },
        {
          "name": "trailingIcon",
          "kind": "JsxExpression",
          "text": "{TriangleDownIcon}"
        },
        {
          "name": "aria-labelledby",
          "kind": "JsxExpression",
          "text": "{`${ariaLabelledBy}`}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...anchorProps}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('repo-suggestions-button')}"
        }
      ],
      "line_start": 143,
      "line_end": 153,
      "text": "\n        <Button\n          disabled={hasFetchedRepos && !selected}\n          leadingIcon={selected?.leadingVisual}\n          trailingIcon={TriangleDownIcon}\n          aria-labelledby={`${ariaLabelledBy}`}\n          {...anchorProps}\n          {...testIdProps('repo-suggestions-button')}\n        >\n          {/* eslint-disable-next-line i18n-text/no-en */}\n          {children || 'Select Repo'}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        borderRadius: 2,\n        textAlign: 'left',\n        borderWidth: '1px',\n        p: 3,\n        mb: 2,\n        lineHeight: 1.3,\n        backgroundColor: isSelected ? 'accent.subtle' : 'canvas.default',\n        borderStyle: 'solid',\n        borderColor: isSelected ? 'accent.emphasis' : 'border.muted',\n        boxShadow: 'shadow.medium',\n        color: 'fg.default',\n        width: '100%',\n        '&:hover, &:focus:not(:focus-visible):not(.focus-visible), &:active': {\n          cursor: 'pointer',\n          backgroundColor: isSelected ? 'accent.subtle' : 'canvas.subtle',\n          boxShadow: 'shadow.medium'\n        },\n        gap: 1,\n        display: 'flex',\n        flexDirection: 'column'\n      }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleClick}"
        }
      ],
      "line_start": 19,
      "line_end": 51,
      "text": "\n    <Box\n      as=\"button\"\n      type=\"button\"\n      sx={{\n        borderRadius: 2,\n        textAlign: 'left',\n        borderWidth: '1px',\n        p: 3,\n        mb: 2,\n        lineHeight: 1.3,\n        backgroundColor: isSelected ? 'accent.subtle' : 'canvas.default',\n        borderStyle: 'solid',\n        borderColor: isSelected ? 'accent.emphasis' : 'border.muted',\n        boxShadow: 'shadow.medium',\n        color: 'fg.default',\n        width: '100%',\n        '&:hover, &:focus:not(:focus-visible):not(.focus-visible), &:active': {\n          cursor: 'pointer',\n          backgroundColor: isSelected ? 'accent.subtle' : 'canvas.subtle',\n          boxShadow: 'shadow.medium'\n        },\n        gap: 1,\n        display: 'flex',\n        flexDirection: 'column'\n      }}\n      onClick={handleClick}\n    >\n      <Box sx={{display: 'flex', gap: 1, alignItems: 'center', flexDirection: 'row'}}>\n        <ItemIcon item={item} />\n        <ItemLocation item={item} />\n      </Box>\n      <SanitizedHtmlSpan>{item.getTitle()}</SanitizedHtmlSpan>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 1, alignItems: 'center', flexDirection: 'row'}}"
        }
      ],
      "line_start": 46,
      "line_end": 49,
      "text": "<Box sx={{display: 'flex', gap: 1, alignItems: 'center', flexDirection: 'row'}}>\n        <ItemIcon item={item} />\n        <ItemLocation item={item} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          flexShrink: 0,\n          width: '100%',\n          backgroundColor: 'canvas.inset',\n          borderLeft: '1px solid',\n          borderLeftColor: 'border.muted',\n          height: '100%'\n        }}"
        }
      ],
      "line_start": 72,
      "line_end": 147,
      "text": "\n      <Box\n        sx={{\n          flexShrink: 0,\n          width: '100%',\n          backgroundColor: 'canvas.inset',\n          borderLeft: '1px solid',\n          borderLeftColor: 'border.muted',\n          height: '100%'\n        }}\n      >\n        <Box sx={{display: 'flex', justifyContent: 'space-between', px: 2, py: 2}}>\n          <Box sx={{display: 'flex', gap: 1, width: '100%', overflow: 'hidden'}}>\n            <Button\n              size=\"small\"\n              variant=\"invisible\"\n              sx={{\n                color: 'fg.muted',\n                px: 2,\n                fontWeight: 'normal',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'center',\n                overflow: 'hidden',\n                '[data-component=\"text\"]': {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden'\n                }\n              }}\n              onClick={() => (ancestors.length > 0 ? onClickAncestor(ancestors.length - 1) : onClosePane())}\n              leadingIcon={ArrowLeftIcon}\n              title={ancestors[ancestors.length - 1].item.getTitle()}\n            >\n              {ancestors[ancestors.length - 1].item.getTitle()}\n            </Button>\n            {ancestors.length > 1 ? (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={TriangleDownIcon}\n                    size=\"small\"\n                    variant=\"invisible\"\n                    sx={{\n                      px: 2,\n                      color: 'fg.default'\n                    }}\n                  />\n                </ActionMenu.Anchor>\n\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            ) : null}\n          </Box>\n        </Box>\n        <Box sx={{px: 2, height: '100%', overflowY: 'auto', display: 'flex', flexDirection: 'column'}}>\n          {items.map((item: SidePanelItem, index: number) => (\n            <Card\n              handleClick={() => onClickSibling(item)}\n              key={index}\n              item={item}\n              isSelected={sidePanelState.item.id === item.itemId()}\n            />\n          ))}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between', px: 2, py: 2}}"
        }
      ],
      "line_start": 82,
      "line_end": 136,
      "text": "<Box sx={{display: 'flex', justifyContent: 'space-between', px: 2, py: 2}}>\n          <Box sx={{display: 'flex', gap: 1, width: '100%', overflow: 'hidden'}}>\n            <Button\n              size=\"small\"\n              variant=\"invisible\"\n              sx={{\n                color: 'fg.muted',\n                px: 2,\n                fontWeight: 'normal',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'center',\n                overflow: 'hidden',\n                '[data-component=\"text\"]': {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden'\n                }\n              }}\n              onClick={() => (ancestors.length > 0 ? onClickAncestor(ancestors.length - 1) : onClosePane())}\n              leadingIcon={ArrowLeftIcon}\n              title={ancestors[ancestors.length - 1].item.getTitle()}\n            >\n              {ancestors[ancestors.length - 1].item.getTitle()}\n            </Button>\n            {ancestors.length > 1 ? (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={TriangleDownIcon}\n                    size=\"small\"\n                    variant=\"invisible\"\n                    sx={{\n                      px: 2,\n                      color: 'fg.default'\n                    }}\n                  />\n                </ActionMenu.Anchor>\n\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            ) : null}\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 1, width: '100%', overflow: 'hidden'}}"
        }
      ],
      "line_start": 83,
      "line_end": 135,
      "text": "<Box sx={{display: 'flex', gap: 1, width: '100%', overflow: 'hidden'}}>\n            <Button\n              size=\"small\"\n              variant=\"invisible\"\n              sx={{\n                color: 'fg.muted',\n                px: 2,\n                fontWeight: 'normal',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'center',\n                overflow: 'hidden',\n                '[data-component=\"text\"]': {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden'\n                }\n              }}\n              onClick={() => (ancestors.length > 0 ? onClickAncestor(ancestors.length - 1) : onClosePane())}\n              leadingIcon={ArrowLeftIcon}\n              title={ancestors[ancestors.length - 1].item.getTitle()}\n            >\n              {ancestors[ancestors.length - 1].item.getTitle()}\n            </Button>\n            {ancestors.length > 1 ? (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={TriangleDownIcon}\n                    size=\"small\"\n                    variant=\"invisible\"\n                    sx={{\n                      px: 2,\n                      color: 'fg.default'\n                    }}\n                  />\n                </ActionMenu.Anchor>\n\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            ) : null}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                color: 'fg.muted',\n                px: 2,\n                fontWeight: 'normal',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'center',\n                overflow: 'hidden',\n                '[data-component=\"text\"]': {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden'\n                }\n              }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => (ancestors.length > 0 ? onClickAncestor(ancestors.length - 1) : onClosePane())}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{ArrowLeftIcon}"
        },
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{ancestors[ancestors.length - 1].item.getTitle()}"
        }
      ],
      "line_start": 84,
      "line_end": 105,
      "text": "<Button\n              size=\"small\"\n              variant=\"invisible\"\n              sx={{\n                color: 'fg.muted',\n                px: 2,\n                fontWeight: 'normal',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'center',\n                overflow: 'hidden',\n                '[data-component=\"text\"]': {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden'\n                }\n              }}\n              onClick={() => (ancestors.length > 0 ? onClickAncestor(ancestors.length - 1) : onClosePane())}\n              leadingIcon={ArrowLeftIcon}\n              title={ancestors[ancestors.length - 1].item.getTitle()}\n            >\n              {ancestors[ancestors.length - 1].item.getTitle()}\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 107,
      "line_end": 133,
      "text": "\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={TriangleDownIcon}\n                    size=\"small\"\n                    variant=\"invisible\"\n                    sx={{\n                      px: 2,\n                      color: 'fg.default'\n                    }}\n                  />\n                </ActionMenu.Anchor>\n\n                <ActionMenu.Overlay>\n                  <ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 108,
      "line_end": 118,
      "text": "<ActionMenu.Anchor>\n                  <IconButton\n                    icon={TriangleDownIcon}\n                    size=\"small\"\n                    variant=\"invisible\"\n                    sx={{\n                      px: 2,\n                      color: 'fg.default'\n                    }}\n                  />\n                </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 120,
      "line_end": 132,
      "text": "<ActionMenu.Overlay>\n                  <ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>\n                </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 121,
      "line_end": 131,
      "text": "<ActionList>\n                    {ancestors.map((ancestor, index) => (\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>\n                    ))}\n                  </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => onClickAncestor(index)}"
        }
      ],
      "line_start": 123,
      "line_end": 129,
      "text": "\n                      <ActionList.Item key={index} onSelect={() => onClickAncestor(index)}>\n                        <ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>\n                        {ancestor.item.getTitle()}\n                        <ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>\n                      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 124,
      "line_end": 126,
      "text": "<ActionList.LeadingVisual>\n                          <ItemIcon item={ancestor.item} />\n                        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 128,
      "line_end": 128,
      "text": "<ActionList.TrailingVisual>#{ancestor.id}</ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/siblings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 2, height: '100%', overflowY: 'auto', display: 'flex', flexDirection: 'column'}}"
        }
      ],
      "line_start": 137,
      "line_end": 146,
      "text": "<Box sx={{px: 2, height: '100%', overflowY: 'auto', display: 'flex', flexDirection: 'column'}}>\n          {items.map((item: SidePanelItem, index: number) => (\n            <Card\n              handleClick={() => onClickSibling(item)}\n              key={index}\n              item={item}\n              isSelected={sidePanelState.item.id === item.itemId()}\n            />\n          ))}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{keyName}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"li\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{listItemStyles}"
        }
      ],
      "line_start": 45,
      "line_end": 47,
      "text": "\n    <Box key={keyName} ref={ref} as=\"li\" sx={listItemStyles}>\n      {isVisible ? <SuggestedItemInner keyName={keyName} item={item} repoName={repoName} url={url} /> : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('repo-item')}"
        }
      ],
      "line_start": 62,
      "line_end": 69,
      "text": "<Box as=\"label\" sx={{pl: 1}} {...testIdProps('repo-item')}>\n        <Checkbox\n          sx={{alignSelf: 'start'}}\n          aria-labelledby={itemTitleId}\n          checked={isSelected(item.number)}\n          onChange={onCheck}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pl: 2}}"
        }
      ],
      "line_start": 70,
      "line_end": 77,
      "text": "<Box sx={{pl: 2}}>\n        <ItemState\n          type={item.type}\n          state={item.state}\n          stateReason={(item as SuggestedIssue)?.stateReason}\n          isDraft={!!(item as SuggestedPullRequest).isDraft}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 2, display: 'flex', flex: '1', justifyContent: 'flex-start', width: '100%', minWidth: '0'}}"
        }
      ],
      "line_start": 78,
      "line_end": 93,
      "text": "<Box sx={{p: 2, display: 'flex', flex: '1', justifyContent: 'flex-start', width: '100%', minWidth: '0'}}>\n        <Box\n          as=\"span\"\n          id={itemTitleId}\n          sx={{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}\n        >\n          <LinkGrayDark target=\"_blank\" rel=\"noreferrer\" href={url} tabIndex={-1}>\n            <SanitizedHtmlSpan>{item.title}</SanitizedHtmlSpan>\n          </LinkGrayDark>\n        </Box>\n        <Text sx={{ml: 2, color: 'fg.muted'}}>{`${repoName}#${item.number}`}</Text>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"span\""
        },
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{itemTitleId}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}"
        }
      ],
      "line_start": 79,
      "line_end": 91,
      "text": "<Box\n          as=\"span\"\n          id={itemTitleId}\n          sx={{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap'\n          }}\n        >\n          <LinkGrayDark target=\"_blank\" rel=\"noreferrer\" href={url} tabIndex={-1}>\n            <SanitizedHtmlSpan>{item.title}</SanitizedHtmlSpan>\n          </LinkGrayDark>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/suggested-item.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2, color: 'fg.muted'}}"
        }
      ],
      "line_start": 92,
      "line_end": 92,
      "text": "<Text sx={{ml: 2, color: 'fg.muted'}}>{`${repoName}#${item.number}`}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Dialog",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"alertdialog\""
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{handleClose}"
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Select a template\""
        },
        {
          "name": "renderBody",
          "kind": "JsxExpression",
          "text": "{TemplateDialogBody}"
        },
        {
          "name": "renderFooter",
          "kind": "JsxExpression",
          "text": "{TemplateDialogFooter}"
        },
        {
          "name": "footerButtons",
          "kind": "JsxExpression",
          "text": "{[\n            {\n              content: (\n                <span {...testIdProps('template-dialog-button')}>{isLoading ? 'Loading template...' : 'Create'}</span>\n              ),\n              onClick: handleClick,\n              buttonType: 'primary'\n            }\n          ]}"
        }
      ],
      "line_start": 94,
      "line_end": 153,
      "text": "\n        <Dialog\n          role=\"alertdialog\"\n          onClose={handleClose}\n          title=\"Select a template\"\n          renderBody={TemplateDialogBody}\n          renderFooter={TemplateDialogFooter}\n          footerButtons={[\n            {\n              content: (\n                <span {...testIdProps('template-dialog-button')}>{isLoading ? 'Loading template...' : 'Create'}</span>\n              ),\n              onClick: handleClick,\n              buttonType: 'primary'\n            }\n          ]}\n        >\n          <ContentContainer>\n            <SelectionPanelParent>\n              <ActionList>\n                {sidePanelGroups.map(group => {\n                  return (\n                    <StyledActionListGroup title={group.groupTitle} key={group.groupTitle}>\n                      {group.items.map(item => {\n                        const ItemIcon = item.icon\n                        const selected = currentSelection === item.key\n                        return (\n                          <StyledActionItem\n                            className={selected ? 'selected' : ''}\n                            onSelect={() => handleSelect(item)}\n                            key={item.key}\n                            {...testIdProps(`template-dialog-action-item-${item.key}`)}\n                          >\n                            <ActionList.LeadingVisual>\n                              <ItemIcon />\n                            </ActionList.LeadingVisual>\n                            {toTitleCase(item.title)}\n                          </StyledActionItem>\n                        )\n                      })}\n                    </StyledActionListGroup>\n                  )\n                })}\n              </ActionList>\n            </SelectionPanelParent>\n            <InfoPanelParent>\n              <Text as=\"h3\" sx={{mb: 2}}>\n                {infoContentMap[currentSelection].title}\n              </Text>\n              <img\n                {...testIdProps('template-dialog-image')}\n                src={templateImageSelector(currentSelection, darkMode)}\n                alt={infoContentMap[currentSelection].description}\n                width=\"100%\"\n              />\n              <Text as=\"p\" sx={{mt: 2}}>\n                {infoContentMap[currentSelection].description}\n              </Text>\n            </InfoPanelParent>\n          </ContentContainer>\n        </Dialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 112,
      "line_end": 136,
      "text": "<ActionList>\n                {sidePanelGroups.map(group => {\n                  return (\n                    <StyledActionListGroup title={group.groupTitle} key={group.groupTitle}>\n                      {group.items.map(item => {\n                        const ItemIcon = item.icon\n                        const selected = currentSelection === item.key\n                        return (\n                          <StyledActionItem\n                            className={selected ? 'selected' : ''}\n                            onSelect={() => handleSelect(item)}\n                            key={item.key}\n                            {...testIdProps(`template-dialog-action-item-${item.key}`)}\n                          >\n                            <ActionList.LeadingVisual>\n                              <ItemIcon />\n                            </ActionList.LeadingVisual>\n                            {toTitleCase(item.title)}\n                          </StyledActionItem>\n                        )\n                      })}\n                    </StyledActionListGroup>\n                  )\n                })}\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 126,
      "line_end": 128,
      "text": "<ActionList.LeadingVisual>\n                              <ItemIcon />\n                            </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h3\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 2}}"
        }
      ],
      "line_start": 139,
      "line_end": 141,
      "text": "<Text as=\"h3\" sx={{mb: 2}}>\n                {infoContentMap[currentSelection].title}\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"p\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 2}}"
        }
      ],
      "line_start": 148,
      "line_end": 150,
      "text": "<Text as=\"p\" sx={{mt: 2}}>\n                {infoContentMap[currentSelection].description}\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Box",
      "line_start": 159,
      "line_end": 159,
      "text": " styled(Box)`\n  display: flex;\n  flex-direction: row;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Box",
      "line_start": 164,
      "line_end": 164,
      "text": " styled(Box)`\n  width: 30%;\n  box-shadow: 1px 0 0 ${themeGet('colors.border.default')};\n  padding-right: ${themeGet('space.4')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Box",
      "line_start": 170,
      "line_end": 170,
      "text": " styled(Box)`\n  width: 70%;\n  min-height: 360px;\n  padding-left: ${themeGet('space.4')};\n  padding-right: ${themeGet('space.4')};\n  padding-bottom: ${themeGet('space.2')};\n  padding-top: ${themeGet('space.2')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Box",
      "line_start": 179,
      "line_end": 179,
      "text": " styled(Box)`\n  flex-direction: row;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "Box",
      "line_start": 183,
      "line_end": 183,
      "text": " styled(Box)`\n  display: flex;\n  justify-content: flex-end;\n  padding: ${themeGet('space.3')};\n  padding-right: ${themeGet('space.4')};\n  box-shadow: 0 -1px 0 ${themeGet('colors.border.default')};\n\n  button > * {\n    pointer-events: none;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "ActionList",
      "line_start": 195,
      "line_end": 195,
      "text": " styled(ActionList.Group)`\n  &:not(:last-child) {\n    margin-bottom: ${themeGet('space.3')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/template-dialog/template-dialog.tsx",
      "name": "ActionList",
      "line_start": 201,
      "line_end": 201,
      "text": " styled(ActionList.Item)`\n  position: relative;\n  margin-bottom: ${themeGet('space.2')};\n  margin-left: 12px;\n\n  &.selected {\n    background-color: ${themeGet('colors.neutral.muted')};\n  }\n\n  &.selected:after {\n    content: '';\n    position: absolute;\n    top: calc(50% - 12px);\n    left: -${themeGet('space.2')};\n    width: ${themeGet('space.1')};\n    height: 24px;\n    background-color: ${themeGet('colors.accent.emphasis')};\n    border-radius: 6px;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 1, mx: 2, my: 3, color: 'fg.onEmphasis'}}"
        }
      ],
      "line_start": 164,
      "line_end": 164,
      "text": "<Text sx={{fontSize: 1, mx: 2, my: 3, color: 'fg.onEmphasis'}}>{toast.message}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/toasts/toast.tsx",
      "name": "Box",
      "line_start": 73,
      "line_end": 73,
      "text": " styled(Box)`\n  flex-shrink: 0;\n  padding: ${themeGet('space.3')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"title-github-projects\""
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"GitHub projects\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"subtle\""
        }
      ],
      "line_start": 150,
      "line_end": 178,
      "text": "\n      <ActionList.Group key=\"title-github-projects\" title=\"GitHub projects\" variant=\"subtle\">\n        <CustomLink\n          key=\"new\"\n          to=\"https://github.blog/changelog/label/issues/\"\n          icon={RocketIcon}\n          text=\"What’s new\"\n          onClick={openChangelog}\n          useSimpleLink\n          testId=\"whats-new-link\"\n        />\n        <CustomLink\n          key=\"feedback\"\n          to={feedbackLink}\n          icon={CommentIcon}\n          text=\"Give feedback\"\n          onClick={openFeedback}\n          useSimpleLink\n          testId=\"feedback-link\"\n        />\n        <CustomLink\n          key=\"docs\"\n          to=\"https://docs.github.com/en/issues/trying-out-the-new-projects-experience\"\n          icon={BookIcon}\n          text=\"GitHub Docs\"\n          onClick={openDocs}\n          useSimpleLink\n          testId=\"docs-link\"\n        />\n      </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"project-insights-button\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{(event: React.MouseEvent<HTMLButtonElement>) => {\n            postInsightsViewOpenStats()\n            handleInsightsClick(event)\n          }}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('project-insights-button')}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...disabledNavigationButtonProps}"
        }
      ],
      "line_start": 213,
      "line_end": 230,
      "text": "\n        <Button\n          key=\"project-insights-button\"\n          onClick={(event: React.MouseEvent<HTMLButtonElement>) => {\n            postInsightsViewOpenStats()\n            handleInsightsClick(event)\n          }}\n          sx={{p: 0}}\n          {...testIdProps('project-insights-button')}\n          {...disabledNavigationButtonProps}\n        >\n          <Tooltip\n            aria-label=\"Insights\"\n            sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n            direction=\"s\"\n          >\n            <StyledOcticon icon={GraphIcon} sx={{color: 'fg.default'}} />\n          </Tooltip>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Insights\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"s\""
        }
      ],
      "line_start": 223,
      "line_end": 229,
      "text": "<Tooltip\n            aria-label=\"Insights\"\n            sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n            direction=\"s\"\n          >\n            <StyledOcticon icon={GraphIcon} sx={{color: 'fg.default'}} />\n          </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"project-description-button\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => {\n            postStats({\n              name: ProjectDescriptionShow,\n              ui: ProjectDescriptionSidePanelUI\n            })\n            openPaneInfo()\n          }}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...disabledNavigationButtonProps}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('project-memex-info-button')}"
        }
      ],
      "line_start": 236,
      "line_end": 256,
      "text": "\n        <Button\n          key=\"project-description-button\"\n          onClick={() => {\n            postStats({\n              name: ProjectDescriptionShow,\n              ui: ProjectDescriptionSidePanelUI\n            })\n            openPaneInfo()\n          }}\n          sx={{p: 0}}\n          {...disabledNavigationButtonProps}\n          {...testIdProps('project-memex-info-button')}\n        >\n          <Tooltip\n            aria-label=\"Project details\"\n            sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n            direction=\"sw\"\n          >\n            <StyledOcticon icon={SidebarExpandIcon} sx={{color: 'fg.default'}} />\n          </Tooltip>\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Project details\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"sw\""
        }
      ],
      "line_start": 249,
      "line_end": 255,
      "text": "<Tooltip\n            aria-label=\"Project details\"\n            sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n            direction=\"sw\"\n          >\n            <StyledOcticon icon={SidebarExpandIcon} sx={{color: 'fg.default'}} />\n          </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "key",
          "kind": "StringLiteral",
          "text": "\"project-menu\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{toggleIsOpen}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...disabledNavigationButtonProps}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('project-menu-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 0}}"
        }
      ],
      "line_start": 261,
      "line_end": 276,
      "text": "\n      <Button\n        ref={ref}\n        key=\"project-menu\"\n        onClick={toggleIsOpen}\n        {...disabledNavigationButtonProps}\n        {...testIdProps('project-menu-button')}\n        sx={{p: 0}}\n      >\n        <Tooltip\n          aria-label=\"More options\"\n          sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n          direction=\"sw\"\n        >\n          <StyledOcticon icon={KebabHorizontalIcon} sx={{color: 'fg.default'}} />\n        </Tooltip>\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"More options\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"sw\""
        }
      ],
      "line_start": 269,
      "line_end": 275,
      "text": "<Tooltip\n          aria-label=\"More options\"\n          sx={{height: '32px', px: 2, display: 'flex', justifyContent: 'center', alignItems: 'center'}}\n          direction=\"sw\"\n        >\n          <StyledOcticon icon={KebabHorizontalIcon} sx={{color: 'fg.default'}} />\n        </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "ButtonGroup",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 297,
      "line_end": 297,
      "text": "<ButtonGroup sx={{display: 'flex'}}>{buttons}</ButtonGroup>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{left: getMenuLeftPosition(), ...testIdProps(`-column-menu`)}}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{toggleIsOpen}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{toggleIsOpen}"
        },
        {
          "name": "focusTrapSettings",
          "kind": "JsxExpression",
          "text": "{{restoreFocusOnCleanUp: true}}"
        }
      ],
      "line_start": 299,
      "line_end": 309,
      "text": "<AnchoredOverlay\n        open={isOpen}\n        renderAnchor={null}\n        anchorRef={ref}\n        overlayProps={{left: getMenuLeftPosition(), ...testIdProps(`-column-menu`)}}\n        onOpen={toggleIsOpen}\n        onClose={toggleIsOpen}\n        focusTrapSettings={{restoreFocusOnCleanUp: true}}\n      >\n        <ActionList>{menuItems}</ActionList>\n      </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 308,
      "line_end": 308,
      "text": "<ActionList>{menuItems}</ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default'}}"
        }
      ],
      "line_start": 334,
      "line_end": 334,
      "text": "<Text sx={{color: 'fg.default'}}>{text}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        mx: 2,\n        borderRadius: 6,\n        display: 'flex',\n        ':hover, :focus, :focus-visible, :focus-within': {\n          cursor: 'pointer',\n          backgroundColor: 'canvas.subtle',\n          outline: 'none'\n        }\n      }}"
        }
      ],
      "line_start": 339,
      "line_end": 360,
      "text": "\n    <Box\n      sx={{\n        mx: 2,\n        borderRadius: 6,\n        display: 'flex',\n        ':hover, :focus, :focus-visible, :focus-within': {\n          cursor: 'pointer',\n          backgroundColor: 'canvas.subtle',\n          outline: 'none'\n        }\n      }}\n    >\n      {useSimpleLink ? (\n        <PrimerLink href={to} target=\"_blank\" onClick={onClick} style={style} {...testIdProps(testId)}>\n          {Content}\n        </PrimerLink>\n      ) : (\n        <Link to={to} onClick={onClick} style={style} {...testIdProps(testId)}>\n          {Content}\n        </Link>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Link",
      "props": [
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{to}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "style",
          "kind": "JsxExpression",
          "text": "{style}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(testId)}"
        }
      ],
      "line_start": 356,
      "line_end": 358,
      "text": "\n        <Link to={to} onClick={onClick} style={style} {...testIdProps(testId)}>\n          {Content}\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexShrink: 0,\n        pb: 3,\n        mt: 0,\n        px: [3, 4, 5],\n        pt: 3,\n        bg: 'canvas.inset',\n        alignItems: 'center',\n        position: 'relative',\n        justifyContent: 'space-between',\n        borderBottom: isNotProjectView ? '1px solid' : 'none',\n        borderColor: 'border.subtle'\n      }}"
        }
      ],
      "line_start": 374,
      "line_end": 406,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        flexShrink: 0,\n        pb: 3,\n        mt: 0,\n        px: [3, 4, 5],\n        pt: 3,\n        bg: 'canvas.inset',\n        alignItems: 'center',\n        position: 'relative',\n        justifyContent: 'space-between',\n        borderBottom: isNotProjectView ? '1px solid' : 'none',\n        borderColor: 'border.subtle'\n      }}\n    >\n      <Routes>\n        <Route path={PROJECT_SETTINGS_ROUTE.pathWithChildPaths} element={<RouteTitle title=\"Settings\" />} />\n        <Route path={PROJECT_WORKFLOWS_ROUTE.pathWithChildPaths} element={<RouteTitle title=\"Workflows\" />} />\n        <Route path={PROJECT_INSIGHTS_ROUTE.pathWithChildPaths} element={<RouteTitle title=\"Insights\" />} />\n        <Route path={PROJECT_ARCHIVE_ROUTE.pathWithChildPaths} element={<RouteTitle title=\"Archived Items\" />} />\n        <Route path=\"*\" element={<MemexTitle />} />\n      </Routes>\n      <Box sx={{justifyItems: 'center', display: 'flex', alignItems: 'center', gap: 2}}>\n        {!isPublicProject ? <PresenceAvatars /> : null}\n\n        <Label variant=\"success\">Beta</Label>\n        <ClientFeatureFlagsList />\n        <ProjectNavigationButtons />\n      </Box>\n\n      <FindInProjectInput />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyItems: 'center', display: 'flex', alignItems: 'center', gap: 2}}"
        }
      ],
      "line_start": 397,
      "line_end": 403,
      "text": "<Box sx={{justifyItems: 'center', display: 'flex', alignItems: 'center', gap: 2}}>\n        {!isPublicProject ? <PresenceAvatars /> : null}\n\n        <Label variant=\"success\">Beta</Label>\n        <ClientFeatureFlagsList />\n        <ProjectNavigationButtons />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/index.tsx",
      "name": "Label",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"success\""
        }
      ],
      "line_start": 400,
      "line_end": 400,
      "text": "<Label variant=\"success\">Beta</Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          ...(hasWritePermissions\n            ? {\n                '&:focus-within': {\n                  boxShadow: 'primary.shadow.focus',\n                  borderRadius: '2'\n                },\n                '&:hover:not(:focus-within)': {\n                  boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`,\n                  borderRadius: '2'\n                }\n              }\n            : {}),\n          px: 1\n        }}"
        }
      ],
      "line_start": 88,
      "line_end": 132,
      "text": "\n      <Box\n        sx={{\n          ...(hasWritePermissions\n            ? {\n                '&:focus-within': {\n                  boxShadow: 'primary.shadow.focus',\n                  borderRadius: '2'\n                },\n                '&:hover:not(:focus-within)': {\n                  boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`,\n                  borderRadius: '2'\n                }\n              }\n            : {}),\n          px: 1\n        }}\n      >\n        {hasWritePermissions ? (\n          <EmojiPicker>\n            <AutosizeTextInput\n              as={BorderlessTextInput}\n              {...props}\n              ref={inputRef}\n              sx={{\n                fontSize: 3,\n                fontWeight: 600\n              }}\n              autoComplete=\"off\"\n              placeholder={Resources.addTitlePlaceholder}\n              aria-label={Resources.addTitlePlaceholder}\n              value={title}\n              onChange={onChange}\n              onClick={onClick}\n              onBlur={onBlur}\n              id=\"memexTitleInput\"\n              {...inputCompositionProps}\n              {...testIdProps('memex-title')}\n            />\n          </EmojiPicker>\n        ) : (\n          <Heading as=\"h1\" sx={{fontSize: 3, fontWeight: 600}} {...testIdProps('memex-title')}>\n            {title}\n          </Heading>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h1\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 3, fontWeight: 600}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('memex-title')}"
        }
      ],
      "line_start": 128,
      "line_end": 130,
      "text": "\n          <Heading as=\"h1\" sx={{fontSize: 3, fontWeight: 600}} {...testIdProps('memex-title')}>\n            {title}\n          </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Rename\""
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"s\""
        },
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"right\""
        }
      ],
      "line_start": 137,
      "line_end": 139,
      "text": "\n        <Tooltip aria-label=\"Rename\" direction=\"s\" align=\"right\">\n          {element}\n        </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/memex-title.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', alignItems: 'center'}}"
        }
      ],
      "line_start": 147,
      "line_end": 150,
      "text": "\n    <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n      {isValidRoute && <StyledOcticon icon={isPublicProject ? GlobeIcon : LockIcon} sx={{color: 'fg.muted', mr: 1}} />}\n      {getTextInput()}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/route-title.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', alignItems: 'center'}}"
        }
      ],
      "line_start": 11,
      "line_end": 18,
      "text": "\n    <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n      <Link to={returnToViewLinkTo} aria-label=\"Return to project view\">\n        <StyledOcticon icon={ArrowLeftIcon} sx={{color: 'fg.muted', verticalAlign: 'middle', mr: 2}} size={24} />\n      </Link>\n      <Heading as=\"h1\" sx={{fontSize: 3, color: 'fg.default'}}>\n        {title}\n      </Heading>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/top-bar/route-title.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h1\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 3, color: 'fg.default'}}"
        }
      ],
      "line_start": 15,
      "line_end": 17,
      "text": "<Heading as=\"h1\" sx={{fontSize: 3, color: 'fg.default'}}>\n        {title}\n      </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('view-options-menu-visible-columns')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelect}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}"
        },
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{columnTitles}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{`Visible fields: ${columnTitles}`}"
        }
      ],
      "line_start": 62,
      "line_end": 73,
      "text": "\n    <ActionList.Item\n      {...testIdProps('view-options-menu-visible-columns')}\n      onSelect={onSelect}\n      sx={{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}\n      title={columnTitles}\n      aria-label={`Visible fields: ${columnTitles}`}\n    >\n      <ActionList.LeadingVisual>\n        <VisibleFieldsLeadingVisual />\n      </ActionList.LeadingVisual>\n      {columnTitles}\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 69,
      "line_end": 71,
      "text": "<ActionList.LeadingVisual>\n        <VisibleFieldsLeadingVisual />\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('view-options-menu-item-grouped-by')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelect}"
        }
      ],
      "line_start": 103,
      "line_end": 121,
      "text": "\n    <ActionList.Item {...testIdProps('view-options-menu-item-grouped-by')} onSelect={onSelect}>\n      <ActionList.LeadingVisual>\n        <GroupLeadingVisual />\n      </ActionList.LeadingVisual>\n      <span aria-label={`Grouped by: ${groupedByColumn ? groupedByColumn.name : 'none'}`}>\n        <Text sx={{color: 'fg.muted'}}>{shouldShowVerticalGroupBy(viewType) ? 'column field:' : 'group:'}</Text>\n        <Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: groupedByColumn ? 'unset' : 'italic'\n          }}\n        >\n          {groupedByColumn ? groupedByColumn.name : ' none'}\n        </Text>\n      </span>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 104,
      "line_end": 106,
      "text": "<ActionList.LeadingVisual>\n        <GroupLeadingVisual />\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 108,
      "line_end": 108,
      "text": "<Text sx={{color: 'fg.muted'}}>{shouldShowVerticalGroupBy(viewType) ? 'column field:' : 'group:'}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: groupedByColumn ? 'unset' : 'italic'\n          }}"
        }
      ],
      "line_start": 109,
      "line_end": 119,
      "text": "<Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: groupedByColumn ? 'unset' : 'italic'\n          }}\n        >\n          {groupedByColumn ? groupedByColumn.name : ' none'}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('view-options-menu-item-sorted-by')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelect}"
        }
      ],
      "line_start": 159,
      "line_end": 177,
      "text": "\n    <ActionList.Item {...testIdProps('view-options-menu-item-sorted-by')} onSelect={onSelect}>\n      <ActionList.LeadingVisual>\n        <SortLeadingVisual />\n      </ActionList.LeadingVisual>\n      <span aria-label={sortLabel}>\n        <Text sx={{color: 'fg.muted'}}>sort: </Text>\n        <Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: sortedByColumn ? 'unset' : 'italic'\n          }}\n        >\n          {sortText}\n        </Text>\n      </span>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 160,
      "line_end": 162,
      "text": "<ActionList.LeadingVisual>\n        <SortLeadingVisual />\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 164,
      "line_end": 164,
      "text": "<Text sx={{color: 'fg.muted'}}>sort: </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: sortedByColumn ? 'unset' : 'italic'\n          }}"
        }
      ],
      "line_start": 165,
      "line_end": 175,
      "text": "<Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis',\n            width: '85%',\n            fontStyle: sortedByColumn ? 'unset' : 'italic'\n          }}\n        >\n          {sortText}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('view-options-menu-item-search')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelect}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{query ? `Search/filters applied: ${query}` : undefined}"
        },
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{query}"
        }
      ],
      "line_start": 193,
      "line_end": 226,
      "text": "\n    <ActionList.Item\n      {...testIdProps('view-options-menu-item-search')}\n      onSelect={onSelect}\n      aria-label={query ? `Search/filters applied: ${query}` : undefined}\n      title={query}\n    >\n      <ActionList.LeadingVisual>\n        <FilterLeadingVisual />\n      </ActionList.LeadingVisual>\n\n      {query ? (\n        <TokenizedQuery\n          query={query}\n          sx={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            maxWidth: 200\n          }}\n        />\n      ) : (\n        <Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }}\n        >\n          Search or filter this view\n        </Text>\n      )}\n\n      <ActionList.TrailingVisual>{searchKeys}</ActionList.TrailingVisual>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 199,
      "line_end": 201,
      "text": "<ActionList.LeadingVisual>\n        <FilterLeadingVisual />\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }}"
        }
      ],
      "line_start": 214,
      "line_end": 222,
      "text": "\n        <Text\n          sx={{\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            textOverflow: 'ellipsis'\n          }}\n        >\n          Search or filter this view\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/configuration-items.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 225,
      "line_end": 225,
      "text": "<ActionList.TrailingVisual>{searchKeys}</ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative'}}"
        }
      ],
      "line_start": 132,
      "line_end": 244,
      "text": "\n    <Box sx={{position: 'relative'}}>\n      <MenuAnchor ref={anchorRef} onClick={() => setOpen(s => !s)} />\n      <ActionMenu\n        anchorRef={anchorRef}\n        open={!isCommandPaletteVisible && open}\n        onOpenChange={useCallback((nextOpen: boolean): void => setOpen(nextOpen), [])}\n      >\n        <ActionMenu.Overlay\n          {...testIdProps('view-options-menu-modal')}\n          width=\"medium\"\n          sx={{\n            maxHeight: clientHeight,\n            overflow: 'auto'\n          }}\n        >\n          <ActionList>\n            <ActionList.Group\n              title=\"Layout\"\n              variant=\"subtle\"\n              sx={{\n                '& > ul': {display: 'flex', px: 2}\n              }}\n              {...testIdProps('view-options-menu-layout')}\n            >\n              <LayoutToggle view={view} setOpen={setOpen} />\n            </ActionList.Group>\n            <ActionList.Divider />\n            <ActionList.Group title=\"Configuration\" variant=\"subtle\">\n              <VisibleFieldsItem\n                onSelect={useCallback(() => {\n                  setShowSubMenu('add-field')\n                  setOpen(false)\n                }, [])}\n              />\n              <GroupByConfig\n                onSelect={useCallback(() => {\n                  setShowSubMenu('group-by')\n                  setOpen(false)\n                }, [])}\n              />\n              {view.localViewState.layout === ViewTypeParam.Table ? (\n                <SortByConfig onSelect={onSelectSortByConfig} />\n              ) : null}\n              <FilterByConfig onSelect={handleSearchAction} />\n            </ActionList.Group>\n\n            {isInsightsChartViewEnabled ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group>\n                  <ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>\n                </ActionList.Group>\n              </>\n            ) : null}\n\n            {hasWritePermissions ? (\n              <>\n                <ActionList.Divider />\n                <ViewActionItems\n                  handleRenameViewClick={handleRenameViewClick}\n                  handleDuplicateView={handleDuplicateView}\n                  handleDestroyView={handleDestroyView}\n                  viewsLength={views.length}\n                  view={view}\n                />\n              </>\n            ) : null}\n\n            {view.isViewStateDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  <ViewChangeButtons setOpen={setOpen} view={view} />\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n\n      <AddColumnMenu\n        anchorRef={anchorRef}\n        open={showSubMenu === 'add-field'}\n        setOpen={useCallback((nextOpen: boolean) => setShowSubMenu(m => (nextOpen ? 'add-field' : null)), [])}\n      />\n      <GroupByMenu\n        anchorRef={anchorRef}\n        open={showSubMenu === 'group-by'}\n        setOpen={useCallback((nextOpen: boolean) => setShowSubMenu(m => (nextOpen ? 'group-by' : null)), [])}\n      />\n\n      <SortByMenu\n        anchorRef={anchorRef}\n        open={showSubMenu === 'sort-by'}\n        setOpen={useCallback((nextOpen: boolean) => setShowSubMenu(m => (nextOpen ? 'sort-by' : null)), [])}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{!isCommandPaletteVisible && open}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{useCallback((nextOpen: boolean): void => setOpen(nextOpen), [])}"
        }
      ],
      "line_start": 134,
      "line_end": 226,
      "text": "<ActionMenu\n        anchorRef={anchorRef}\n        open={!isCommandPaletteVisible && open}\n        onOpenChange={useCallback((nextOpen: boolean): void => setOpen(nextOpen), [])}\n      >\n        <ActionMenu.Overlay\n          {...testIdProps('view-options-menu-modal')}\n          width=\"medium\"\n          sx={{\n            maxHeight: clientHeight,\n            overflow: 'auto'\n          }}\n        >\n          <ActionList>\n            <ActionList.Group\n              title=\"Layout\"\n              variant=\"subtle\"\n              sx={{\n                '& > ul': {display: 'flex', px: 2}\n              }}\n              {...testIdProps('view-options-menu-layout')}\n            >\n              <LayoutToggle view={view} setOpen={setOpen} />\n            </ActionList.Group>\n            <ActionList.Divider />\n            <ActionList.Group title=\"Configuration\" variant=\"subtle\">\n              <VisibleFieldsItem\n                onSelect={useCallback(() => {\n                  setShowSubMenu('add-field')\n                  setOpen(false)\n                }, [])}\n              />\n              <GroupByConfig\n                onSelect={useCallback(() => {\n                  setShowSubMenu('group-by')\n                  setOpen(false)\n                }, [])}\n              />\n              {view.localViewState.layout === ViewTypeParam.Table ? (\n                <SortByConfig onSelect={onSelectSortByConfig} />\n              ) : null}\n              <FilterByConfig onSelect={handleSearchAction} />\n            </ActionList.Group>\n\n            {isInsightsChartViewEnabled ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group>\n                  <ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>\n                </ActionList.Group>\n              </>\n            ) : null}\n\n            {hasWritePermissions ? (\n              <>\n                <ActionList.Divider />\n                <ViewActionItems\n                  handleRenameViewClick={handleRenameViewClick}\n                  handleDuplicateView={handleDuplicateView}\n                  handleDestroyView={handleDestroyView}\n                  viewsLength={views.length}\n                  view={view}\n                />\n              </>\n            ) : null}\n\n            {view.isViewStateDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  <ViewChangeButtons setOpen={setOpen} view={view} />\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('view-options-menu-modal')}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"medium\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            maxHeight: clientHeight,\n            overflow: 'auto'\n          }}"
        }
      ],
      "line_start": 139,
      "line_end": 225,
      "text": "<ActionMenu.Overlay\n          {...testIdProps('view-options-menu-modal')}\n          width=\"medium\"\n          sx={{\n            maxHeight: clientHeight,\n            overflow: 'auto'\n          }}\n        >\n          <ActionList>\n            <ActionList.Group\n              title=\"Layout\"\n              variant=\"subtle\"\n              sx={{\n                '& > ul': {display: 'flex', px: 2}\n              }}\n              {...testIdProps('view-options-menu-layout')}\n            >\n              <LayoutToggle view={view} setOpen={setOpen} />\n            </ActionList.Group>\n            <ActionList.Divider />\n            <ActionList.Group title=\"Configuration\" variant=\"subtle\">\n              <VisibleFieldsItem\n                onSelect={useCallback(() => {\n                  setShowSubMenu('add-field')\n                  setOpen(false)\n                }, [])}\n              />\n              <GroupByConfig\n                onSelect={useCallback(() => {\n                  setShowSubMenu('group-by')\n                  setOpen(false)\n                }, [])}\n              />\n              {view.localViewState.layout === ViewTypeParam.Table ? (\n                <SortByConfig onSelect={onSelectSortByConfig} />\n              ) : null}\n              <FilterByConfig onSelect={handleSearchAction} />\n            </ActionList.Group>\n\n            {isInsightsChartViewEnabled ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group>\n                  <ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>\n                </ActionList.Group>\n              </>\n            ) : null}\n\n            {hasWritePermissions ? (\n              <>\n                <ActionList.Divider />\n                <ViewActionItems\n                  handleRenameViewClick={handleRenameViewClick}\n                  handleDuplicateView={handleDuplicateView}\n                  handleDestroyView={handleDestroyView}\n                  viewsLength={views.length}\n                  view={view}\n                />\n              </>\n            ) : null}\n\n            {view.isViewStateDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  <ViewChangeButtons setOpen={setOpen} view={view} />\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 147,
      "line_end": 224,
      "text": "<ActionList>\n            <ActionList.Group\n              title=\"Layout\"\n              variant=\"subtle\"\n              sx={{\n                '& > ul': {display: 'flex', px: 2}\n              }}\n              {...testIdProps('view-options-menu-layout')}\n            >\n              <LayoutToggle view={view} setOpen={setOpen} />\n            </ActionList.Group>\n            <ActionList.Divider />\n            <ActionList.Group title=\"Configuration\" variant=\"subtle\">\n              <VisibleFieldsItem\n                onSelect={useCallback(() => {\n                  setShowSubMenu('add-field')\n                  setOpen(false)\n                }, [])}\n              />\n              <GroupByConfig\n                onSelect={useCallback(() => {\n                  setShowSubMenu('group-by')\n                  setOpen(false)\n                }, [])}\n              />\n              {view.localViewState.layout === ViewTypeParam.Table ? (\n                <SortByConfig onSelect={onSelectSortByConfig} />\n              ) : null}\n              <FilterByConfig onSelect={handleSearchAction} />\n            </ActionList.Group>\n\n            {isInsightsChartViewEnabled ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group>\n                  <ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>\n                </ActionList.Group>\n              </>\n            ) : null}\n\n            {hasWritePermissions ? (\n              <>\n                <ActionList.Divider />\n                <ViewActionItems\n                  handleRenameViewClick={handleRenameViewClick}\n                  handleDuplicateView={handleDuplicateView}\n                  handleDestroyView={handleDestroyView}\n                  viewsLength={views.length}\n                  view={view}\n                />\n              </>\n            ) : null}\n\n            {view.isViewStateDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  <ViewChangeButtons setOpen={setOpen} view={view} />\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Layout\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"subtle\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                '& > ul': {display: 'flex', px: 2}\n              }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('view-options-menu-layout')}"
        }
      ],
      "line_start": 148,
      "line_end": 157,
      "text": "<ActionList.Group\n              title=\"Layout\"\n              variant=\"subtle\"\n              sx={{\n                '& > ul': {display: 'flex', px: 2}\n              }}\n              {...testIdProps('view-options-menu-layout')}\n            >\n              <LayoutToggle view={view} setOpen={setOpen} />\n            </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Configuration\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"subtle\""
        }
      ],
      "line_start": 159,
      "line_end": 176,
      "text": "<ActionList.Group title=\"Configuration\" variant=\"subtle\">\n              <VisibleFieldsItem\n                onSelect={useCallback(() => {\n                  setShowSubMenu('add-field')\n                  setOpen(false)\n                }, [])}\n              />\n              <GroupByConfig\n                onSelect={useCallback(() => {\n                  setShowSubMenu('group-by')\n                  setOpen(false)\n                }, [])}\n              />\n              {view.localViewState.layout === ViewTypeParam.Table ? (\n                <SortByConfig onSelect={onSelectSortByConfig} />\n              ) : null}\n              <FilterByConfig onSelect={handleSearchAction} />\n            </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [],
      "line_start": 181,
      "line_end": 199,
      "text": "<ActionList.Group>\n                  <ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>\n                </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.LinkItem",
      "parent": "ActionList",
      "child": "LinkItem",
      "props": [
        {
          "name": "as",
          "kind": "JsxExpression",
          "text": "{ReactRouterLink}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...testIdProps('view-options-menu-item-show-insights')}"
        },
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}"
        }
      ],
      "line_start": 182,
      "line_end": 198,
      "text": "<ActionList.LinkItem\n                    as={ReactRouterLink}\n                    {...testIdProps('view-options-menu-item-show-insights')}\n                    to={{\n                      pathname: PROJECT_INSIGHTS_ROUTE.generatePath({projectNumber}),\n                      search: query\n                        ? `${new URLSearchParams({\n                            filterQuery: query\n                          })}`\n                        : undefined\n                    }}\n                  >\n                    <ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>\n                    Generate chart\n                  </ActionList.LinkItem>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 194,
      "line_end": 196,
      "text": "<ActionList.LeadingVisual>\n                      <GraphIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{'& > ul': {display: 'flex'}}}"
        }
      ],
      "line_start": 219,
      "line_end": 221,
      "text": "<ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  <ViewChangeButtons setOpen={setOpen} view={view} />\n                </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        flex: 1,\n        border: '1px solid',\n        borderColor: selected ? 'accent.emphasis' : 'border.default',\n        textAlign: 'center',\n        cursor: 'pointer',\n        backgroundColor: selected ? 'accent.subtle' : '',\n        boxShadow: selected ? theme => `inset 0 0 0 1px ${theme.colors.accent.emphasis}` : '',\n        borderRadius: 0,\n        mx: 0,\n        mb: 2,\n        mt: 1,\n        '&:hover': {\n          backgroundColor: !selected ? 'canvas.subtle' : ''\n        },\n        '&:first-of-type': {\n          borderTopLeftRadius: 2,\n          borderBottomLeftRadius: 2,\n          borderRight: selected ? undefined : '0'\n        },\n        '&:last-of-type': {\n          borderTopRightRadius: 2,\n          borderBottomRightRadius: 2,\n          borderLeft: selected ? undefined : '0'\n        }\n      }}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleViewTypeChange(value)}"
        }
      ],
      "line_start": 34,
      "line_end": 71,
      "text": "\n    <ActionList.Item\n      sx={{\n        flex: 1,\n        border: '1px solid',\n        borderColor: selected ? 'accent.emphasis' : 'border.default',\n        textAlign: 'center',\n        cursor: 'pointer',\n        backgroundColor: selected ? 'accent.subtle' : '',\n        boxShadow: selected ? theme => `inset 0 0 0 1px ${theme.colors.accent.emphasis}` : '',\n        borderRadius: 0,\n        mx: 0,\n        mb: 2,\n        mt: 1,\n        '&:hover': {\n          backgroundColor: !selected ? 'canvas.subtle' : ''\n        },\n        '&:first-of-type': {\n          borderTopLeftRadius: 2,\n          borderBottomLeftRadius: 2,\n          borderRight: selected ? undefined : '0'\n        },\n        '&:last-of-type': {\n          borderTopRightRadius: 2,\n          borderBottomRightRadius: 2,\n          borderLeft: selected ? undefined : '0'\n        }\n      }}\n      onSelect={() => handleViewTypeChange(value)}\n    >\n      <Box sx={{fontWeight: 'normal', cursor: 'pointer', px: 3, py: 2, mb: 0}} {...props}>\n        <Box sx={{textAlign: 'center', flexDirection: 'column', m: 'auto', alignItems: 'center', display: 'flex'}}>\n          <PotentiallyDirty isDirty={isDirty && selected} hideDirtyState={isDisabled}>\n            <StyledOcticon icon={Icon} sx={{color: selected ? 'fg.default' : 'fg.muted'}} size=\"medium\" />\n          </PotentiallyDirty>\n          <Text sx={{color: selected ? 'fg.default' : 'fg.muted', fontSize: 0}}>{children}</Text>\n        </Box>\n      </Box>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'normal', cursor: 'pointer', px: 3, py: 2, mb: 0}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...props}"
        }
      ],
      "line_start": 63,
      "line_end": 70,
      "text": "<Box sx={{fontWeight: 'normal', cursor: 'pointer', px: 3, py: 2, mb: 0}} {...props}>\n        <Box sx={{textAlign: 'center', flexDirection: 'column', m: 'auto', alignItems: 'center', display: 'flex'}}>\n          <PotentiallyDirty isDirty={isDirty && selected} hideDirtyState={isDisabled}>\n            <StyledOcticon icon={Icon} sx={{color: selected ? 'fg.default' : 'fg.muted'}} size=\"medium\" />\n          </PotentiallyDirty>\n          <Text sx={{color: selected ? 'fg.default' : 'fg.muted', fontSize: 0}}>{children}</Text>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{textAlign: 'center', flexDirection: 'column', m: 'auto', alignItems: 'center', display: 'flex'}}"
        }
      ],
      "line_start": 64,
      "line_end": 69,
      "text": "<Box sx={{textAlign: 'center', flexDirection: 'column', m: 'auto', alignItems: 'center', display: 'flex'}}>\n          <PotentiallyDirty isDirty={isDirty && selected} hideDirtyState={isDisabled}>\n            <StyledOcticon icon={Icon} sx={{color: selected ? 'fg.default' : 'fg.muted'}} size=\"medium\" />\n          </PotentiallyDirty>\n          <Text sx={{color: selected ? 'fg.default' : 'fg.muted', fontSize: 0}}>{children}</Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/layout-toggle.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: selected ? 'fg.default' : 'fg.muted', fontSize: 0}}"
        }
      ],
      "line_start": 68,
      "line_end": 68,
      "text": "<Text sx={{color: selected ? 'fg.default' : 'fg.muted', fontSize: 0}}>{children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('view-options-menu-item-rename-view')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleRenameViewClick}"
        }
      ],
      "line_start": 24,
      "line_end": 29,
      "text": "\n        <ActionList.Item {...testIdProps('view-options-menu-item-rename-view')} onSelect={handleRenameViewClick}>\n          <ActionList.LeadingVisual>\n            <PencilIcon />\n          </ActionList.LeadingVisual>\n          Rename view\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 25,
      "line_end": 27,
      "text": "<ActionList.LeadingVisual>\n            <PencilIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('view-options-menu-item-duplicate-view')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleDuplicateView}"
        }
      ],
      "line_start": 31,
      "line_end": 36,
      "text": "<ActionList.Item {...testIdProps('view-options-menu-item-duplicate-view')} onSelect={handleDuplicateView}>\n        <ActionList.LeadingVisual>\n          <VersionsIcon />\n        </ActionList.LeadingVisual>\n        {view.isViewStateDirty ? 'Save changes to new view' : 'Duplicate view'}\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 32,
      "line_end": 34,
      "text": "<ActionList.LeadingVisual>\n          <VersionsIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('view-options-menu-item-delete-view')}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleDestroyView}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{viewsLength <= 1}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        }
      ],
      "line_start": 37,
      "line_end": 47,
      "text": "<ActionList.Item\n        {...testIdProps('view-options-menu-item-delete-view')}\n        onSelect={handleDestroyView}\n        disabled={viewsLength <= 1}\n        variant=\"danger\"\n      >\n        <ActionList.LeadingVisual>\n          <TrashIcon />\n        </ActionList.LeadingVisual>\n        {view.isDeleted ? 'Remove deleted view' : 'Delete view'}\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-action-items.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 43,
      "line_end": 45,
      "text": "<ActionList.LeadingVisual>\n          <TrashIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-changes-button.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleSaveView}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!view.isViewStateDirty}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('view-options-menu-save-changes-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            flex: 'auto',\n            color: 'accent.fg',\n            borderRight: '1px solid',\n            borderColor: 'border.default',\n            borderRadius: 0,\n            my: -2,\n            mx: 0,\n            py: 3,\n            textAlign: 'center',\n            fontWeight: 'normal',\n            '&:hover': {\n              bg: 'canvas.inset'\n            }\n          }}"
        }
      ],
      "line_start": 38,
      "line_end": 59,
      "text": "\n        <ActionList.Item\n          onSelect={handleSaveView}\n          disabled={!view.isViewStateDirty}\n          {...testIdProps('view-options-menu-save-changes-button')}\n          sx={{\n            flex: 'auto',\n            color: 'accent.fg',\n            borderRight: '1px solid',\n            borderColor: 'border.default',\n            borderRadius: 0,\n            my: -2,\n            mx: 0,\n            py: 3,\n            textAlign: 'center',\n            fontWeight: 'normal',\n            '&:hover': {\n              bg: 'canvas.inset'\n            }\n          }}\n        >\n          Save changes\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/view-options-menu/view-changes-button.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleResetChanges}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('view-options-menu-reset-changes-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          flex: 'auto',\n          color: 'fg.muted',\n          borderRadius: 0,\n          my: -2,\n          mx: 0,\n          py: 3,\n          textAlign: 'center',\n          fontWeight: 'normal',\n          '&:hover': {\n            bg: 'canvas.inset'\n          }\n        }}"
        }
      ],
      "line_start": 61,
      "line_end": 79,
      "text": "<ActionList.Item\n        onSelect={handleResetChanges}\n        {...testIdProps('view-options-menu-reset-changes-button')}\n        sx={{\n          flex: 'auto',\n          color: 'fg.muted',\n          borderRadius: 0,\n          my: -2,\n          mx: 0,\n          py: 3,\n          textAlign: 'center',\n          fontWeight: 'normal',\n          '&:hover': {\n            bg: 'canvas.inset'\n          }\n        }}\n      >\n        Discard changes\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{tooltipLabel}"
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"sw\""
        },
        {
          "name": "wrap",
          "kind": "JsxExpression",
          "text": "{true}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`board-card-assignees`)}"
        }
      ],
      "line_start": 140,
      "line_end": 146,
      "text": "\n      <Tooltip aria-label={tooltipLabel} direction=\"sw\" wrap={true} {...testIdProps(`board-card-assignees`)}>\n        <AvatarStack alignRight sx={AVATAR_STACK_STYLE}>\n          {assignees.map(assignee => (\n            <ClickableAvatar key={assignee.id} assignee={assignee} />\n          ))}\n        </AvatarStack>\n      </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "AvatarStack",
      "props": [
        {
          "name": "alignRight"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{AVATAR_STACK_STYLE}"
        }
      ],
      "line_start": 141,
      "line_end": 145,
      "text": "<AvatarStack alignRight sx={AVATAR_STACK_STYLE}>\n          {assignees.map(assignee => (\n            <ClickableAvatar key={assignee.id} assignee={assignee} />\n          ))}\n        </AvatarStack>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, color: 'fg.muted'}}"
        }
      ],
      "line_start": 197,
      "line_end": 197,
      "text": "<Text sx={{fontSize: 0, color: 'fg.muted'}}>Draft</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 0, color: 'fg.muted'}}"
        }
      ],
      "line_start": 227,
      "line_end": 229,
      "text": "\n            <Text sx={{fontSize: 0, color: 'fg.muted'}}>\n              {repoName} #{titleValue.value.number}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...boxProps}"
        }
      ],
      "line_start": 242,
      "line_end": 242,
      "text": " <Box {...boxProps}>{content}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between'}}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        }
      ],
      "line_start": 260,
      "line_end": 272,
      "text": "\n    <Box sx={{display: 'flex', justifyContent: 'space-between'}} ref={ref}>\n      <IconAndTitle\n        Icon={Icon}\n        Title={Title}\n        item={item}\n        disableContextMenu={disableContextMenu}\n        archiveItem={archiveItem}\n        convertToIssue={convertToIssue}\n        removeItem={removeItem}\n        contextMenuRef={contextMenuRef}\n      />\n      <Box sx={{display: 'flex', flexShrink: 0, justifyContent: 'flex-end', alignItems: 'center'}}>{Avatars}</Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexShrink: 0, justifyContent: 'flex-end', alignItems: 'center'}}"
        }
      ],
      "line_start": 271,
      "line_end": 271,
      "text": "<Box sx={{display: 'flex', flexShrink: 0, justifyContent: 'flex-end', alignItems: 'center'}}>{Avatars}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 1}}"
        }
      ],
      "line_start": 352,
      "line_end": 352,
      "text": "<Box sx={{mr: 1}}>{Icon}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 0}}"
        },
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"js-context-menu-trigger\""
        }
      ],
      "line_start": 355,
      "line_end": 421,
      "text": "\n        <Box sx={{mr: 0}} className=\"js-context-menu-trigger\">\n          <ActionMenu open={menuOpen} onOpenChange={setMenuOpen} anchorRef={contextMenuRef}>\n            <ActionMenu.Anchor>\n              <IconButton\n                variant=\"invisible\"\n                icon={KebabHorizontalIcon}\n                {...testIdProps('card-context-menu-trigger')}\n                aria-label=\"More actions\"\n                sx={{\n                  ml: 1,\n                  color: 'fg.muted',\n                  width: '24px',\n                  height: '24px',\n                  padding: 0\n                }}\n              />\n            </ActionMenu.Anchor>\n            <ActionMenu.Overlay\n              anchorSide=\"inside-right\"\n              portalContainerName={`column-${itemColumnValue?.id ?? 'no_vertical_group'}-portal-root`}\n            >\n              <ActionList>\n                {convertToIssue ? (\n                  <ActionList.Item onSelect={convertToIssue} {...testIdProps('card-context-menu-convert-to-issue')}>\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n                {archiveItem ? (\n                  <ActionList.Item\n                    id={IconAndTitleItems.ARCHIVE_ITEM}\n                    onSelect={() => archiveItem?.(BoardCardActionMenuUI)}\n                    {...testIdProps('card-context-menu-archive-item')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>\n                    {isItemSelected && filteredSelectedCardIds.length > 1\n                      ? `Archive ${filteredSelectedCardIds.length} selected items`\n                      : 'Archive'}\n                    <ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : null}\n                <ActionList.Item\n                  id={IconAndTitleItems.DELETE_FROM_PROJECT}\n                  variant=\"danger\"\n                  onSelect={() => removeItem(BoardCardActionMenuUI)}\n                  {...testIdProps('card-context-menu-delete')}\n                >\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  {isItemSelected && filteredSelectedCardIds.length > 1\n                    ? `Delete ${filteredSelectedCardIds.length} selected items from project`\n                    : 'Delete from project'}\n                  <ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{menuOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{setMenuOpen}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{contextMenuRef}"
        }
      ],
      "line_start": 356,
      "line_end": 420,
      "text": "<ActionMenu open={menuOpen} onOpenChange={setMenuOpen} anchorRef={contextMenuRef}>\n            <ActionMenu.Anchor>\n              <IconButton\n                variant=\"invisible\"\n                icon={KebabHorizontalIcon}\n                {...testIdProps('card-context-menu-trigger')}\n                aria-label=\"More actions\"\n                sx={{\n                  ml: 1,\n                  color: 'fg.muted',\n                  width: '24px',\n                  height: '24px',\n                  padding: 0\n                }}\n              />\n            </ActionMenu.Anchor>\n            <ActionMenu.Overlay\n              anchorSide=\"inside-right\"\n              portalContainerName={`column-${itemColumnValue?.id ?? 'no_vertical_group'}-portal-root`}\n            >\n              <ActionList>\n                {convertToIssue ? (\n                  <ActionList.Item onSelect={convertToIssue} {...testIdProps('card-context-menu-convert-to-issue')}>\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n                {archiveItem ? (\n                  <ActionList.Item\n                    id={IconAndTitleItems.ARCHIVE_ITEM}\n                    onSelect={() => archiveItem?.(BoardCardActionMenuUI)}\n                    {...testIdProps('card-context-menu-archive-item')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>\n                    {isItemSelected && filteredSelectedCardIds.length > 1\n                      ? `Archive ${filteredSelectedCardIds.length} selected items`\n                      : 'Archive'}\n                    <ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : null}\n                <ActionList.Item\n                  id={IconAndTitleItems.DELETE_FROM_PROJECT}\n                  variant=\"danger\"\n                  onSelect={() => removeItem(BoardCardActionMenuUI)}\n                  {...testIdProps('card-context-menu-delete')}\n                >\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  {isItemSelected && filteredSelectedCardIds.length > 1\n                    ? `Delete ${filteredSelectedCardIds.length} selected items from project`\n                    : 'Delete from project'}\n                  <ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 357,
      "line_end": 371,
      "text": "<ActionMenu.Anchor>\n              <IconButton\n                variant=\"invisible\"\n                icon={KebabHorizontalIcon}\n                {...testIdProps('card-context-menu-trigger')}\n                aria-label=\"More actions\"\n                sx={{\n                  ml: 1,\n                  color: 'fg.muted',\n                  width: '24px',\n                  height: '24px',\n                  padding: 0\n                }}\n              />\n            </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "anchorSide",
          "kind": "StringLiteral",
          "text": "\"inside-right\""
        },
        {
          "name": "portalContainerName",
          "kind": "JsxExpression",
          "text": "{`column-${itemColumnValue?.id ?? 'no_vertical_group'}-portal-root`}"
        }
      ],
      "line_start": 372,
      "line_end": 419,
      "text": "<ActionMenu.Overlay\n              anchorSide=\"inside-right\"\n              portalContainerName={`column-${itemColumnValue?.id ?? 'no_vertical_group'}-portal-root`}\n            >\n              <ActionList>\n                {convertToIssue ? (\n                  <ActionList.Item onSelect={convertToIssue} {...testIdProps('card-context-menu-convert-to-issue')}>\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n                {archiveItem ? (\n                  <ActionList.Item\n                    id={IconAndTitleItems.ARCHIVE_ITEM}\n                    onSelect={() => archiveItem?.(BoardCardActionMenuUI)}\n                    {...testIdProps('card-context-menu-archive-item')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>\n                    {isItemSelected && filteredSelectedCardIds.length > 1\n                      ? `Archive ${filteredSelectedCardIds.length} selected items`\n                      : 'Archive'}\n                    <ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : null}\n                <ActionList.Item\n                  id={IconAndTitleItems.DELETE_FROM_PROJECT}\n                  variant=\"danger\"\n                  onSelect={() => removeItem(BoardCardActionMenuUI)}\n                  {...testIdProps('card-context-menu-delete')}\n                >\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  {isItemSelected && filteredSelectedCardIds.length > 1\n                    ? `Delete ${filteredSelectedCardIds.length} selected items from project`\n                    : 'Delete from project'}\n                  <ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>\n                </ActionList.Item>\n              </ActionList>\n            </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 376,
      "line_end": 418,
      "text": "<ActionList>\n                {convertToIssue ? (\n                  <ActionList.Item onSelect={convertToIssue} {...testIdProps('card-context-menu-convert-to-issue')}>\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>\n                ) : null}\n                {archiveItem ? (\n                  <ActionList.Item\n                    id={IconAndTitleItems.ARCHIVE_ITEM}\n                    onSelect={() => archiveItem?.(BoardCardActionMenuUI)}\n                    {...testIdProps('card-context-menu-archive-item')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>\n                    {isItemSelected && filteredSelectedCardIds.length > 1\n                      ? `Archive ${filteredSelectedCardIds.length} selected items`\n                      : 'Archive'}\n                    <ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>\n                ) : null}\n                <ActionList.Item\n                  id={IconAndTitleItems.DELETE_FROM_PROJECT}\n                  variant=\"danger\"\n                  onSelect={() => removeItem(BoardCardActionMenuUI)}\n                  {...testIdProps('card-context-menu-delete')}\n                >\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  {isItemSelected && filteredSelectedCardIds.length > 1\n                    ? `Delete ${filteredSelectedCardIds.length} selected items from project`\n                    : 'Delete from project'}\n                  <ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>\n                </ActionList.Item>\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{convertToIssue}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('card-context-menu-convert-to-issue')}"
        }
      ],
      "line_start": 378,
      "line_end": 383,
      "text": "\n                  <ActionList.Item onSelect={convertToIssue} {...testIdProps('card-context-menu-convert-to-issue')}>\n                    <ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>\n                    Convert to issue\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 379,
      "line_end": 381,
      "text": "<ActionList.LeadingVisual>\n                      <IssueOpenedIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{IconAndTitleItems.ARCHIVE_ITEM}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => archiveItem?.(BoardCardActionMenuUI)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...testIdProps('card-context-menu-archive-item')}"
        }
      ],
      "line_start": 386,
      "line_end": 400,
      "text": "\n                  <ActionList.Item\n                    id={IconAndTitleItems.ARCHIVE_ITEM}\n                    onSelect={() => archiveItem?.(BoardCardActionMenuUI)}\n                    {...testIdProps('card-context-menu-archive-item')}\n                  >\n                    <ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>\n                    {isItemSelected && filteredSelectedCardIds.length > 1\n                      ? `Archive ${filteredSelectedCardIds.length} selected items`\n                      : 'Archive'}\n                    <ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 391,
      "line_end": 393,
      "text": "<ActionList.LeadingVisual>\n                      <ArchiveIcon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 397,
      "line_end": 399,
      "text": "<ActionList.TrailingVisual>\n                      <EKey />\n                    </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{IconAndTitleItems.DELETE_FROM_PROJECT}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => removeItem(BoardCardActionMenuUI)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                  {...testIdProps('card-context-menu-delete')}"
        }
      ],
      "line_start": 402,
      "line_end": 417,
      "text": "<ActionList.Item\n                  id={IconAndTitleItems.DELETE_FROM_PROJECT}\n                  variant=\"danger\"\n                  onSelect={() => removeItem(BoardCardActionMenuUI)}\n                  {...testIdProps('card-context-menu-delete')}\n                >\n                  <ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>\n                  {isItemSelected && filteredSelectedCardIds.length > 1\n                    ? `Delete ${filteredSelectedCardIds.length} selected items from project`\n                    : 'Delete from project'}\n                  <ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>\n                </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 408,
      "line_end": 410,
      "text": "<ActionList.LeadingVisual>\n                    <TrashIcon />\n                  </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 414,
      "line_end": 416,
      "text": "<ActionList.TrailingVisual>\n                    <DelKey />\n                  </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/header.tsx",
      "name": "Box",
      "line_start": 278,
      "line_end": 278,
      "text": " styled(Box)`\n  user-select: none;\n  cursor: default;\n  display: flex;\n\n  &:not(.js-disable-context-menu):not(.js-context-menu-open) .js-context-menu-trigger {\n    /* if we switch this to display: none or visibility: hidden,\n    we will not be able to focus the menu button with the Tab key or ESC key when closing  the menu\n    because of the event loop rendering process */\n    opacity: 0;\n  }\n\n  .js-context-menu-trigger:hover > div,\n  &.js-context-menu-open .js-context-menu-trigger > div {\n    background-color: ${themeGet('colors.canvas.subtle')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/board/card/title.tsx",
      "name": "Link",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{item.content.url}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "rel",
          "kind": "StringLiteral",
          "text": "\"noreferrer\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{e => e.stopPropagation()}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            code: {fontFamily: 'fonts.mono', fontSize: 0},\n            color: 'fg.default',\n            textAlign: 'left',\n            fontSize: TITLE_TEXT_SIZE,\n            ...textStyle\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('card-title-external-link')}"
        }
      ],
      "line_start": 55,
      "line_end": 71,
      "text": "\n        <Link\n          ref={ref}\n          href={item.content.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={e => e.stopPropagation()}\n          sx={{\n            code: {fontFamily: 'fonts.mono', fontSize: 0},\n            color: 'fg.default',\n            textAlign: 'left',\n            fontSize: TITLE_TEXT_SIZE,\n            ...textStyle\n          }}\n          {...testIdProps('card-title-external-link')}\n        >\n          <SanitizedHtmlSpan>{html}</SanitizedHtmlSpan>\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/card/title.tsx",
      "name": "Link",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{href}"
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "rel",
          "kind": "StringLiteral",
          "text": "\"noreferrer\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{openSidePanel}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('card-side-panel-trigger')}"
        }
      ],
      "line_start": 102,
      "line_end": 127,
      "text": "\n    <Link\n      role=\"button\"\n      href={href}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      onClick={openSidePanel}\n      {...testIdProps('card-side-panel-trigger')}\n    >\n      <SanitizedHtmlSpan\n        ref={ref}\n        sx={{\n          code: {\n            fontFamily: 'fonts.mono',\n            fontSize: 0\n          },\n          color: 'fg.default',\n          '&:hover': {\n            cursor: 'pointer',\n            color: 'accent.fg',\n            textDecoration: 'underline'\n          }\n        }}\n      >\n        {html}\n      </SanitizedHtmlSpan>\n    </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column-frame.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', flexShrink: 0, display: 'flex'}}"
        }
      ],
      "line_start": 92,
      "line_end": 92,
      "text": "<Box sx={{flexDirection: 'column', flexShrink: 0, display: 'flex'}}>{headerContent}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column-frame.tsx",
      "name": "Box",
      "line_start": 27,
      "line_end": 27,
      "text": " styled(Box)`\n  margin-right: ${themeGet('space.2')};\n  width: ${COLUMN_WIDTH};\n  min-width: ${COLUMN_WIDTH};\n  display: flex;\n  flex-direction: column;\n  overflow-y: hidden;\n  border-radius: ${themeGet('radii.2')};\n  background-color: ${themeGet('colors.canvas.inset')};\n\n  &.hidden {\n    display: none;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            bg: 'canvas.inset',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            maxWidth: COLUMN_WIDTH,\n            px: '10px',\n            pt: 2,\n            // The scrollable container of the cards has the other 2px of padding\n            pb: '2px',\n            display: 'flex'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...drag.handle.props}"
        }
      ],
      "line_start": 271,
      "line_end": 353,
      "text": "\n        <Box\n          sx={{\n            bg: 'canvas.inset',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            maxWidth: COLUMN_WIDTH,\n            px: '10px',\n            pt: 2,\n            // The scrollable container of the cards has the other 2px of padding\n            pb: '2px',\n            display: 'flex'\n          }}\n          {...drag.handle.props}\n        >\n          <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n            <EditableColumnName\n              option={option}\n              onNameChange={submitRenameColumn}\n              isUserEditable={isUserEditable}\n              initialFocus={initialNameFocus}\n              isEditing={isEditingName}\n              setIsEditing={setIsEditingName}\n            />\n\n            <CounterLabel sx={{color: 'fg.muted', ml: 2}} {...testIdProps('column-counter')}>\n              {items.length}\n            </CounterLabel>\n\n            {isCurrentIteration && <CurrentIterationLabel sx={{ml: 2}} />}\n          </Box>\n\n          <Box sx={{backgroundColor: 'canvas.inset', alignItems: 'center', display: 'flex'}}>\n            {isUserEditable && (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    variant=\"invisible\"\n                    icon={KebabHorizontalIcon}\n                    aria-label=\"Column context menu\"\n                    {...testIdProps('column-context-menu-trigger')}\n                    sx={{\n                      color: 'fg.muted',\n                      width: '24px',\n                      height: '24px',\n                      padding: 0\n                    }}\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay align=\"end\">\n                  <ActionList>\n                    <ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>\n                    <ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>\n\n                    <ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            )}\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row', alignItems: 'center'}}"
        }
      ],
      "line_start": 285,
      "line_end": 300,
      "text": "<Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\n            <EditableColumnName\n              option={option}\n              onNameChange={submitRenameColumn}\n              isUserEditable={isUserEditable}\n              initialFocus={initialNameFocus}\n              isEditing={isEditingName}\n              setIsEditing={setIsEditingName}\n            />\n\n            <CounterLabel sx={{color: 'fg.muted', ml: 2}} {...testIdProps('column-counter')}>\n              {items.length}\n            </CounterLabel>\n\n            {isCurrentIteration && <CurrentIterationLabel sx={{ml: 2}} />}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ml: 2}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('column-counter')}"
        }
      ],
      "line_start": 295,
      "line_end": 297,
      "text": "<CounterLabel sx={{color: 'fg.muted', ml: 2}} {...testIdProps('column-counter')}>\n              {items.length}\n            </CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{backgroundColor: 'canvas.inset', alignItems: 'center', display: 'flex'}}"
        }
      ],
      "line_start": 302,
      "line_end": 352,
      "text": "<Box sx={{backgroundColor: 'canvas.inset', alignItems: 'center', display: 'flex'}}>\n            {isUserEditable && (\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    variant=\"invisible\"\n                    icon={KebabHorizontalIcon}\n                    aria-label=\"Column context menu\"\n                    {...testIdProps('column-context-menu-trigger')}\n                    sx={{\n                      color: 'fg.muted',\n                      width: '24px',\n                      height: '24px',\n                      padding: 0\n                    }}\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay align=\"end\">\n                  <ActionList>\n                    <ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>\n                    <ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>\n\n                    <ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 304,
      "line_end": 350,
      "text": "\n              <ActionMenu>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    variant=\"invisible\"\n                    icon={KebabHorizontalIcon}\n                    aria-label=\"Column context menu\"\n                    {...testIdProps('column-context-menu-trigger')}\n                    sx={{\n                      color: 'fg.muted',\n                      width: '24px',\n                      height: '24px',\n                      padding: 0\n                    }}\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay align=\"end\">\n                  <ActionList>\n                    <ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>\n                    <ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>\n\n                    <ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 305,
      "line_end": 318,
      "text": "<ActionMenu.Anchor>\n                  <IconButton\n                    variant=\"invisible\"\n                    icon={KebabHorizontalIcon}\n                    aria-label=\"Column context menu\"\n                    {...testIdProps('column-context-menu-trigger')}\n                    sx={{\n                      color: 'fg.muted',\n                      width: '24px',\n                      height: '24px',\n                      padding: 0\n                    }}\n                  />\n                </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"end\""
        }
      ],
      "line_start": 319,
      "line_end": 349,
      "text": "<ActionMenu.Overlay align=\"end\">\n                  <ActionList>\n                    <ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>\n                    <ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>\n\n                    <ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>\n                  </ActionList>\n                </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 320,
      "line_end": 348,
      "text": "<ActionList>\n                    <ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>\n                    <ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>\n\n                    <ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>\n                  </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{renameOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('column-context-menu-rename')}"
        }
      ],
      "line_start": 321,
      "line_end": 326,
      "text": "<ActionList.Item onSelect={renameOnClick} {...testIdProps('column-context-menu-rename')}>\n                      <ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>\n                      Rename\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 322,
      "line_end": 324,
      "text": "<ActionList.LeadingVisual>\n                        <PencilIcon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{archiveableItems.length === 0}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{archiveOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                      {...testIdProps('column-context-menu-archive')}"
        }
      ],
      "line_start": 327,
      "line_end": 336,
      "text": "<ActionList.Item\n                      disabled={archiveableItems.length === 0}\n                      onSelect={archiveOnClick}\n                      {...testIdProps('column-context-menu-archive')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>\n                      Archive all cards\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 332,
      "line_end": 334,
      "text": "<ActionList.LeadingVisual>\n                        <ArchiveIcon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{deleteOnClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                      {...testIdProps('column-context-menu-delete')}"
        }
      ],
      "line_start": 338,
      "line_end": 347,
      "text": "<ActionList.Item\n                      variant=\"danger\"\n                      onSelect={deleteOnClick}\n                      {...testIdProps('column-context-menu-delete')}\n                    >\n                      <ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>\n                      Delete\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 343,
      "line_end": 345,
      "text": "<ActionList.LeadingVisual>\n                        <TrashIcon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            bg: 'canvas.inset',\n            maxWidth: COLUMN_WIDTH,\n            px: '10px',\n            // The scrollable container of the cards has the other 2px of padding\n            pb: '8px'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...drag.handle.props}"
        }
      ],
      "line_start": 357,
      "line_end": 383,
      "text": "\n        <Box\n          sx={{\n            bg: 'canvas.inset',\n            maxWidth: COLUMN_WIDTH,\n            px: '10px',\n            // The scrollable container of the cards has the other 2px of padding\n            pb: '8px'\n          }}\n          {...drag.handle.props}\n        >\n          <Text\n            role=\"button\"\n            sx={{\n              cursor: 'default',\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'pre',\n              fontSize: 1,\n              px: 1,\n              color: 'fg.muted'\n            }}\n            {...testIdProps(`${option.id}-date-range-board-header`)}\n          >\n            {iterationDateRange}\n          </Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Text",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              cursor: 'default',\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'pre',\n              fontSize: 1,\n              px: 1,\n              color: 'fg.muted'\n            }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps(`${option.id}-date-range-board-header`)}"
        }
      ],
      "line_start": 367,
      "line_end": 382,
      "text": "<Text\n            role=\"button\"\n            sx={{\n              cursor: 'default',\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'pre',\n              fontSize: 1,\n              px: 1,\n              color: 'fg.muted'\n            }}\n            {...testIdProps(`${option.id}-date-range-board-header`)}\n          >\n            {iterationDateRange}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...drop.props}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{dropRef}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`drop-zone-${option.name}`)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          flexDirection: 'column',\n          backgroundColor: 'canvas.inset',\n          flexGrow: 1,\n          overflowY: 'auto',\n          position: 'relative',\n          px: '10px',\n          pt: '2px',\n          display: 'flex'\n        }}"
        }
      ],
      "line_start": 385,
      "line_end": 422,
      "text": "<Box\n        {...drop.props}\n        ref={dropRef}\n        {...testIdProps(`drop-zone-${option.name}`)}\n        sx={{\n          flexDirection: 'column',\n          backgroundColor: 'canvas.inset',\n          flexGrow: 1,\n          overflowY: 'auto',\n          position: 'relative',\n          px: '10px',\n          pt: '2px',\n          display: 'flex'\n        }}\n      >\n        {showEmptyColumnSash && <Sash />}\n        {/* We use a `null` (for window) rootRef instead of the drop ref so\n        that we still render while dragging */}\n        <ObserverProvider rootRef={null} sizeEstimate={125} disableHide={isDragging}>\n          {items.map((item, cardIndex) => {\n            const focusType =\n              focusedCard?.details.x === index && focusedCard?.details.y === item.id ? focusedCard.focusType : undefined\n            return (\n              <DraggableCard\n                key={item.id}\n                item={item}\n                index={cardIndex}\n                column={option.id}\n                columnIndex={index}\n                focusType={focusType}\n              />\n            )\n          })}\n        </ObserverProvider>\n\n        <IsAddingItemsIndicator isVisible={Boolean(isAddingNewItems)} />\n        <NamedPortalRoot portalname={`column-${option.id}-portal-root`} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Add item\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onAddItemClick}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            ...unstyledButtonStyles,\n            color: 'fg.muted',\n            py: '12px',\n            fontSize: 0,\n            alignItems: 'center',\n            display: 'flex'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('board-view-add-card-button')}"
        }
      ],
      "line_start": 425,
      "line_end": 440,
      "text": "\n        <Box\n          as=\"button\"\n          aria-label=\"Add item\"\n          onClick={onAddItemClick}\n          sx={{\n            ...unstyledButtonStyles,\n            color: 'fg.muted',\n            py: '12px',\n            fontSize: 0,\n            alignItems: 'center',\n            display: 'flex'\n          }}\n          {...testIdProps('board-view-add-card-button')}\n        >\n          <StyledOcticon icon={PlusIcon} sx={{mr: 2, color: 'fg.muted'}} /> Add item\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/column.tsx",
      "name": "Box",
      "line_start": 480,
      "line_end": 480,
      "text": " styled(Box)`\n  animation: ${fadeIn} 0.2s ease-out;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/board/column/draft-column.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: '10px', pt: '8px', display: 'flex'}}"
        }
      ],
      "line_start": 56,
      "line_end": 65,
      "text": "\n        <Box sx={{px: '10px', pt: '8px', display: 'flex'}}>\n          <EditableColumnName\n            option={draftOption}\n            onNameChange={onNameChange}\n            isUserEditable={true}\n            isEditing={true}\n            setIsEditing={setIsEditing}\n            placeholder=\"New column\"\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/board/column/editable-column-name.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{trigger}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{startEditing}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{!isEditing ? onKeyDown : undefined}"
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{isUserEditable ? 0 : -1}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('board-view-column-title-text')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          ...sx,\n          height: COLUMN_NAME_HEIGHT,\n          my: 1,\n          overflow: 'hidden',\n          px: 1\n        }}"
        }
      ],
      "line_start": 158,
      "line_end": 208,
      "text": "\n      <Box\n        ref={trigger}\n        onClick={startEditing}\n        onKeyDown={!isEditing ? onKeyDown : undefined}\n        tabIndex={isUserEditable ? 0 : -1}\n        {...testIdProps('board-view-column-title-text')}\n        sx={{\n          ...sx,\n          height: COLUMN_NAME_HEIGHT,\n          my: 1,\n          overflow: 'hidden',\n          px: 1\n        }}\n      >\n        {isEditing ? (\n          <>\n            <EmojiPicker>\n              <AutosizeTextInput\n                as={BorderlessTextInput}\n                ref={input}\n                onChange={onInputChange}\n                onBlur={submitChange}\n                onMouseDown={onInputMouseDown}\n                {...inputCompositionProps}\n                type=\"text\"\n                value={newValue}\n                placeholder={placeholder}\n                sx={{\n                  height: COLUMN_NAME_HEIGHT\n                }}\n                {...SHARED_TEXT_STYLE}\n              />\n            </EmojiPicker>\n          </>\n        ) : (\n          <SanitizedHtmlSpan\n            role=\"button\"\n            sx={{\n              lineHeight: COLUMN_NAME_HEIGHT,\n              cursor: 'default',\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'pre'\n            }}\n            {...SHARED_TEXT_STYLE}\n          >\n            {option.nameHtml}\n          </SanitizedHtmlSpan>\n        )}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "name": "IconButton",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onAction}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{onAction}"
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{anchorSx}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('anchor-button')}"
        },
        {
          "name": "icon",
          "kind": "JsxExpression",
          "text": "{CalendarIcon}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        }
      ],
      "line_start": 69,
      "line_end": 80,
      "text": "\n      <IconButton\n        onClick={onAction}\n        onKeyDown={onAction}\n        type=\"button\"\n        sx={anchorSx}\n        {...testIdProps('anchor-button')}\n        icon={CalendarIcon}\n        ref={ref}\n        disabled={disabled}\n      >\n        Open date picker (currently selected: {children})\n      </IconButton>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 1, textAlign: 'left', overflow: 'hidden', textOverflow: 'ellipsis'}}"
        }
      ],
      "line_start": 93,
      "line_end": 93,
      "text": "<Text sx={{flex: 1, textAlign: 'left', overflow: 'hidden', textOverflow: 'ellipsis'}}>{children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-anchor.tsx",
      "name": "Button",
      "line_start": 13,
      "line_end": 13,
      "text": " styled(Button)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  justify-content: space-between;\n  overflow: hidden;\n\n  & ${Text} ~ svg {\n    margin-left: ${themeGet('space.2')};\n  }\n  & svg ~ ${Text} {\n    margin-left: ${themeGet('space.2')};\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-confirm-close-dialog.tsx",
      "name": "ConfirmationDialog",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Save Changes?\""
        },
        {
          "name": "confirmButtonContent",
          "kind": "JsxExpression",
          "text": "{\n        <>\n          <CheckIcon />\n          <Text sx={{ml: 1}}>Save</Text>\n        </>\n      }"
        },
        {
          "name": "cancelButtonContent",
          "kind": "JsxExpression",
          "text": "{\n        <>\n          <TrashIcon />\n          <Text sx={{ml: 1}}>Discard</Text>\n        </>\n      }"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{onClose}"
        }
      ],
      "line_start": 22,
      "line_end": 39,
      "text": "\n    <ConfirmationDialog\n      title=\"Save Changes?\"\n      confirmButtonContent={\n        <>\n          <CheckIcon />\n          <Text sx={{ml: 1}}>Save</Text>\n        </>\n      }\n      cancelButtonContent={\n        <>\n          <TrashIcon />\n          <Text sx={{ml: 1}}>Discard</Text>\n        </>\n      }\n      onClose={onClose}\n    >\n      You have unsaved changes, would you like to save them?\n    </ConfirmationDialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-confirm-close-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 27,
      "line_end": 27,
      "text": "<Text sx={{ml: 1}}>Save</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-confirm-close-dialog.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 1}}"
        }
      ],
      "line_start": 33,
      "line_end": 33,
      "text": "<Text sx={{ml: 1}}>Discard</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-overlay.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "focusTrapSettings",
          "kind": "JsxExpression",
          "text": "{{restoreFocusOnCleanUp: true}}"
        },
        {
          "name": "focusZoneSettings",
          "kind": "JsxExpression",
          "text": "{{disabled: true}}"
        },
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{close}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{null}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{\n        'aria-label': 'Date Picker',\n        role: 'dialog',\n        'aria-modal': 'true'\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...externalProps}"
        }
      ],
      "line_start": 12,
      "line_end": 28,
      "text": "\n    <AnchoredOverlay\n      focusTrapSettings={{restoreFocusOnCleanUp: true}}\n      focusZoneSettings={{disabled: true}}\n      open={isOpen}\n      onClose={close}\n      onOpen={open}\n      renderAnchor={null}\n      anchorRef={anchorRef}\n      overlayProps={{\n        'aria-label': 'Date Picker',\n        role: 'dialog',\n        'aria-modal': 'true'\n      }}\n      {...externalProps}\n    >\n      <DatePickerPanel />\n    </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('datepicker-compressed-header')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 1}}"
        }
      ],
      "line_start": 284,
      "line_end": 287,
      "text": "\n          <Box {...testIdProps('datepicker-compressed-header')} sx={{flex: 1}}>\n            {getMonthPicker}\n            {getYearPicker}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "props": [],
      "line_start": 326,
      "line_end": 341,
      "text": "<Box>\n                {showTodayButton && (\n                  <Button\n                    variant=\"invisible\"\n                    size=\"small\"\n                    onClick={goToToday}\n                    aria-label=\"Go to today's date\"\n                    disabled={\n                      currentViewingDate.getFullYear() === new Date().getFullYear() &&\n                      currentViewingDate.getMonth() === new Date().getMonth()\n                    }\n                  >\n                    Today\n                  </Button>\n                )}\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{goToToday}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Go to today's date\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{\n                      currentViewingDate.getFullYear() === new Date().getFullYear() &&\n                      currentViewingDate.getMonth() === new Date().getMonth()\n                    }"
        }
      ],
      "line_start": 328,
      "line_end": 339,
      "text": "\n                  <Button\n                    variant=\"invisible\"\n                    size=\"small\"\n                    onClick={goToToday}\n                    aria-label=\"Go to today's date\"\n                    disabled={\n                      currentViewingDate.getFullYear() === new Date().getFullYear() &&\n                      currentViewingDate.getMonth() === new Date().getMonth()\n                    }\n                  >\n                    Today\n                  </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!isDirty}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => saveValue()}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Apply selection and close\""
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"submit\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                  {...testIdProps('datepicker-apply')}"
        }
      ],
      "line_start": 344,
      "line_end": 354,
      "text": "\n                <Button\n                  variant=\"primary\"\n                  size=\"small\"\n                  disabled={!isDirty}\n                  onClick={() => saveValue()}\n                  aria-label=\"Apply selection and close\"\n                  type=\"submit\"\n                  {...testIdProps('datepicker-apply')}\n                >\n                  Apply\n                </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "line_start": 21,
      "line_end": 21,
      "text": " styled(Box)`\n  align-items: stretch;\n  background-color: ${themeGet('colors.canvas.default')};\n  display: flex;\n  flex-direction: column;\n  position: relative;\n\n  & *[disabled],\n  & *[aria-disabled='true'] {\n    pointer-events: none;\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "line_start": 34,
      "line_end": 34,
      "text": " styled(Box)`\n  display: flex;\n  justify-content: space-between;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  padding: ${themeGet('space.3')};\n  z-index: 10;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "line_start": 45,
      "line_end": 45,
      "text": " styled(Box)`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: row;\n  gap: ${themeGet('space.6')};\n  margin-top: ${themeGet('space.1')};\n  padding: ${themeGet('space.3')};\n  position: relative;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "line_start": 55,
      "line_end": 55,
      "text": " styled(Box)`\n  border-top: 1px solid;\n  border-top-color: ${themeGet('colors.border.default')};\n  display: flex;\n  align-items: stretch;\n  flex-direction: column;\n  padding: ${themeGet('space.2')} ${themeGet('space.3')};\n  gap: ${themeGet('space.2')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Box",
      "line_start": 65,
      "line_end": 65,
      "text": " styled(Box)`\n  align-items: center;\n  display: flex;\n  flex-basis: 0;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  gap: ${themeGet('space.2')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-panel.tsx",
      "name": "Button",
      "line_start": 75,
      "line_end": 75,
      "text": " styled(Button)`\n  width: 40px;\n  height: 28px;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          width: calendarButton ? '22ch' : '16ch',\n          flexGrow: fullWidth ? 1 : 0,\n          position: 'relative'\n        }}"
        }
      ],
      "line_start": 230,
      "line_end": 276,
      "text": "\n      <Box\n        sx={{\n          width: calendarButton ? '22ch' : '16ch',\n          flexGrow: fullWidth ? 1 : 0,\n          position: 'relative'\n        }}\n      >\n        <TextInput\n          {...inputProps}\n          onFocus={e => {\n            inputProps.onFocus?.(e)\n            if (!disableShortcuts) arrowKeyModeRef.current = true\n            onFocus?.()\n          }}\n          onBlur={e => {\n            arrowKeyModeRef.current = false\n            inputProps.onBlur?.(e)\n            resetText()\n          }}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            inputProps.onChange?.(e)\n            arrowKeyModeRef.current = false\n          }}\n          onKeyDown={keyDownHandler}\n          // Order is onMouseDown -> onFocus -> onClick -> onMouseUp, so mouseDown will set false and then\n          // focus will set true, unless it was already focused in which case it will stay false.\n          // This lets the user click again inside the input to exit arrow key mode.\n          onMouseDown={() => (arrowKeyModeRef.current = false)}\n          onMouseUp={() => {\n            // Sometimes if the user moves their mouse slightly on the initial click, the browser will treat it\n            // as selecting text and then we won't have all text selected, so we have to re-trigger selectAll.\n            if (arrowKeyModeRef.current) selectAll()\n          }}\n          size=\"small\"\n          placeholder={placeholder}\n          aria-label={ariaLabel}\n          aria-describedby={descriptionId}\n          aria-errormessage={errorId}\n          ref={inputRef}\n          sx={{width: '100%', borderColor: activeRangeEnd ? 'accent.fg' : undefined, ...sx}}\n          disabled={disabled}\n        />\n        <ValidationErrorPopover id={errorId} message={validity.message} position=\"above\" />\n        <HiddenDescription id={descriptionId}>\n          {!disableShortcuts ? DateResources.shortcutInputDescription : DateResources.dateInputDescription}\n        </HiddenDescription>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', flexGrow: 1}}"
        }
      ],
      "line_start": 365,
      "line_end": 368,
      "text": "\n      <Box sx={{position: 'relative', flexGrow: 1}}>\n        {input}\n        <ValidationErrorPopover message={validity.message} id={errorId} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "FormControl",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          width: '14ch',\n          maxWidth: '100%',\n          flexGrow: fullWidth ? 1 : 0,\n          position: 'relative'\n        }}"
        }
      ],
      "line_start": 370,
      "line_end": 393,
      "text": "\n      <FormControl\n        sx={{\n          width: '14ch',\n          maxWidth: '100%',\n          flexGrow: fullWidth ? 1 : 0,\n          position: 'relative'\n        }}\n      >\n        <FormControl.Label visuallyHidden>Selected Dates</FormControl.Label>\n        {typedDate && validity.status === 'success' ? (\n          <FormControl.Validation variant=\"success\" aria-live=\"polite\">\n            Press <KeyboardKey>Enter</KeyboardKey> to add {format(typedDate)}.\n          </FormControl.Validation>\n        ) : validity.status === 'error' && validity.message ? (\n          <FormControl.Validation variant=\"error\" aria-live=\"polite\">\n            {validity.message}\n          </FormControl.Validation>\n        ) : (\n          <FormControl.Caption aria-live=\"polite\">\n            Hold <KeyboardKey>{isMacOS() ? '⌘' : 'Ctrl'}</KeyboardKey> to click multiple dates.\n          </FormControl.Caption>\n        )}\n        {input}\n      </FormControl>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "FormControl.Label",
      "parent": "FormControl",
      "child": "Label",
      "props": [
        {
          "name": "visuallyHidden"
        }
      ],
      "line_start": 378,
      "line_end": 378,
      "text": "<FormControl.Label visuallyHidden>Selected Dates</FormControl.Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "FormControl.Validation",
      "parent": "FormControl",
      "child": "Validation",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"success\""
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        }
      ],
      "line_start": 380,
      "line_end": 382,
      "text": "\n          <FormControl.Validation variant=\"success\" aria-live=\"polite\">\n            Press <KeyboardKey>Enter</KeyboardKey> to add {format(typedDate)}.\n          </FormControl.Validation>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "FormControl.Validation",
      "parent": "FormControl",
      "child": "Validation",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"error\""
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        }
      ],
      "line_start": 384,
      "line_end": 386,
      "text": "\n          <FormControl.Validation variant=\"error\" aria-live=\"polite\">\n            {validity.message}\n          </FormControl.Validation>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "FormControl.Caption",
      "parent": "FormControl",
      "child": "Caption",
      "props": [
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        }
      ],
      "line_start": 388,
      "line_end": 390,
      "text": "\n          <FormControl.Caption aria-live=\"polite\">\n            Hold <KeyboardKey>{isMacOS() ? '⌘' : 'Ctrl'}</KeyboardKey> to click multiple dates.\n          </FormControl.Caption>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 478,
      "line_end": 506,
      "text": "\n        <Box ref={anchorRef} sx={{display: 'flex', alignItems: 'center'}}>\n          <SingleDateInput\n            aria-label=\"Start date\"\n            ref={firstRef}\n            value={selection?.from ?? null}\n            onChange={from => onDateInput({from, to: selection?.to ?? null})}\n            onFocus={() => setActiveRangeEnd('from')}\n            fullWidth={fullWidth}\n            disableShortcuts={isAnchor}\n            activeRangeEnd={!isAnchor && activeRangeEnd === 'from'}\n            calendarButton={calendarButtonProps}\n            sx={sx}\n            disabled={disabled}\n          />\n          <Text sx={{flexGrow: 0, pr: 1, pl: 1}}>{' - '}</Text>\n          <SingleDateInput\n            aria-label=\"End date\"\n            ref={secondRef}\n            value={selection?.to ?? null}\n            onChange={to => onDateInput({from: selection?.from ?? to, to})}\n            onFocus={() => setActiveRangeEnd('to')}\n            fullWidth={fullWidth}\n            disableShortcuts={isAnchor}\n            activeRangeEnd={!isAnchor && activeRangeEnd === 'to'}\n            calendarButton={rangeEndCalendarButtonProps}\n            sx={sx}\n            disabled={disabled}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexGrow: 0, pr: 1, pl: 1}}"
        }
      ],
      "line_start": 492,
      "line_end": 492,
      "text": "<Text sx={{flexGrow: 0, pr: 1, pl: 1}}>{' - '}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/date-picker-text-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexGrow: 1, display: 'flex', justifyContent: 'flex-end', alignItems: 'center'}}"
        }
      ],
      "line_start": 537,
      "line_end": 537,
      "text": "\n      <Box sx={{flexGrow: 1, display: 'flex', justifyContent: 'flex-end', alignItems: 'center'}}>{input}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "name": "Text",
      "props": [],
      "line_start": 340,
      "line_end": 340,
      "text": "<Text>{date.getDate()}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/day.tsx",
      "name": "Box",
      "line_start": 20,
      "line_end": 20,
      "text": " styled(Box)`\n  align-content: center;\n  display: flex;\n  justify-content: center;\n  min-width: 38px;\n  min-height: 38px;\n  padding: ${themeGet('space.1')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/hidden-description.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'none'}}"
        },
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{id}"
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        }
      ],
      "line_start": 7,
      "line_end": 9,
      "text": "\n  // Normally display:none will not be read, but it will when used as a description\n  // https://www.tpgi.com/short-note-on-aria-labelledby-and-aria-describedby/\n  <Text sx={{display: 'none'}} id={id} aria-live=\"polite\">\n    {children}\n  </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "name": "Box",
      "line_start": 27,
      "line_end": 27,
      "text": " styled(Box)`\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "name": "Box",
      "line_start": 33,
      "line_end": 33,
      "text": " styled(Box)`\n  display: flex;\n  justify-content: space-between;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "name": "Text",
      "line_start": 38,
      "line_end": 38,
      "text": " styled(Text)`\n  color: ${themeGet('colors.fg.default')};\n  font-size: ${themeGet('fontSizes.1')};\n  font-weight: ${themeGet('fontWeights.bold')};\n  grid-area: month;\n  height: ${themeGet('space.4')};\n  text-align: center;\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/date-picker/month.tsx",
      "name": "Text",
      "line_start": 47,
      "line_end": 47,
      "text": " styled(Text)`\n  color: ${themeGet('colors.fg.subtle')};\n  font-family: ${themeGet('fonts.mono')};\n  font-size: ${themeGet('fontSizes.0')};\n  justify-self: center;\n  min-width: 38px;\n  min-height: 38px;\n  text-align: center;\n  padding: ${themeGet('space.3')} ${themeGet('space.1')} ${themeGet('space.2')};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'center', py: 2}}"
        }
      ],
      "line_start": 22,
      "line_end": 24,
      "text": "\n  <Box sx={{display: 'flex', justifyContent: 'center', py: 2}}>\n    <Spinner size=\"small\" />\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "name": "Overlay",
      "props": [
        {
          "name": "onEscape",
          "kind": "JsxExpression",
          "text": "{onClose}"
        },
        {
          "name": "onClickOutside",
          "kind": "JsxExpression",
          "text": "{onClose}"
        },
        {
          "name": "returnFocusRef",
          "kind": "JsxExpression",
          "text": "{inputRef}"
        },
        {
          "name": "preventFocusOnOpen"
        },
        {
          "name": "portalContainerName",
          "kind": "JsxExpression",
          "text": "{portalName}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'fixed'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...{top, left}}"
        }
      ],
      "line_start": 82,
      "line_end": 100,
      "text": "\n    <Overlay\n      onEscape={onClose}\n      onClickOutside={onClose}\n      returnFocusRef={inputRef}\n      preventFocusOnOpen\n      portalContainerName={portalName}\n      sx={{position: 'fixed'}}\n      {...{top, left}}\n    >\n      <ActionList selectionVariant=\"single\" ref={setList} {...testIdProps('autocomplete-suggestions')}>\n        {suggestions === 'loading' ? (\n          <LoadingIndicator />\n        ) : (\n          suggestions?.map(suggestion => (\n            <SuggestionListItem suggestion={suggestion} key={getSuggestionKey(suggestion)} />\n          ))\n        )}\n      </ActionList>\n    </Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/autocomplete-suggestions.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{setList}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('autocomplete-suggestions')}"
        }
      ],
      "line_start": 91,
      "line_end": 99,
      "text": "<ActionList selectionVariant=\"single\" ref={setList} {...testIdProps('autocomplete-suggestions')}>\n        {suggestions === 'loading' ? (\n          <LoadingIndicator />\n        ) : (\n          suggestions?.map(suggestion => (\n            <SuggestionListItem suggestion={suggestion} key={getSuggestionKey(suggestion)} />\n          ))\n        )}\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/inline-autocomplete.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'inline-block', '& > *': {width: '100%'}, ...sx, position: 'relative'}}"
        }
      ],
      "line_start": 151,
      "line_end": 162,
      "text": "\n    // Try to get as close as possible to making the container 'invisible' by making it shrink\n    // tight to child input\n    <Box sx={{display: 'inline-block', '& > *': {width: '100%'}, ...sx, position: 'relative'}}>\n      {input}\n      <AutocompleteSuggestions\n        suggestions={suggestions}\n        inputRef={inputRef}\n        onCommit={onCommit}\n        onClose={onHideSuggestions}\n        top={suggestionsOffset.top}\n        left={suggestionsOffset.left}\n        visible={suggestionsVisible}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 2, display: 'flex', gap: 2, justifyContent: 'space-between', minHeight: '36px'}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"footer\""
        }
      ],
      "line_start": 24,
      "line_end": 54,
      "text": "\n  <Box sx={{pt: 2, display: 'flex', gap: 2, justifyContent: 'space-between', minHeight: '36px'}} as=\"footer\">\n    <Box sx={{display: 'flex', gap: 1, alignItems: 'center', fontSize: 0}}>\n      {previewMode ? (\n        <></>\n      ) : fileUploadProgress ? (\n        <Text sx={{py: 1, px: 2}}>\n          <Spinner size=\"small\" sx={{mr: 1, verticalAlign: 'text-bottom'}} />{' '}\n          {MarkdownEditorResources.filesUploadingNote(fileUploadProgress)}\n        </Text>\n      ) : errorMessage ? (\n        <Text sx={{py: 1, px: 2, color: 'danger.fg'}} aria-live=\"polite\" {...testIdProps('error-message')}>\n          <Text sx={{mr: 1}}>\n            <AlertIcon size=\"small\" />\n          </Text>{' '}\n          {errorMessage}\n        </Text>\n      ) : (\n        <>\n          <MarkdownSupportedHint condensed={condensed} />\n\n          {uploadButtonProps && (\n            <>\n              <VisualSeparator />\n              <FileUploadButton condensed={condensed} fileDraggedOver={fileDraggedOver} {...uploadButtonProps} />\n            </>\n          )}\n        </>\n      )}\n    </Box>\n    {!fileUploadProgress && <Box sx={{display: 'flex', gap: 2}}>{actionButtons}</Box>}\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 1, alignItems: 'center', fontSize: 0}}"
        }
      ],
      "line_start": 25,
      "line_end": 52,
      "text": "<Box sx={{display: 'flex', gap: 1, alignItems: 'center', fontSize: 0}}>\n      {previewMode ? (\n        <></>\n      ) : fileUploadProgress ? (\n        <Text sx={{py: 1, px: 2}}>\n          <Spinner size=\"small\" sx={{mr: 1, verticalAlign: 'text-bottom'}} />{' '}\n          {MarkdownEditorResources.filesUploadingNote(fileUploadProgress)}\n        </Text>\n      ) : errorMessage ? (\n        <Text sx={{py: 1, px: 2, color: 'danger.fg'}} aria-live=\"polite\" {...testIdProps('error-message')}>\n          <Text sx={{mr: 1}}>\n            <AlertIcon size=\"small\" />\n          </Text>{' '}\n          {errorMessage}\n        </Text>\n      ) : (\n        <>\n          <MarkdownSupportedHint condensed={condensed} />\n\n          {uploadButtonProps && (\n            <>\n              <VisualSeparator />\n              <FileUploadButton condensed={condensed} fileDraggedOver={fileDraggedOver} {...uploadButtonProps} />\n            </>\n          )}\n        </>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{py: 1, px: 2}}"
        }
      ],
      "line_start": 29,
      "line_end": 32,
      "text": "\n        <Text sx={{py: 1, px: 2}}>\n          <Spinner size=\"small\" sx={{mr: 1, verticalAlign: 'text-bottom'}} />{' '}\n          {MarkdownEditorResources.filesUploadingNote(fileUploadProgress)}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{py: 1, px: 2, color: 'danger.fg'}}"
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('error-message')}"
        }
      ],
      "line_start": 34,
      "line_end": 39,
      "text": "\n        <Text sx={{py: 1, px: 2, color: 'danger.fg'}} aria-live=\"polite\" {...testIdProps('error-message')}>\n          <Text sx={{mr: 1}}>\n            <AlertIcon size=\"small\" />\n          </Text>{' '}\n          {errorMessage}\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 1}}"
        }
      ],
      "line_start": 35,
      "line_end": 37,
      "text": "<Text sx={{mr: 1}}>\n            <AlertIcon size=\"small\" />\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 2}}"
        }
      ],
      "line_start": 53,
      "line_end": 53,
      "text": " <Box sx={{display: 'flex', gap: 2}}>{actionButtons}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{ImageIcon}"
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default', fontWeight: fileDraggedOver ? 'bold' : 'normal', px: 2}}"
        },
        {
          "name": "onMouseDown",
          "kind": "JsxExpression",
          "text": "{(e: React.MouseEvent) => {\n      // Prevent pulling focus from the textarea\n      e.preventDefault()\n    }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n    {...testIdProps('file-upload-button')}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n    {...props}"
        }
      ],
      "line_start": 62,
      "line_end": 79,
      "text": "\n  <Button\n    variant=\"invisible\"\n    leadingIcon={ImageIcon}\n    size=\"small\"\n    sx={{color: 'fg.default', fontWeight: fileDraggedOver ? 'bold' : 'normal', px: 2}}\n    onMouseDown={(e: React.MouseEvent) => {\n      // Prevent pulling focus from the textarea\n      e.preventDefault()\n    }}\n    {...testIdProps('file-upload-button')}\n    {...props}\n  >\n    {condensed\n      ? MarkdownEditorResources.addFilesButtonTextShort\n      : fileDraggedOver\n      ? MarkdownEditorResources.dropFilesText\n      : MarkdownEditorResources.addFilesButtonText}\n  </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "LinkButton",
      "props": [
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{MarkdownIcon}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default', fontWeight: 'normal', px: 2}}"
        },
        {
          "name": "href",
          "kind": "StringLiteral",
          "text": "\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax\""
        },
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{MarkdownEditorResources.markdownDocsLabel}"
        }
      ],
      "line_start": 87,
      "line_end": 101,
      "text": "\n  <LinkButton\n    leadingIcon={MarkdownIcon}\n    variant=\"invisible\"\n    size=\"small\"\n    sx={{color: 'fg.default', fontWeight: 'normal', px: 2}}\n    href=\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax\"\n    target=\"_blank\"\n    // The markdown editor aria-description already describes it as Markdown editor, so it's\n    // redundant to say Markdown is supported again here. However for sighted users, they\n    // cannot see the aria-description so this is a useful hint for them. So the aria-label\n    // is different from the visible text content.\n    aria-label={MarkdownEditorResources.markdownDocsLabel}\n  >\n    {!condensed && <Text aria-hidden>{MarkdownEditorResources.markdownHint}</Text>}\n  </LinkButton>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-footer.tsx",
      "name": "Text",
      "props": [
        {
          "name": "aria-hidden"
        }
      ],
      "line_start": 100,
      "line_end": 100,
      "text": " <Text aria-hidden>{MarkdownEditorResources.markdownHint}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexWrap: 'wrap', justifyContent: 'flex-end', gap: condensed ? 0 : 3}}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        }
      ],
      "line_start": 85,
      "line_end": 186,
      "text": "<Box\n          sx={{display: 'flex', flexWrap: 'wrap', justifyContent: 'flex-end', gap: condensed ? 0 : 3}}\n          ref={containerRef}\n        >\n          <Box>\n            <ToolbarButton\n              ref={headerRef}\n              element=\"md-header\"\n              icon={HeadingIcon}\n              label={labels.header}\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={boldRef}\n              element=\"md-bold\"\n              icon={BoldIcon}\n              label={labels.bold}\n              shortcut=\"{CMD_CTRL}+B\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={italicRef}\n              element=\"md-italic\"\n              icon={ItalicIcon}\n              label={labels.italic}\n              shortcut=\"{CMD_CTRL}+I\"\n              disabled={disabled}\n            />\n          </Box>\n          <Box>\n            <ToolbarButton\n              ref={quoteRef}\n              element=\"md-quote\"\n              icon={QuoteIcon}\n              label={labels.quote}\n              shortcut=\"{CMD_CTRL}+Shift+.\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={codeRef}\n              element=\"md-code\"\n              icon={CodeIcon}\n              label={labels.code}\n              shortcut=\"{CMD_CTRL}+E\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={linkRef}\n              element=\"md-link\"\n              icon={LinkIcon}\n              label={labels.link}\n              shortcut=\"{CMD_CTRL}+K\"\n              disabled={disabled}\n            />\n          </Box>\n          <Box>\n            <ToolbarButton\n              ref={unorderedListRef}\n              element=\"md-unordered-list\"\n              icon={ListUnorderedIcon}\n              label={labels.unorderedList}\n              shortcut=\"{CMD_CTRL}+8\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={orderedListRef}\n              element=\"md-ordered-list\"\n              icon={ListOrderedIcon}\n              label={labels.orderedList}\n              shortcut=\"{CMD_CTRL}+Shift+7\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={taskListRef}\n              element=\"md-task-list\"\n              icon={TasklistIcon}\n              label={labels.taskList}\n              shortcut=\"{CMD_CTRL}+Shift+L\"\n              disabled={disabled}\n            />\n          </Box>\n          {!condensed && (\n            <Box>\n              <ToolbarButton\n                ref={mentionRef}\n                element=\"md-mention\"\n                icon={MentionIcon}\n                label={labels.mention}\n                shortcut=\"@\"\n                disabled={disabled}\n              />\n              <ToolbarButton\n                ref={referenceRef}\n                element=\"md-ref\"\n                icon={CrossReferenceIcon}\n                label={labels.reference}\n                shortcut=\"#\"\n                disabled={disabled}\n              />\n            </Box>\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "name": "Box",
      "props": [],
      "line_start": 89,
      "line_end": 113,
      "text": "<Box>\n            <ToolbarButton\n              ref={headerRef}\n              element=\"md-header\"\n              icon={HeadingIcon}\n              label={labels.header}\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={boldRef}\n              element=\"md-bold\"\n              icon={BoldIcon}\n              label={labels.bold}\n              shortcut=\"{CMD_CTRL}+B\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={italicRef}\n              element=\"md-italic\"\n              icon={ItalicIcon}\n              label={labels.italic}\n              shortcut=\"{CMD_CTRL}+I\"\n              disabled={disabled}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "name": "Box",
      "props": [],
      "line_start": 114,
      "line_end": 139,
      "text": "<Box>\n            <ToolbarButton\n              ref={quoteRef}\n              element=\"md-quote\"\n              icon={QuoteIcon}\n              label={labels.quote}\n              shortcut=\"{CMD_CTRL}+Shift+.\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={codeRef}\n              element=\"md-code\"\n              icon={CodeIcon}\n              label={labels.code}\n              shortcut=\"{CMD_CTRL}+E\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={linkRef}\n              element=\"md-link\"\n              icon={LinkIcon}\n              label={labels.link}\n              shortcut=\"{CMD_CTRL}+K\"\n              disabled={disabled}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "name": "Box",
      "props": [],
      "line_start": 140,
      "line_end": 165,
      "text": "<Box>\n            <ToolbarButton\n              ref={unorderedListRef}\n              element=\"md-unordered-list\"\n              icon={ListUnorderedIcon}\n              label={labels.unorderedList}\n              shortcut=\"{CMD_CTRL}+8\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={orderedListRef}\n              element=\"md-ordered-list\"\n              icon={ListOrderedIcon}\n              label={labels.orderedList}\n              shortcut=\"{CMD_CTRL}+Shift+7\"\n              disabled={disabled}\n            />\n            <ToolbarButton\n              ref={taskListRef}\n              element=\"md-task-list\"\n              icon={TasklistIcon}\n              label={labels.taskList}\n              shortcut=\"{CMD_CTRL}+Shift+L\"\n              disabled={disabled}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/editor-toolbar.tsx",
      "name": "Box",
      "props": [],
      "line_start": 167,
      "line_end": 184,
      "text": "\n            <Box>\n              <ToolbarButton\n                ref={mentionRef}\n                element=\"md-mention\"\n                icon={MentionIcon}\n                label={labels.mention}\n                shortcut=\"@\"\n                disabled={disabled}\n              />\n              <ToolbarButton\n                ref={referenceRef}\n                element=\"md-ref\"\n                icon={CrossReferenceIcon}\n                label={labels.reference}\n                shortcut=\"#\"\n                disabled={disabled}\n              />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          flexDirection: 'column',\n          width: '100%',\n          borderColor: 'border.default',\n          borderWidth: 1,\n          borderStyle: 'solid',\n          borderRadius: 2,\n          p: 2,\n          height: fullHeight ? '100%' : undefined,\n          minInlineSize: 'auto',\n          bg: 'canvas.default',\n          ...sx\n        }}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{setContainer}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"fieldset\""
        },
        {
          "name": "aria-describedby",
          "kind": "JsxExpression",
          "text": "{describedBy ? `${descriptionId} ${describedBy}` : descriptionId}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('markdown-editor')}"
        }
      ],
      "line_start": 189,
      "line_end": 285,
      "text": "\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          width: '100%',\n          borderColor: 'border.default',\n          borderWidth: 1,\n          borderStyle: 'solid',\n          borderRadius: 2,\n          p: 2,\n          height: fullHeight ? '100%' : undefined,\n          minInlineSize: 'auto',\n          bg: 'canvas.default',\n          ...sx\n        }}\n        ref={setContainer}\n        as=\"fieldset\"\n        aria-describedby={describedBy ? `${descriptionId} ${describedBy}` : descriptionId}\n        disabled={disabled}\n        {...testIdProps('markdown-editor')}\n      >\n        <legend style={a11yOnlyStyle}>{label ?? MarkdownEditorResources.editorLabel}</legend>\n        <span style={a11yOnlyStyle} id={descriptionId} aria-live=\"polite\">\n          {label && `${MarkdownEditorResources.editorLabel}: `}\n          {MarkdownEditorResources.viewModeDescription[view]}\n        </span>\n\n        <Box sx={{display: 'flex', pb: 2, gap: 2, justifyContent: 'space-between'}} as=\"header\">\n          <ViewSwitch\n            selectedView={view}\n            onViewSelect={setView}\n            condensed={condensed}\n            disabled={fileHandler.uploadProgress !== null}\n            onLoadPreview={() => {\n              if (previewStale.current) loadPreview(value)\n              previewStale.current = false\n            }}\n          />\n\n          <Box sx={{display: 'flex'}}>\n            {view === 'edit' && (\n              <MarkdownToolbar forInputId={id} disabled={disabled} ref={toolbarRef} condensed={condensed} />\n            )}\n          </Box>\n        </Box>\n\n        <MarkdownInput\n          value={value}\n          onChange={onInputChange}\n          onKeyDown={handleKeyDown}\n          suggestionsData={suggestionsData}\n          disabled={disabled}\n          placeholder={placeholder}\n          id={id}\n          maxLength={maxLength}\n          ref={inputRef}\n          fullHeight={fullHeight}\n          isDraggedOver={fileHandler.isDraggedOver}\n          minHeightLines={minHeightLines}\n          maxHeightLines={maxHeightLines}\n          visible={view === 'edit'}\n          {...fileHandler.pasteTargetProps}\n          {...fileHandler.dropTargetProps}\n        />\n\n        {view === 'preview' && (\n          <Box\n            sx={{\n              p: 1,\n              overflow: 'auto',\n              height: fullHeight ? '100%' : undefined,\n              minHeight: inputHeight.current,\n              boxSizing: 'border-box'\n            }}\n            aria-live=\"polite\"\n          >\n            <h2 style={a11yOnlyStyle}>{MarkdownEditorResources.previewLabel}</h2>\n            <SanitizedMarkdownViewer\n              dangerousRenderedHTML={{__html: html || MarkdownEditorResources.emptyPreviewPlaceholder}}\n              isLoading={isPreviewLoading}\n            />\n          </Box>\n        )}\n\n        <MarkdownEditorFooter\n          actionButtons={actionButtons}\n          condensed={condensed}\n          fileDraggedOver={fileHandler.isDraggedOver}\n          fileUploadProgress={fileHandler.uploadProgress}\n          uploadButtonProps={{\n            disabled,\n            ...fileHandler.clickTargetProps\n          }}\n          errorMessage={fileHandler.errorMessage}\n          previewMode={view === 'preview'}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', pb: 2, gap: 2, justifyContent: 'space-between'}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"header\""
        }
      ],
      "line_start": 216,
      "line_end": 233,
      "text": "<Box sx={{display: 'flex', pb: 2, gap: 2, justifyContent: 'space-between'}} as=\"header\">\n          <ViewSwitch\n            selectedView={view}\n            onViewSelect={setView}\n            condensed={condensed}\n            disabled={fileHandler.uploadProgress !== null}\n            onLoadPreview={() => {\n              if (previewStale.current) loadPreview(value)\n              previewStale.current = false\n            }}\n          />\n\n          <Box sx={{display: 'flex'}}>\n            {view === 'edit' && (\n              <MarkdownToolbar forInputId={id} disabled={disabled} ref={toolbarRef} condensed={condensed} />\n            )}\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 228,
      "line_end": 232,
      "text": "<Box sx={{display: 'flex'}}>\n            {view === 'edit' && (\n              <MarkdownToolbar forInputId={id} disabled={disabled} ref={toolbarRef} condensed={condensed} />\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              p: 1,\n              overflow: 'auto',\n              height: fullHeight ? '100%' : undefined,\n              minHeight: inputHeight.current,\n              boxSizing: 'border-box'\n            }}"
        },
        {
          "name": "aria-live",
          "kind": "StringLiteral",
          "text": "\"polite\""
        }
      ],
      "line_start": 255,
      "line_end": 270,
      "text": "\n          <Box\n            sx={{\n              p: 1,\n              overflow: 'auto',\n              height: fullHeight ? '100%' : undefined,\n              minHeight: inputHeight.current,\n              boxSizing: 'border-box'\n            }}\n            aria-live=\"polite\"\n          >\n            <h2 style={a11yOnlyStyle}>{MarkdownEditorResources.previewLabel}</h2>\n            <SanitizedMarkdownViewer\n              dangerousRenderedHTML={{__html: html || MarkdownEditorResources.emptyPreviewPlaceholder}}\n              isLoading={isPreviewLoading}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/markdown-viewer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-around', p: 2}}"
        }
      ],
      "line_start": 99,
      "line_end": 101,
      "text": "\n    <Box sx={{display: 'flex', justifyContent: 'space-around', p: 2}}>\n      <Spinner aria-label={MarkdownEditorResources.loadingContentLabel} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/view-switch.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'row'}}"
        }
      ],
      "line_start": 44,
      "line_end": 52,
      "text": "\n    <Box sx={{display: 'flex', flexDirection: 'row'}}>\n      {condensed ? (\n        <IconButtonWithTooltip {...sharedProps} disabled={disabled} icon={icon} label={label} />\n      ) : (\n        <Button {...sharedProps} leadingIcon={icon} disabled={disabled}>\n          {label}\n        </Button>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/markdown-editor/view-switch.tsx",
      "name": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...sharedProps}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{icon}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        }
      ],
      "line_start": 48,
      "line_end": 50,
      "text": "\n        <Button {...sharedProps} leadingIcon={icon} disabled={disabled}>\n          {label}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/table/grid-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', py: 2, px: 3, overflow: 'hidden', display: 'flex', ...sx}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...otherProps}"
        }
      ],
      "line_start": 181,
      "line_end": 183,
      "text": "\n    <Box sx={{alignItems: 'center', py: 2, px: 3, overflow: 'hidden', display: 'flex', ...sx}} {...otherProps}>\n      {children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/table/grid-table.tsx",
      "name": "Box",
      "line_start": 102,
      "line_end": 150,
      "text": " styled(Box).attrs<GridCellProps, GridCellProps>((props: GridCellProps) => {\n  const {\n    'aria-colindex': ariaColIndex,\n    className,\n    isHeader,\n    selectionMetadata,\n    rowSpan,\n    nonInteractive,\n    revealOnHover,\n    colSpan,\n    role,\n    cellIndex,\n    minWidth,\n    maxWidth,\n    ...rest\n  } = props\n  const indexAttrs: {[key: string]: number} = {}\n  if (cellIndex) {\n    indexAttrs['aria-colindex'] = ariaColIndex ?? cellIndex[1] + 1 // aria indexes are 1-based\n    indexAttrs['data-row'] = cellIndex[0]\n    indexAttrs['data-col'] = cellIndex[1]\n  }\n  const gridArea = props.gridArea ?? `auto / span ${props.rowSpan ?? 1} / auto / ${props.colSpan ?? 1}`\n  return {\n    className: classNames(className, {\n      'grid-header-cell': isHeader,\n      selected: selectionMetadata?.selected,\n      'first-selected-x': selectionMetadata?.selected && selectionMetadata?.firstInSelectionX,\n      'last-selected-x': selectionMetadata?.selected && selectionMetadata?.lastInSelectionX,\n      'first-selected-y': selectionMetadata?.selected && selectionMetadata?.firstInSelectionY,\n      'last-selected-y': selectionMetadata?.selected && selectionMetadata?.lastInSelectionY,\n      'non-interactive': nonInteractive === true,\n      'reveal-on-hover': revealOnHover === true\n    }),\n    'data-non-interactive': nonInteractive === true || undefined,\n    'data-is-header': isHeader,\n    role: role ?? (isHeader ? 'columnheader' : 'gridcell'),\n    'aria-rowspan': rowSpan,\n    'aria-colspan': colSpan,\n    'grid-area': gridArea,\n    style: {\n      gridArea,\n      minWidth,\n      maxWidth\n    },\n    ...indexAttrs,\n    ...rest\n  }\n})`\n  display: flex;\n  flex-direction: row;\n  height: ${(props: StyledComponentProps<'div', any, any, any>) => props.height};\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/common/table/grid-table.tsx",
      "name": "Box",
      "line_start": 102,
      "line_end": 102,
      "text": " styled(Box).attrs",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/insights/error-messages/base-chart-error.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: theme => `${theme.colors.canvas.subtle}`,\n        maxWidth: themeGet('sizes.large'),\n        mx: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '24px',\n        borderRadius: '6px',\n        p: 5\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...props}"
        }
      ],
      "line_start": 21,
      "line_end": 37,
      "text": "\n    <Box\n      sx={{\n        backgroundColor: theme => `${theme.colors.canvas.subtle}`,\n        maxWidth: themeGet('sizes.large'),\n        mx: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '24px',\n        borderRadius: '6px',\n        p: 5\n      }}\n      {...props}\n    >\n      <BlankslateErrorMessage icon={icon} heading={heading} content={content}>\n        {children}\n      </BlankslateErrorMessage>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/error-messages/invalid-config-error.tsx",
      "name": "Button",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 2}}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{openPane}"
        }
      ],
      "line_start": 16,
      "line_end": 18,
      "text": "<Button sx={{mt: 2}} onClick={openPane}>\n        Update configuration\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/action-buttons.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        justifyContent: 'flex-end',\n        gap: 2\n      }}"
        }
      ],
      "line_start": 111,
      "line_end": 133,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'flex-end',\n        gap: 2\n      }}\n    >\n      <Button\n        onClick={handleDiscardChanges}\n        disabled={!chartDirtyState.isConfigurationDirty}\n        {...testIdProps('insights-discard-changes')}\n      >\n        Discard changes\n      </Button>\n      <Button\n        variant=\"primary\"\n        onClick={handleSaveChanges}\n        disabled={!chartDirtyState.isConfigurationDirty}\n        {...testIdProps('insights-save-changes')}\n      >\n        {isDefaultChart(chart) ? 'Save to new chart' : 'Save changes'}\n      </Button>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/action-buttons.tsx",
      "name": "Button",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleDiscardChanges}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!chartDirtyState.isConfigurationDirty}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('insights-discard-changes')}"
        }
      ],
      "line_start": 118,
      "line_end": 124,
      "text": "<Button\n        onClick={handleDiscardChanges}\n        disabled={!chartDirtyState.isConfigurationDirty}\n        {...testIdProps('insights-discard-changes')}\n      >\n        Discard changes\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/action-buttons.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleSaveChanges}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!chartDirtyState.isConfigurationDirty}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('insights-save-changes')}"
        }
      ],
      "line_start": 125,
      "line_end": 132,
      "text": "<Button\n        variant=\"primary\"\n        onClick={handleSaveChanges}\n        disabled={!chartDirtyState.isConfigurationDirty}\n        {...testIdProps('insights-save-changes')}\n      >\n        {isDefaultChart(chart) ? 'Save to new chart' : 'Save changes'}\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 4}}"
        }
      ],
      "line_start": 17,
      "line_end": 21,
      "text": "<Box sx={{px: 4}}>\n        <LayoutSelector chart={chart} />\n        <XAxisSelector chart={chart} />\n        <YAxisSelector chart={chart} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 4, borderTop: '1px solid', borderColor: 'border.default'}}"
        }
      ],
      "line_start": 22,
      "line_end": 24,
      "text": "<Box sx={{p: 4, borderTop: '1px solid', borderColor: 'border.default'}}>\n        <ActionButtons chart={chart} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Overlay",
      "props": [
        {
          "name": "portalContainerName",
          "kind": "StringLiteral",
          "text": "\"insights-configuration-pane-portal-root\""
        },
        {
          "name": "initialFocusRef",
          "kind": "JsxExpression",
          "text": "{initialFocusRef}"
        },
        {
          "name": "returnFocusRef",
          "kind": "JsxExpression",
          "text": "{returnFocusRef}"
        },
        {
          "name": "onEscape",
          "kind": "JsxExpression",
          "text": "{closePane}"
        },
        {
          "name": "onClickOutside",
          "kind": "JsxExpression",
          "text": "{closePane}"
        }
      ],
      "line_start": 41,
      "line_end": 61,
      "text": "\n    <Overlay\n      portalContainerName=\"insights-configuration-pane-portal-root\"\n      initialFocusRef={initialFocusRef}\n      returnFocusRef={returnFocusRef}\n      onEscape={closePane}\n      onClickOutside={closePane}\n    >\n      <InsightsConfigurationPaneContentBase initialFocusRef={initialFocusRef}>\n        <Box sx={{px: 4, py: 3, display: 'flex', justifyContent: 'space-between'}}>\n          <Heading sx={{fontSize: 2}}>Configure chart</Heading>\n          <IconButton\n            variant=\"invisible\"\n            icon={XIcon}\n            sx={{px: 2}}\n            onClick={closePane}\n            {...testIdProps('side-panel-button-close')}\n          />\n        </Box>\n        <InsightsConfigurationPaneForm chart={chart} />\n      </InsightsConfigurationPaneContentBase>\n    </Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 4, py: 3, display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 49,
      "line_end": 58,
      "text": "<Box sx={{px: 4, py: 3, display: 'flex', justifyContent: 'space-between'}}>\n          <Heading sx={{fontSize: 2}}>Configure chart</Heading>\n          <IconButton\n            variant=\"invisible\"\n            icon={XIcon}\n            sx={{px: 2}}\n            onClick={closePane}\n            {...testIdProps('side-panel-button-close')}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 2}}"
        }
      ],
      "line_start": 50,
      "line_end": 50,
      "text": "<Heading sx={{fontSize: 2}}>Configure chart</Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/insights-configuration-pane.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef as React.RefObject<HTMLDivElement>}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n        position: 'fixed',\n        bottom: '0',\n        right: '0',\n        width: 400,\n        height: appHeight.clientHeight,\n        backgroundColor: 'canvas.default',\n        boxShadow: 'shadow.large',\n        borderLeft: '1px solid',\n        borderColor: 'border.default',\n        ':focus': {outline: 'none'}\n      }}"
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{-1}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('insights-configuration-pane')}"
        }
      ],
      "line_start": 78,
      "line_end": 99,
      "text": "\n    <Box\n      ref={containerRef as React.RefObject<HTMLDivElement>}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n        position: 'fixed',\n        bottom: '0',\n        right: '0',\n        width: 400,\n        height: appHeight.clientHeight,\n        backgroundColor: 'canvas.default',\n        boxShadow: 'shadow.large',\n        borderLeft: '1px solid',\n        borderColor: 'border.default',\n        ':focus': {outline: 'none'}\n      }}\n      tabIndex={-1}\n      {...testIdProps('insights-configuration-pane')}\n    >\n      {children}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 4}}"
        }
      ],
      "line_start": 33,
      "line_end": 64,
      "text": "\n    <Box sx={{mb: 4}}>\n      <Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n        Layout\n      </Text>\n      <ActionMenu>\n        <ActionMenu.Button\n          aria-label=\"Select layout\"\n          leadingIcon={selectedLayout?.icon}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedLayout?.label ?? 'None'}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-layout-list')}>\n            {chartLayouts.map((chartLayout, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={chartLayout.type === localVersionType}\n                  onSelect={() => handleUpdateLayout(chartLayout)}\n                >\n                  <ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>\n                  {chartLayout.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 34,
      "line_end": 36,
      "text": "<Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n        Layout\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 37,
      "line_end": 63,
      "text": "<ActionMenu>\n        <ActionMenu.Button\n          aria-label=\"Select layout\"\n          leadingIcon={selectedLayout?.icon}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedLayout?.label ?? 'None'}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-layout-list')}>\n            {chartLayouts.map((chartLayout, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={chartLayout.type === localVersionType}\n                  onSelect={() => handleUpdateLayout(chartLayout)}\n                >\n                  <ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>\n                  {chartLayout.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select layout\""
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{selectedLayout?.icon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownButtonStyles}"
        }
      ],
      "line_start": 38,
      "line_end": 44,
      "text": "<ActionMenu.Button\n          aria-label=\"Select layout\"\n          leadingIcon={selectedLayout?.icon}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedLayout?.label ?? 'None'}\n        </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownOverlayStyles}"
        }
      ],
      "line_start": 45,
      "line_end": 62,
      "text": "<ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-layout-list')}>\n            {chartLayouts.map((chartLayout, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={chartLayout.type === localVersionType}\n                  onSelect={() => handleUpdateLayout(chartLayout)}\n                >\n                  <ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>\n                  {chartLayout.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-layout-list')}"
        }
      ],
      "line_start": 46,
      "line_end": 61,
      "text": "<ActionList selectionVariant=\"single\" {...testIdProps('chart-layout-list')}>\n            {chartLayouts.map((chartLayout, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={chartLayout.type === localVersionType}\n                  onSelect={() => handleUpdateLayout(chartLayout)}\n                >\n                  <ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>\n                  {chartLayout.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{chartLayout.type === localVersionType}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleUpdateLayout(chartLayout)}"
        }
      ],
      "line_start": 49,
      "line_end": 58,
      "text": "\n                <ActionList.Item\n                  key={index}\n                  selected={chartLayout.type === localVersionType}\n                  onSelect={() => handleUpdateLayout(chartLayout)}\n                >\n                  <ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>\n                  {chartLayout.label}\n                </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/layout-selector.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 54,
      "line_end": 56,
      "text": "<ActionList.LeadingVisual>\n                    <chartLayout.icon />\n                  </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/validation.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        marginTop: 2,\n        alignItems: 'center',\n        color: fgColor,\n        display: 'flex',\n        a: {\n          color: 'currentColor',\n          textDecoration: 'underline'\n        },\n        ...sx,\n        fontSize: 0\n      }}"
        }
      ],
      "line_start": 34,
      "line_end": 54,
      "text": "\n    <Text\n      sx={{\n        marginTop: 2,\n        alignItems: 'center',\n        color: fgColor,\n        display: 'flex',\n        a: {\n          color: 'currentColor',\n          textDecoration: 'underline'\n        },\n        ...sx,\n        fontSize: 0\n      }}\n    >\n      {IconComponent && (\n        <Box as=\"span\" sx={{display: 'flex', mr: 1}}>\n          <IconComponent size={12} fill=\"currentColor\" />\n        </Box>\n      )}\n      <span>{children}</span>\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/validation.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"span\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mr: 1}}"
        }
      ],
      "line_start": 49,
      "line_end": 51,
      "text": "\n        <Box as=\"span\" sx={{display: 'flex', mr: 1}}>\n          <IconComponent size={12} fill=\"currentColor\" />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 4}}"
        }
      ],
      "line_start": 183,
      "line_end": 240,
      "text": "<Box sx={{mb: 4}}>\n        <Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n          X-axis\n        </Text>\n        <ActionMenu>\n          <ActionMenu.Button\n            aria-label=\"Select X-axis\"\n            leadingIcon={selectedXAxis?.icon}\n            sx={getDropdownSx(xAxisIsInvalidField)}\n          >\n            {xAxisLabel}\n          </ActionMenu.Button>\n          <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-list')}>\n              {isInsightsEnabled && (\n                <ActionList.Group title=\"Historical\">\n                  {historicalXAxisOptions.map((field, index) => {\n                    return (\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>\n                    )\n                  })}\n                </ActionList.Group>\n              )}\n              <ActionList.Group title={isInsightsEnabled ? 'Fields' : ''}>\n                {fieldXAxisOptions.map((field, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                ))}\n              </ActionList.Group>\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>\n        {xAxisIsInvalidField ? invalidConfigMessage : null}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 184,
      "line_end": 186,
      "text": "<Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n          X-axis\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 187,
      "line_end": 238,
      "text": "<ActionMenu>\n          <ActionMenu.Button\n            aria-label=\"Select X-axis\"\n            leadingIcon={selectedXAxis?.icon}\n            sx={getDropdownSx(xAxisIsInvalidField)}\n          >\n            {xAxisLabel}\n          </ActionMenu.Button>\n          <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-list')}>\n              {isInsightsEnabled && (\n                <ActionList.Group title=\"Historical\">\n                  {historicalXAxisOptions.map((field, index) => {\n                    return (\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>\n                    )\n                  })}\n                </ActionList.Group>\n              )}\n              <ActionList.Group title={isInsightsEnabled ? 'Fields' : ''}>\n                {fieldXAxisOptions.map((field, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                ))}\n              </ActionList.Group>\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select X-axis\""
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{selectedXAxis?.icon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{getDropdownSx(xAxisIsInvalidField)}"
        }
      ],
      "line_start": 188,
      "line_end": 194,
      "text": "<ActionMenu.Button\n            aria-label=\"Select X-axis\"\n            leadingIcon={selectedXAxis?.icon}\n            sx={getDropdownSx(xAxisIsInvalidField)}\n          >\n            {xAxisLabel}\n          </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownOverlayStyles}"
        }
      ],
      "line_start": 195,
      "line_end": 237,
      "text": "<ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-list')}>\n              {isInsightsEnabled && (\n                <ActionList.Group title=\"Historical\">\n                  {historicalXAxisOptions.map((field, index) => {\n                    return (\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>\n                    )\n                  })}\n                </ActionList.Group>\n              )}\n              <ActionList.Group title={isInsightsEnabled ? 'Fields' : ''}>\n                {fieldXAxisOptions.map((field, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                ))}\n              </ActionList.Group>\n            </ActionList>\n          </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-x-axis-list')}"
        }
      ],
      "line_start": 196,
      "line_end": 236,
      "text": "<ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-list')}>\n              {isInsightsEnabled && (\n                <ActionList.Group title=\"Historical\">\n                  {historicalXAxisOptions.map((field, index) => {\n                    return (\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>\n                    )\n                  })}\n                </ActionList.Group>\n              )}\n              <ActionList.Group title={isInsightsEnabled ? 'Fields' : ''}>\n                {fieldXAxisOptions.map((field, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                ))}\n              </ActionList.Group>\n            </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Historical\""
        }
      ],
      "line_start": 198,
      "line_end": 220,
      "text": "\n                <ActionList.Group title=\"Historical\">\n                  {historicalXAxisOptions.map((field, index) => {\n                    return (\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>\n                    )\n                  })}\n                </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedXAxis?.type === field.type}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleXAxisChange(field)}"
        }
      ],
      "line_start": 201,
      "line_end": 217,
      "text": "\n                      <ActionList.Item\n                        key={index}\n                        selected={selectedXAxis?.type === field.type}\n                        onSelect={() => handleXAxisChange(field)}\n                      >\n                        <ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>\n                        {field.label}\n                        {isInsightsPreview && (\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>\n                        )}\n                      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 206,
      "line_end": 208,
      "text": "<ActionList.LeadingVisual>\n                          <field.icon />\n                        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 211,
      "line_end": 215,
      "text": "\n                          <ActionList.TrailingVisual>\n                            <Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>\n                          </ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"This is a preview feature\""
        },
        {
          "name": "direction",
          "kind": "StringLiteral",
          "text": "\"nw\""
        }
      ],
      "line_start": 212,
      "line_end": 214,
      "text": "<Tooltip aria-label=\"This is a preview feature\" direction=\"nw\">\n                              <BeakerIcon />\n                            </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "JsxExpression",
          "text": "{isInsightsEnabled ? 'Fields' : ''}"
        }
      ],
      "line_start": 222,
      "line_end": 235,
      "text": "<ActionList.Group title={isInsightsEnabled ? 'Fields' : ''}>\n                {fieldXAxisOptions.map((field, index) => (\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                ))}\n              </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedXAxis?.type === field.type}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleXAxisChange(field)}"
        }
      ],
      "line_start": 224,
      "line_end": 233,
      "text": "\n                  <ActionList.Item\n                    key={index}\n                    selected={selectedXAxis?.type === field.type}\n                    onSelect={() => handleXAxisChange(field)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 229,
      "line_end": 231,
      "text": "<ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 4}}"
        }
      ],
      "line_start": 242,
      "line_end": 281,
      "text": "<Box sx={{mb: 4}}>\n        <Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n          Group by (optional)\n        </Text>\n        <ActionMenu>\n          <ActionMenu.Button\n            aria-label=\"Select X-axis group by\"\n            leadingIcon={selectedXAxisGroupBy?.icon}\n            disabled={isHistoricalChart(chart) && !memex_historical_charts_on_custom_columns}\n            sx={getDropdownSx(groupByIsInvalidField)}\n          >\n            {xAxisGroupByButtonLabel}\n          </ActionMenu.Button>\n          <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-group-by-list')}>\n              <ActionList.Item\n                selected={chart.localVersion.configuration.xAxis.groupBy === undefined}\n                onSelect={() => handleXAxisGroupByChange(null)}\n              >\n                None\n              </ActionList.Item>\n              {xAxisGroupByOptions.map((field, index) => {\n                return (\n                  <ActionList.Item\n                    key={index}\n                    selected={chart.localVersion.configuration.xAxis.groupBy?.column === field.type}\n                    onSelect={() => handleXAxisGroupByChange(field.type)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                )\n              })}\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>\n        {groupByIsInvalidField ? invalidConfigMessage : null}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 243,
      "line_end": 245,
      "text": "<Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n          Group by (optional)\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 246,
      "line_end": 279,
      "text": "<ActionMenu>\n          <ActionMenu.Button\n            aria-label=\"Select X-axis group by\"\n            leadingIcon={selectedXAxisGroupBy?.icon}\n            disabled={isHistoricalChart(chart) && !memex_historical_charts_on_custom_columns}\n            sx={getDropdownSx(groupByIsInvalidField)}\n          >\n            {xAxisGroupByButtonLabel}\n          </ActionMenu.Button>\n          <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-group-by-list')}>\n              <ActionList.Item\n                selected={chart.localVersion.configuration.xAxis.groupBy === undefined}\n                onSelect={() => handleXAxisGroupByChange(null)}\n              >\n                None\n              </ActionList.Item>\n              {xAxisGroupByOptions.map((field, index) => {\n                return (\n                  <ActionList.Item\n                    key={index}\n                    selected={chart.localVersion.configuration.xAxis.groupBy?.column === field.type}\n                    onSelect={() => handleXAxisGroupByChange(field.type)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                )\n              })}\n            </ActionList>\n          </ActionMenu.Overlay>\n        </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select X-axis group by\""
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{selectedXAxisGroupBy?.icon}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{isHistoricalChart(chart) && !memex_historical_charts_on_custom_columns}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{getDropdownSx(groupByIsInvalidField)}"
        }
      ],
      "line_start": 247,
      "line_end": 254,
      "text": "<ActionMenu.Button\n            aria-label=\"Select X-axis group by\"\n            leadingIcon={selectedXAxisGroupBy?.icon}\n            disabled={isHistoricalChart(chart) && !memex_historical_charts_on_custom_columns}\n            sx={getDropdownSx(groupByIsInvalidField)}\n          >\n            {xAxisGroupByButtonLabel}\n          </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownOverlayStyles}"
        }
      ],
      "line_start": 255,
      "line_end": 278,
      "text": "<ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n            <ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-group-by-list')}>\n              <ActionList.Item\n                selected={chart.localVersion.configuration.xAxis.groupBy === undefined}\n                onSelect={() => handleXAxisGroupByChange(null)}\n              >\n                None\n              </ActionList.Item>\n              {xAxisGroupByOptions.map((field, index) => {\n                return (\n                  <ActionList.Item\n                    key={index}\n                    selected={chart.localVersion.configuration.xAxis.groupBy?.column === field.type}\n                    onSelect={() => handleXAxisGroupByChange(field.type)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                )\n              })}\n            </ActionList>\n          </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-x-axis-group-by-list')}"
        }
      ],
      "line_start": 256,
      "line_end": 277,
      "text": "<ActionList selectionVariant=\"single\" {...testIdProps('chart-x-axis-group-by-list')}>\n              <ActionList.Item\n                selected={chart.localVersion.configuration.xAxis.groupBy === undefined}\n                onSelect={() => handleXAxisGroupByChange(null)}\n              >\n                None\n              </ActionList.Item>\n              {xAxisGroupByOptions.map((field, index) => {\n                return (\n                  <ActionList.Item\n                    key={index}\n                    selected={chart.localVersion.configuration.xAxis.groupBy?.column === field.type}\n                    onSelect={() => handleXAxisGroupByChange(field.type)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>\n                )\n              })}\n            </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{chart.localVersion.configuration.xAxis.groupBy === undefined}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleXAxisGroupByChange(null)}"
        }
      ],
      "line_start": 257,
      "line_end": 262,
      "text": "<ActionList.Item\n                selected={chart.localVersion.configuration.xAxis.groupBy === undefined}\n                onSelect={() => handleXAxisGroupByChange(null)}\n              >\n                None\n              </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{chart.localVersion.configuration.xAxis.groupBy?.column === field.type}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleXAxisGroupByChange(field.type)}"
        }
      ],
      "line_start": 265,
      "line_end": 274,
      "text": "\n                  <ActionList.Item\n                    key={index}\n                    selected={chart.localVersion.configuration.xAxis.groupBy?.column === field.type}\n                    onSelect={() => handleXAxisGroupByChange(field.type)}\n                  >\n                    <ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>\n                    {field.label}\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/x-axis-selector.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 270,
      "line_end": 272,
      "text": "<ActionList.LeadingVisual>\n                      <field.icon />\n                    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 4}}"
        }
      ],
      "line_start": 117,
      "line_end": 185,
      "text": "\n    <Box sx={{mb: 4}}>\n      <Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n        Y-axis\n      </Text>\n      <ActionMenu>\n        <ActionMenu.Button\n          aria-label=\"Select Y-axis\"\n          disabled={chartIsHistorical && !memex_historical_charts_on_custom_columns}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedAggregateOperation?.label ?? 'None'}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-list')}>\n            {aggregateOperationOptions.map((aggregate, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={selectedAggregateOperation?.type === aggregate.type}\n                  onSelect={() => handleAggregateOperationChange(aggregate)}\n                  disabled={doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}\n                >\n                  {aggregate.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n      {selectedAggregateOperation && doesAggregateOperationNeedField(selectedAggregateOperation.type) ? (\n        <>\n          <ActionMenu>\n            <ActionMenu.Button\n              aria-label=\"Select Y-axis field\"\n              sx={{\n                ...selectorDropdownButtonStyles,\n                mt: 3,\n                ...errorBorderStyles\n              }}\n              leadingIcon={selectedAggregateFieldOption?.icon}\n              disabled={\n                (chartIsHistorical && !memex_historical_charts_on_custom_columns) || aggregateFieldOptions.length === 0\n              }\n            >\n              {aggregationFieldLabel}\n            </ActionMenu.Button>\n            <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n              <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-field-list')}>\n                {aggregateFieldOptions.map((option, index) => {\n                  return (\n                    <ActionList.Item\n                      key={index}\n                      selected={selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}\n                      onSelect={() => handleAggregateFieldChange([option.field.databaseId])}\n                    >\n                      <ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>\n                      {option.field.name}\n                    </ActionList.Item>\n                  )\n                })}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>\n          {aggregateFieldIsInvalid ? invalidConfigMessage : null}\n        </>\n      ) : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"label\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 118,
      "line_end": 120,
      "text": "<Text as=\"label\" sx={{display: 'flex', mb: 2}}>\n        Y-axis\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 121,
      "line_end": 145,
      "text": "<ActionMenu>\n        <ActionMenu.Button\n          aria-label=\"Select Y-axis\"\n          disabled={chartIsHistorical && !memex_historical_charts_on_custom_columns}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedAggregateOperation?.label ?? 'None'}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-list')}>\n            {aggregateOperationOptions.map((aggregate, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={selectedAggregateOperation?.type === aggregate.type}\n                  onSelect={() => handleAggregateOperationChange(aggregate)}\n                  disabled={doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}\n                >\n                  {aggregate.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select Y-axis\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{chartIsHistorical && !memex_historical_charts_on_custom_columns}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownButtonStyles}"
        }
      ],
      "line_start": 122,
      "line_end": 128,
      "text": "<ActionMenu.Button\n          aria-label=\"Select Y-axis\"\n          disabled={chartIsHistorical && !memex_historical_charts_on_custom_columns}\n          sx={selectorDropdownButtonStyles}\n        >\n          {selectedAggregateOperation?.label ?? 'None'}\n        </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownOverlayStyles}"
        }
      ],
      "line_start": 129,
      "line_end": 144,
      "text": "<ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n          <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-list')}>\n            {aggregateOperationOptions.map((aggregate, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={selectedAggregateOperation?.type === aggregate.type}\n                  onSelect={() => handleAggregateOperationChange(aggregate)}\n                  disabled={doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}\n                >\n                  {aggregate.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-y-axis-list')}"
        }
      ],
      "line_start": 130,
      "line_end": 143,
      "text": "<ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-list')}>\n            {aggregateOperationOptions.map((aggregate, index) => {\n              return (\n                <ActionList.Item\n                  key={index}\n                  selected={selectedAggregateOperation?.type === aggregate.type}\n                  onSelect={() => handleAggregateOperationChange(aggregate)}\n                  disabled={doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}\n                >\n                  {aggregate.label}\n                </ActionList.Item>\n              )\n            })}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedAggregateOperation?.type === aggregate.type}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleAggregateOperationChange(aggregate)}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}"
        }
      ],
      "line_start": 133,
      "line_end": 140,
      "text": "\n                <ActionList.Item\n                  key={index}\n                  selected={selectedAggregateOperation?.type === aggregate.type}\n                  onSelect={() => handleAggregateOperationChange(aggregate)}\n                  disabled={doesAggregateOperationNeedField(aggregate.type) && aggregateFieldOptions.length === 0}\n                >\n                  {aggregate.label}\n                </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 148,
      "line_end": 181,
      "text": "<ActionMenu>\n            <ActionMenu.Button\n              aria-label=\"Select Y-axis field\"\n              sx={{\n                ...selectorDropdownButtonStyles,\n                mt: 3,\n                ...errorBorderStyles\n              }}\n              leadingIcon={selectedAggregateFieldOption?.icon}\n              disabled={\n                (chartIsHistorical && !memex_historical_charts_on_custom_columns) || aggregateFieldOptions.length === 0\n              }\n            >\n              {aggregationFieldLabel}\n            </ActionMenu.Button>\n            <ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n              <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-field-list')}>\n                {aggregateFieldOptions.map((option, index) => {\n                  return (\n                    <ActionList.Item\n                      key={index}\n                      selected={selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}\n                      onSelect={() => handleAggregateFieldChange([option.field.databaseId])}\n                    >\n                      <ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>\n                      {option.field.name}\n                    </ActionList.Item>\n                  )\n                })}\n              </ActionList>\n            </ActionMenu.Overlay>\n          </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Select Y-axis field\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                ...selectorDropdownButtonStyles,\n                mt: 3,\n                ...errorBorderStyles\n              }}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{selectedAggregateFieldOption?.icon}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{\n                (chartIsHistorical && !memex_historical_charts_on_custom_columns) || aggregateFieldOptions.length === 0\n              }"
        }
      ],
      "line_start": 149,
      "line_end": 162,
      "text": "<ActionMenu.Button\n              aria-label=\"Select Y-axis field\"\n              sx={{\n                ...selectorDropdownButtonStyles,\n                mt: 3,\n                ...errorBorderStyles\n              }}\n              leadingIcon={selectedAggregateFieldOption?.icon}\n              disabled={\n                (chartIsHistorical && !memex_historical_charts_on_custom_columns) || aggregateFieldOptions.length === 0\n              }\n            >\n              {aggregationFieldLabel}\n            </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{selectorDropdownOverlayStyles}"
        }
      ],
      "line_start": 163,
      "line_end": 180,
      "text": "<ActionMenu.Overlay sx={selectorDropdownOverlayStyles}>\n              <ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-field-list')}>\n                {aggregateFieldOptions.map((option, index) => {\n                  return (\n                    <ActionList.Item\n                      key={index}\n                      selected={selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}\n                      onSelect={() => handleAggregateFieldChange([option.field.databaseId])}\n                    >\n                      <ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>\n                      {option.field.name}\n                    </ActionList.Item>\n                  )\n                })}\n              </ActionList>\n            </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-y-axis-field-list')}"
        }
      ],
      "line_start": 164,
      "line_end": 179,
      "text": "<ActionList selectionVariant=\"single\" {...testIdProps('chart-y-axis-field-list')}>\n                {aggregateFieldOptions.map((option, index) => {\n                  return (\n                    <ActionList.Item\n                      key={index}\n                      selected={selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}\n                      onSelect={() => handleAggregateFieldChange([option.field.databaseId])}\n                    >\n                      <ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>\n                      {option.field.name}\n                    </ActionList.Item>\n                  )\n                })}\n              </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{index}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => handleAggregateFieldChange([option.field.databaseId])}"
        }
      ],
      "line_start": 167,
      "line_end": 176,
      "text": "\n                    <ActionList.Item\n                      key={index}\n                      selected={selectedAggregateFieldOption?.field.databaseId === option.field.databaseId}\n                      onSelect={() => handleAggregateFieldChange([option.field.databaseId])}\n                    >\n                      <ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>\n                      {option.field.name}\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/insights-configuration-pane/y-axis-selector.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 172,
      "line_end": 174,
      "text": "<ActionList.LeadingVisual>\n                        <option.icon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/period-navigation/insight-custom-date-picker.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            fontWeight: 'normal',\n            bg: active ? 'btn.outline.selectedBg' : 'transparent',\n            color: active ? 'btn.outline.selectedText' : 'fg.default',\n            ':hover': {\n              bg: active ? 'btn.outline.selectedBg' : 'transparent',\n              boxShadow: (theme: FixMeTheme) =>\n                boxShadowBorder({size: '1px', color: theme.colors.btn.outline.hoverBorder})\n            }\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...props}"
        }
      ],
      "line_start": 49,
      "line_end": 66,
      "text": "\n        <Button\n          variant=\"invisible\"\n          sx={{\n            fontWeight: 'normal',\n            bg: active ? 'btn.outline.selectedBg' : 'transparent',\n            color: active ? 'btn.outline.selectedText' : 'fg.default',\n            ':hover': {\n              bg: active ? 'btn.outline.selectedBg' : 'transparent',\n              boxShadow: (theme: FixMeTheme) =>\n                boxShadowBorder({size: '1px', color: theme.colors.btn.outline.hoverBorder})\n            }\n          }}\n          {...props}\n        >\n          <CalendarIcon />\n          <Text sx={{px: 2}}>{children}</Text>\n          <ChevronDownIcon />\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/period-navigation/insight-custom-date-picker.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 2}}"
        }
      ],
      "line_start": 64,
      "line_end": 64,
      "text": "<Text sx={{px: 2}}>{children}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/period-navigation/period-navigation.tsx",
      "name": "SubNav.Link",
      "parent": "SubNav",
      "child": "Link",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{periodValue}"
        },
        {
          "name": "as",
          "kind": "JsxExpression",
          "text": "{LinkWithoutActiveClassName}"
        },
        {
          "name": "to",
          "kind": "JsxExpression",
          "text": "{to}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selected}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        borderRadius: 6,\n        px: '10px',\n        fontWeight: 400,\n        mr: '4px',\n        minHeight: '30px',\n        border: 'none',\n        '&:first-of-type': {\n          borderLeft: 'none'\n        },\n        ...conditionalStyles\n      }}"
        }
      ],
      "line_start": 51,
      "line_end": 70,
      "text": "\n    <SubNav.Link\n      key={periodValue}\n      as={LinkWithoutActiveClassName}\n      to={to}\n      selected={selected}\n      sx={{\n        borderRadius: 6,\n        px: '10px',\n        fontWeight: 400,\n        mr: '4px',\n        minHeight: '30px',\n        border: 'none',\n        '&:first-of-type': {\n          borderLeft: 'none'\n        },\n        ...conditionalStyles\n      }}\n    >\n      {children}\n    </SubNav.Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/period-navigation/period-navigation.tsx",
      "name": "SubNav",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Main\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        '> div:first-child': {\n          marginBottom: 0\n        }\n      }}"
        }
      ],
      "line_start": 76,
      "line_end": 97,
      "text": "\n    <SubNav\n      aria-label=\"Main\"\n      sx={{\n        '> div:first-child': {\n          marginBottom: 0\n        }\n      }}\n    >\n      <SubNav.Links>\n        {PERIOD_OPTIONS.map((periodValue, periodIndex) => {\n          return (\n            <PeriodNavigationLink\n              key={periodValue.value}\n              periodValue={periodValue.value}\n              selected={period === periodValue.value || (!period && periodIndex === 0)}\n            >\n              {periodValue.text ?? periodValue.value}\n            </PeriodNavigationLink>\n          )\n        })}\n      </SubNav.Links>\n    </SubNav>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/period-navigation/period-navigation.tsx",
      "name": "SubNav.Links",
      "parent": "SubNav",
      "child": "Links",
      "props": [],
      "line_start": 84,
      "line_end": 96,
      "text": "<SubNav.Links>\n        {PERIOD_OPTIONS.map((periodValue, periodIndex) => {\n          return (\n            <PeriodNavigationLink\n              key={periodValue.value}\n              periodValue={periodValue.value}\n              selected={period === periodValue.value || (!period && periodIndex === 0)}\n            >\n              {periodValue.text ?? periodValue.value}\n            </PeriodNavigationLink>\n          )\n        })}\n      </SubNav.Links>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/chart-link.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 20,
      "line_end": 20,
      "text": " <ActionList.LeadingVisual>{leadingVisual}</ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/chart-link.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', display: 'flex', alignItems: 'center', gap: 2}}"
        }
      ],
      "line_start": 22,
      "line_end": 33,
      "text": "<Box sx={{position: 'relative', display: 'flex', alignItems: 'center', gap: 2}}>\n        {children}\n        {!isActive && isDirty ? (\n          <PotentiallyDirty\n            aria-label=\"Chart has unsaved local changes\"\n            isDirty\n            hideDirtyState={false}\n            sx={{position: 'static'}}\n            {...testIdProps('my-chart-navigation-item-dirty')}\n          />\n        ) : null}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/chart-link.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 35,
      "line_end": 35,
      "text": " <ActionList.TrailingVisual>{trailingVisual}</ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('add-chart-button')}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{useCallback(async () => {\n        const createChartRequest = getCreateChartRequest()\n        if (canCreateChart()) {\n          await createChartConfiguration.perform(createChartRequest)\n          if (createChartConfiguration.status.current.status === 'succeeded') {\n            const newChart = createChartConfiguration.status.current.data\n            navigate(PROJECT_INSIGHTS_NUMBER_ROUTE.generatePath({projectNumber, insightNumber: newChart.chart.number}))\n          }\n        } else {\n          // TODO: Update this alert to show the actual upgrade dialog\n          alert(\n            // eslint-disable-next-line i18n-text/no-en\n            `Private projects are limited to 2 custom charts.  Make your project public or upgrade your plan to add more charts.`\n          )\n        }\n      }, [getCreateChartRequest, canCreateChart, createChartConfiguration, navigate, projectNumber])}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        ml: 2\n      }}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{PlusIcon}"
        }
      ],
      "line_start": 27,
      "line_end": 51,
      "text": "\n    <Button\n      {...testIdProps('add-chart-button')}\n      onClick={useCallback(async () => {\n        const createChartRequest = getCreateChartRequest()\n        if (canCreateChart()) {\n          await createChartConfiguration.perform(createChartRequest)\n          if (createChartConfiguration.status.current.status === 'succeeded') {\n            const newChart = createChartConfiguration.status.current.data\n            navigate(PROJECT_INSIGHTS_NUMBER_ROUTE.generatePath({projectNumber, insightNumber: newChart.chart.number}))\n          }\n        } else {\n          // TODO: Update this alert to show the actual upgrade dialog\n          alert(\n            // eslint-disable-next-line i18n-text/no-en\n            `Private projects are limited to 2 custom charts.  Make your project public or upgrade your plan to add more charts.`\n          )\n        }\n      }, [getCreateChartRequest, canCreateChart, createChartConfiguration, navigate, projectNumber])}\n      sx={{\n        ml: 2\n      }}\n      leadingIcon={PlusIcon}\n    >\n      New chart\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 71,
      "line_end": 78,
      "text": "\n    <Box sx={{display: 'flex', alignItems: 'center'}}>\n      {isInsightsPreview && isHistoricalChart(chartConfiguration) ? (\n        <Tooltip aria-label=\"This is a preview feature\">\n          <BeakerIcon />\n        </Tooltip>\n      ) : null}\n      {isActiveChart ? <InsightsChartOptions chart={chartConfiguration} /> : null}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "Tooltip",
      "props": [
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"This is a preview feature\""
        }
      ],
      "line_start": 73,
      "line_end": 75,
      "text": "\n        <Tooltip aria-label=\"This is a preview feature\">\n          <BeakerIcon />\n        </Tooltip>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{pt: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('insights-side-nav')}"
        }
      ],
      "line_start": 114,
      "line_end": 186,
      "text": "<ActionList sx={{pt: 1}} {...testIdProps('insights-side-nav')}>\n        <ActionList.Group title=\"Default charts\">\n          {defaultCharts.map(chartConfiguration => {\n            const isActiveChart = insightNumber === 0\n            const chartDirtyState = getDirtyChartState(chartConfiguration)\n            const Icon = chartLayoutsMap[chartConfiguration.localVersion.configuration.type].icon\n\n            return (\n              <ChartLink\n                {...testIdProps('default-chart-navigation-item')}\n                key={chartConfiguration.number}\n                isDirty={chartDirtyState.isDirty}\n                to={getChartLinkTo(chartConfiguration.number).url}\n                isActive={isActiveChart}\n                leadingVisual={<Icon />}\n                trailingVisual={\n                  <ChartItemTrailingVisual\n                    chartConfiguration={chartConfiguration}\n                    isActiveChart={isActiveChart}\n                    isInsightsPreview={isInsightsPreview}\n                  />\n                }\n                // no navigation when already active\n                onClick={e => {\n                  if (isActiveChart) {\n                    e.preventDefault()\n                  } else {\n                    postChartNavigationStats(chartConfiguration.number, chartConfiguration.localVersion.configuration)\n                  }\n                }}\n              >\n                {chartConfiguration.name}\n              </ChartLink>\n            )\n          })}\n        </ActionList.Group>\n        <ActionList.Divider />\n        <ActionList.Group title=\"My charts\">\n          {myCharts.map(chartConfiguration => {\n            const isActiveChart = insightNumber === chartConfiguration.number\n            const chartDirtyState = getDirtyChartState(chartConfiguration)\n            const Icon = chartLayoutsMap[chartConfiguration.localVersion.configuration.type].icon\n\n            return (\n              <ChartLink\n                {...testIdProps('my-chart-navigation-item')}\n                key={chartConfiguration.number}\n                to={getChartLinkTo(chartConfiguration.number).url}\n                isActive={isActiveChart}\n                isDirty={chartDirtyState.isDirty}\n                leadingVisual={<Icon />}\n                trailingVisual={\n                  <ChartItemTrailingVisual\n                    chartConfiguration={chartConfiguration}\n                    isActiveChart={isActiveChart}\n                    isInsightsPreview={isInsightsPreview}\n                  />\n                }\n                // no navigation when already active\n                onClick={e => {\n                  if (isActiveChart) {\n                    e.preventDefault()\n                  } else {\n                    postChartNavigationStats(chartConfiguration.number, chartConfiguration.localVersion.configuration)\n                  }\n                }}\n              >\n                {chartConfiguration.name}\n              </ChartLink>\n            )\n          })}\n        </ActionList.Group>\n      </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Default charts\""
        }
      ],
      "line_start": 115,
      "line_end": 149,
      "text": "<ActionList.Group title=\"Default charts\">\n          {defaultCharts.map(chartConfiguration => {\n            const isActiveChart = insightNumber === 0\n            const chartDirtyState = getDirtyChartState(chartConfiguration)\n            const Icon = chartLayoutsMap[chartConfiguration.localVersion.configuration.type].icon\n\n            return (\n              <ChartLink\n                {...testIdProps('default-chart-navigation-item')}\n                key={chartConfiguration.number}\n                isDirty={chartDirtyState.isDirty}\n                to={getChartLinkTo(chartConfiguration.number).url}\n                isActive={isActiveChart}\n                leadingVisual={<Icon />}\n                trailingVisual={\n                  <ChartItemTrailingVisual\n                    chartConfiguration={chartConfiguration}\n                    isActiveChart={isActiveChart}\n                    isInsightsPreview={isInsightsPreview}\n                  />\n                }\n                // no navigation when already active\n                onClick={e => {\n                  if (isActiveChart) {\n                    e.preventDefault()\n                  } else {\n                    postChartNavigationStats(chartConfiguration.number, chartConfiguration.localVersion.configuration)\n                  }\n                }}\n              >\n                {chartConfiguration.name}\n              </ChartLink>\n            )\n          })}\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"My charts\""
        }
      ],
      "line_start": 151,
      "line_end": 185,
      "text": "<ActionList.Group title=\"My charts\">\n          {myCharts.map(chartConfiguration => {\n            const isActiveChart = insightNumber === chartConfiguration.number\n            const chartDirtyState = getDirtyChartState(chartConfiguration)\n            const Icon = chartLayoutsMap[chartConfiguration.localVersion.configuration.type].icon\n\n            return (\n              <ChartLink\n                {...testIdProps('my-chart-navigation-item')}\n                key={chartConfiguration.number}\n                to={getChartLinkTo(chartConfiguration.number).url}\n                isActive={isActiveChart}\n                isDirty={chartDirtyState.isDirty}\n                leadingVisual={<Icon />}\n                trailingVisual={\n                  <ChartItemTrailingVisual\n                    chartConfiguration={chartConfiguration}\n                    isActiveChart={isActiveChart}\n                    isInsightsPreview={isInsightsPreview}\n                  />\n                }\n                // no navigation when already active\n                onClick={e => {\n                  if (isActiveChart) {\n                    e.preventDefault()\n                  } else {\n                    postChartNavigationStats(chartConfiguration.number, chartConfiguration.localVersion.configuration)\n                  }\n                }}\n              >\n                {chartConfiguration.name}\n              </ChartLink>\n            )\n          })}\n        </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/index.tsx",
      "name": "Box",
      "props": [],
      "line_start": 187,
      "line_end": 189,
      "text": "<Box>\n        <AddChartButton />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{open}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{onOpenChange}"
        },
        {
          "name": "anchorRef",
          "kind": "JsxExpression",
          "text": "{anchorRef}"
        }
      ],
      "line_start": 225,
      "line_end": 321,
      "text": "<ActionMenu open={open} onOpenChange={onOpenChange} anchorRef={anchorRef}>\n        <ActionMenu.Overlay sx={{zIndex: 3}} returnFocusRef={returnFocusRef} width=\"medium\">\n          <ActionList>\n            {canEditName && (\n              <Box as=\"li\" sx={{listStyleType: 'none'}}>\n                <EmojiPicker sx={{display: 'block', px: 2}}>\n                  <TextInput\n                    value={chartName}\n                    tabIndex={-1}\n                    sx={{my: 2}}\n                    aria-label=\"Chart name\"\n                    placeholder=\"Chart name\"\n                    onClick={(e: React.MouseEvent) => {\n                      e.preventDefault()\n                    }}\n                    onChange={onChangeField}\n                    onFocus={onFocusField}\n                    {...inputCompositionProps}\n                  />\n                </EmojiPicker>\n              </Box>\n            )}\n            <ActionList.Item onSelect={openPane} {...testIdProps('chart-options-open-configure')}>\n              <ActionList.LeadingVisual>\n                <PotentiallyDirty isDirty={isConfigurationDirty}>\n                  <PencilIcon />\n                </PotentiallyDirty>\n              </ActionList.LeadingVisual>\n              Configure\n            </ActionList.Item>\n            <ActionList.Item onSelect={handleDuplicateChart}>\n              <ActionList.LeadingVisual>\n                <VersionsIcon />\n              </ActionList.LeadingVisual>\n              {isDirty ? 'Save changes to new chart' : 'Duplicate chart'}\n            </ActionList.Item>\n            {chartIsDefault ? null : (\n              <ActionList.Item variant=\"danger\" onSelect={handleDeleteChart}>\n                <ActionList.LeadingVisual>\n                  <TrashIcon />\n                </ActionList.LeadingVisual>\n                Delete chart\n              </ActionList.Item>\n            )}\n\n            {isDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  {hasWritePermissions && userDefinedChart ? (\n                    <ActionList.Item\n                      onSelect={handleSaveChanges}\n                      {...testIdProps('view-options-menu-save-changes-button')}\n                      sx={{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}\n                    >\n                      Save changes\n                    </ActionList.Item>\n                  ) : null}\n                  <ActionList.Item\n                    onSelect={handleDiscardChanges}\n                    {...testIdProps('chart-options-menu-reset-changes-button')}\n                    sx={{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}\n                  >\n                    Discard changes\n                  </ActionList.Item>\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{zIndex: 3}}"
        },
        {
          "name": "returnFocusRef",
          "kind": "JsxExpression",
          "text": "{returnFocusRef}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"medium\""
        }
      ],
      "line_start": 226,
      "line_end": 320,
      "text": "<ActionMenu.Overlay sx={{zIndex: 3}} returnFocusRef={returnFocusRef} width=\"medium\">\n          <ActionList>\n            {canEditName && (\n              <Box as=\"li\" sx={{listStyleType: 'none'}}>\n                <EmojiPicker sx={{display: 'block', px: 2}}>\n                  <TextInput\n                    value={chartName}\n                    tabIndex={-1}\n                    sx={{my: 2}}\n                    aria-label=\"Chart name\"\n                    placeholder=\"Chart name\"\n                    onClick={(e: React.MouseEvent) => {\n                      e.preventDefault()\n                    }}\n                    onChange={onChangeField}\n                    onFocus={onFocusField}\n                    {...inputCompositionProps}\n                  />\n                </EmojiPicker>\n              </Box>\n            )}\n            <ActionList.Item onSelect={openPane} {...testIdProps('chart-options-open-configure')}>\n              <ActionList.LeadingVisual>\n                <PotentiallyDirty isDirty={isConfigurationDirty}>\n                  <PencilIcon />\n                </PotentiallyDirty>\n              </ActionList.LeadingVisual>\n              Configure\n            </ActionList.Item>\n            <ActionList.Item onSelect={handleDuplicateChart}>\n              <ActionList.LeadingVisual>\n                <VersionsIcon />\n              </ActionList.LeadingVisual>\n              {isDirty ? 'Save changes to new chart' : 'Duplicate chart'}\n            </ActionList.Item>\n            {chartIsDefault ? null : (\n              <ActionList.Item variant=\"danger\" onSelect={handleDeleteChart}>\n                <ActionList.LeadingVisual>\n                  <TrashIcon />\n                </ActionList.LeadingVisual>\n                Delete chart\n              </ActionList.Item>\n            )}\n\n            {isDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  {hasWritePermissions && userDefinedChart ? (\n                    <ActionList.Item\n                      onSelect={handleSaveChanges}\n                      {...testIdProps('view-options-menu-save-changes-button')}\n                      sx={{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}\n                    >\n                      Save changes\n                    </ActionList.Item>\n                  ) : null}\n                  <ActionList.Item\n                    onSelect={handleDiscardChanges}\n                    {...testIdProps('chart-options-menu-reset-changes-button')}\n                    sx={{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}\n                  >\n                    Discard changes\n                  </ActionList.Item>\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 227,
      "line_end": 319,
      "text": "<ActionList>\n            {canEditName && (\n              <Box as=\"li\" sx={{listStyleType: 'none'}}>\n                <EmojiPicker sx={{display: 'block', px: 2}}>\n                  <TextInput\n                    value={chartName}\n                    tabIndex={-1}\n                    sx={{my: 2}}\n                    aria-label=\"Chart name\"\n                    placeholder=\"Chart name\"\n                    onClick={(e: React.MouseEvent) => {\n                      e.preventDefault()\n                    }}\n                    onChange={onChangeField}\n                    onFocus={onFocusField}\n                    {...inputCompositionProps}\n                  />\n                </EmojiPicker>\n              </Box>\n            )}\n            <ActionList.Item onSelect={openPane} {...testIdProps('chart-options-open-configure')}>\n              <ActionList.LeadingVisual>\n                <PotentiallyDirty isDirty={isConfigurationDirty}>\n                  <PencilIcon />\n                </PotentiallyDirty>\n              </ActionList.LeadingVisual>\n              Configure\n            </ActionList.Item>\n            <ActionList.Item onSelect={handleDuplicateChart}>\n              <ActionList.LeadingVisual>\n                <VersionsIcon />\n              </ActionList.LeadingVisual>\n              {isDirty ? 'Save changes to new chart' : 'Duplicate chart'}\n            </ActionList.Item>\n            {chartIsDefault ? null : (\n              <ActionList.Item variant=\"danger\" onSelect={handleDeleteChart}>\n                <ActionList.LeadingVisual>\n                  <TrashIcon />\n                </ActionList.LeadingVisual>\n                Delete chart\n              </ActionList.Item>\n            )}\n\n            {isDirty ? (\n              <>\n                <ActionList.Divider />\n                <ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  {hasWritePermissions && userDefinedChart ? (\n                    <ActionList.Item\n                      onSelect={handleSaveChanges}\n                      {...testIdProps('view-options-menu-save-changes-button')}\n                      sx={{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}\n                    >\n                      Save changes\n                    </ActionList.Item>\n                  ) : null}\n                  <ActionList.Item\n                    onSelect={handleDiscardChanges}\n                    {...testIdProps('chart-options-menu-reset-changes-button')}\n                    sx={{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}\n                  >\n                    Discard changes\n                  </ActionList.Item>\n                </ActionList.Group>\n              </>\n            ) : null}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"li\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{listStyleType: 'none'}}"
        }
      ],
      "line_start": 229,
      "line_end": 245,
      "text": "\n              <Box as=\"li\" sx={{listStyleType: 'none'}}>\n                <EmojiPicker sx={{display: 'block', px: 2}}>\n                  <TextInput\n                    value={chartName}\n                    tabIndex={-1}\n                    sx={{my: 2}}\n                    aria-label=\"Chart name\"\n                    placeholder=\"Chart name\"\n                    onClick={(e: React.MouseEvent) => {\n                      e.preventDefault()\n                    }}\n                    onChange={onChangeField}\n                    onFocus={onFocusField}\n                    {...inputCompositionProps}\n                  />\n                </EmojiPicker>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{openPane}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('chart-options-open-configure')}"
        }
      ],
      "line_start": 247,
      "line_end": 254,
      "text": "<ActionList.Item onSelect={openPane} {...testIdProps('chart-options-open-configure')}>\n              <ActionList.LeadingVisual>\n                <PotentiallyDirty isDirty={isConfigurationDirty}>\n                  <PencilIcon />\n                </PotentiallyDirty>\n              </ActionList.LeadingVisual>\n              Configure\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 248,
      "line_end": 252,
      "text": "<ActionList.LeadingVisual>\n                <PotentiallyDirty isDirty={isConfigurationDirty}>\n                  <PencilIcon />\n                </PotentiallyDirty>\n              </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleDuplicateChart}"
        }
      ],
      "line_start": 255,
      "line_end": 260,
      "text": "<ActionList.Item onSelect={handleDuplicateChart}>\n              <ActionList.LeadingVisual>\n                <VersionsIcon />\n              </ActionList.LeadingVisual>\n              {isDirty ? 'Save changes to new chart' : 'Duplicate chart'}\n            </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 256,
      "line_end": 258,
      "text": "<ActionList.LeadingVisual>\n                <VersionsIcon />\n              </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleDeleteChart}"
        }
      ],
      "line_start": 262,
      "line_end": 267,
      "text": "\n              <ActionList.Item variant=\"danger\" onSelect={handleDeleteChart}>\n                <ActionList.LeadingVisual>\n                  <TrashIcon />\n                </ActionList.LeadingVisual>\n                Delete chart\n              </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 263,
      "line_end": 265,
      "text": "<ActionList.LeadingVisual>\n                  <TrashIcon />\n                </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Group",
      "parent": "ActionList",
      "child": "Group",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{'& > ul': {display: 'flex'}}}"
        }
      ],
      "line_start": 273,
      "line_end": 316,
      "text": "<ActionList.Group sx={{'& > ul': {display: 'flex'}}}>\n                  {hasWritePermissions && userDefinedChart ? (\n                    <ActionList.Item\n                      onSelect={handleSaveChanges}\n                      {...testIdProps('view-options-menu-save-changes-button')}\n                      sx={{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}\n                    >\n                      Save changes\n                    </ActionList.Item>\n                  ) : null}\n                  <ActionList.Item\n                    onSelect={handleDiscardChanges}\n                    {...testIdProps('chart-options-menu-reset-changes-button')}\n                    sx={{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}\n                  >\n                    Discard changes\n                  </ActionList.Item>\n                </ActionList.Group>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleSaveChanges}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                      {...testIdProps('view-options-menu-save-changes-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}"
        }
      ],
      "line_start": 275,
      "line_end": 295,
      "text": "\n                    <ActionList.Item\n                      onSelect={handleSaveChanges}\n                      {...testIdProps('view-options-menu-save-changes-button')}\n                      sx={{\n                        flex: 'auto',\n                        color: 'accent.fg',\n                        borderRight: '1px solid',\n                        borderColor: 'border.default',\n                        borderRadius: 0,\n                        my: -2,\n                        mx: 0,\n                        py: 3,\n                        textAlign: 'center',\n                        fontWeight: 'normal',\n                        '&:hover': {\n                          bg: 'canvas.inset'\n                        }\n                      }}\n                    >\n                      Save changes\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/insights/side-nav/insights-chart-options.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{handleDiscardChanges}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                    {...testIdProps('chart-options-menu-reset-changes-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}"
        }
      ],
      "line_start": 297,
      "line_end": 315,
      "text": "<ActionList.Item\n                    onSelect={handleDiscardChanges}\n                    {...testIdProps('chart-options-menu-reset-changes-button')}\n                    sx={{\n                      flex: 'auto',\n                      color: 'fg.muted',\n                      borderRadius: 0,\n                      my: -2,\n                      mx: 0,\n                      py: 3,\n                      textAlign: 'center',\n                      fontWeight: 'normal',\n                      '&:hover': {\n                        bg: 'canvas.inset'\n                      }\n                    }}\n                  >\n                    Discard changes\n                  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/dropdown-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', overflow: 'hidden', flexGrow: 1, display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 11,
      "line_end": 17,
      "text": "<Box\n          sx={{alignItems: 'center', overflow: 'hidden', flexGrow: 1, display: 'flex', justifyContent: 'space-between'}}\n        >\n          {children}\n          <Box />\n          {isDisabled ? null : <DropdownCaret ref={ref} sx={{mx: 1}} />}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/label-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{overflow: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 16,
      "line_end": 20,
      "text": "<Box sx={{overflow: 'hidden', display: 'flex'}}>\n        {labels?.map(label => (\n          <IssueLabel sx={{mr: 1}} key={label.id} colorHex={label.color} url={label.url} nameHtml={label.nameHtml} />\n        ))}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/linked-pull-requests-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{overflow: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 15,
      "line_end": 21,
      "text": "<Box sx={{overflow: 'hidden', display: 'flex'}}>\n        {linkedPullRequests?.map(linkedPullRequest => (\n          <Box key={linkedPullRequest.id} sx={{mr: 1}} {...testIdProps(`linked-pr-label`)}>\n            <LinkedPullRequestLabelLink linkedPullRequest={linkedPullRequest} sx={{my: 0}} tabIndex={-1} />\n          </Box>\n        ))}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/linked-pull-requests-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{linkedPullRequest.id}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 1}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`linked-pr-label`)}"
        }
      ],
      "line_start": 17,
      "line_end": 19,
      "text": "\n          <Box key={linkedPullRequest.id} sx={{mr: 1}} {...testIdProps(`linked-pr-label`)}>\n            <LinkedPullRequestLabelLink linkedPullRequest={linkedPullRequest} sx={{my: 0}} tabIndex={-1} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/milestone.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', overflow: 'hidden', flex: '1', height: '20px', display: 'flex'}}"
        }
      ],
      "line_start": 17,
      "line_end": 23,
      "text": "\n    <Box sx={{alignItems: 'center', overflow: 'hidden', flex: '1', height: '20px', display: 'flex'}}>\n      {milestone && (\n        <LinkCell ref={ref} href={milestone.url} muted={true} isDisabled={isDisabled}>\n          {milestone.title}\n        </LinkCell>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/text-cell.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...rest}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          textAlign: 'left',\n          whiteSpace: 'nowrap',\n          color: isDisabled ? 'fg.muted' : 'fg.muted',\n          minWidth: 0,\n          overflow: 'hidden',\n          code: {\n            fontFamily: 'fonts.mono',\n            fontSize: 0\n          },\n          ...props.sx\n        }}"
        }
      ],
      "line_start": 34,
      "line_end": 51,
      "text": "\n      <Text\n        {...rest}\n        ref={ref}\n        sx={{\n          textAlign: 'left',\n          whiteSpace: 'nowrap',\n          color: isDisabled ? 'fg.muted' : 'fg.muted',\n          minWidth: 0,\n          overflow: 'hidden',\n          code: {\n            fontFamily: 'fonts.mono',\n            fontSize: 0\n          },\n          ...props.sx\n        }}\n      >\n        {children}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/tracks-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', overflow: 'hidden', flex: '1', display: 'flex'}}"
        }
      ],
      "line_start": 17,
      "line_end": 19,
      "text": "\n    <Box sx={{alignItems: 'center', overflow: 'hidden', flex: '1', display: 'flex'}}>\n      <SubtaskProgress showPercent completed={progress.completed} total={progress.total} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/user-group.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2, alignItems: 'center', overflow: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 37,
      "line_end": 47,
      "text": "\n    <Box sx={{mr: 2, alignItems: 'center', overflow: 'hidden', display: 'flex'}}>\n      <Avatar\n        alt={user.name}\n        src={user.avatarUrl}\n        sx={{minWidth: '20px', mr: 1}}\n        data-hovercard-url={user.hovercardUrl}\n      />\n      <TextCell ref={ref} sx={{fontSize: 1}} isDisabled={isDisabled}>\n        {user.name}\n      </TextCell>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/cells/user-group.tsx",
      "name": "AvatarStack",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{zIndex: 0, mr: 1}}"
        }
      ],
      "line_start": 66,
      "line_end": 70,
      "text": "<AvatarStack sx={{zIndex: 0, mr: 1}}>\n          {users.map(user => (\n            <Avatar key={user.id} alt={user.name} src={user.avatarUrl} data-hovercard-url={user.hovercardUrl} />\n          ))}\n        </AvatarStack>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/editors/text-cell-editor.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{width: '100%'}}"
        }
      ],
      "line_start": 223,
      "line_end": 223,
      "text": "\n        <Text sx={{width: '100%'}}>{input}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/editors/title-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexShrink: 0, mr: 2, display: 'flex'}}"
        }
      ],
      "line_start": 190,
      "line_end": 192,
      "text": "<Box sx={{flexShrink: 0, mr: 2, display: 'flex'}}>\n            <StyledOcticon icon={IssueDraftIcon} sx={{color: 'fg.muted'}} aria-label=\"Draft issue\" />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/editors/title-editor.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexShrink: 0, mr: 2, display: 'flex'}}"
        }
      ],
      "line_start": 207,
      "line_end": 209,
      "text": "<Box sx={{flexShrink: 0, mr: 2, display: 'flex'}}>\n            <ItemStateForTitle title={titleValue} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/assignees-group-header-label.tsx",
      "name": "AvatarStack",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{zIndex: 0, mr: 2}}"
        }
      ],
      "line_start": 16,
      "line_end": 20,
      "text": "<AvatarStack sx={{zIndex: 0, mr: 2}}>\n        {assignees.map(assignee => (\n          <Avatar key={assignee.id} alt={assignee.login} src={assignee.avatarUrl} />\n        ))}\n      </AvatarStack>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/assignees-group-header-label.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ml: 2}}"
        }
      ],
      "line_start": 28,
      "line_end": 28,
      "text": "<CounterLabel sx={{color: 'fg.muted', ml: 2}}>{rowCount}</CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/default-group-header-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'accent.fg', ml: 2}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`table-group-label`)}"
        }
      ],
      "line_start": 23,
      "line_end": 25,
      "text": "\n        <Label sx={{color: 'accent.fg', ml: 2}} {...testIdProps(`table-group-label`)}>\n          {label}\n        </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/default-group-header-label.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ml: 2}}"
        }
      ],
      "line_start": 27,
      "line_end": 27,
      "text": "<CounterLabel sx={{color: 'fg.muted', ml: 2}}>{rowCount}</CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/iteration-group-header-label.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ml: 2}}"
        }
      ],
      "line_start": 29,
      "line_end": 29,
      "text": "<CounterLabel sx={{color: 'fg.muted', ml: 2}}>{rowCount}</CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/repository-group-header-label.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.default', fontWeight: 'bold', fontSize: 2, ml: 2}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`table-group-name`)}"
        }
      ],
      "line_start": 16,
      "line_end": 18,
      "text": "<Text sx={{color: 'fg.default', fontWeight: 'bold', fontSize: 2, ml: 2}} {...testIdProps(`table-group-name`)}>\n        {repository.nameWithOwner}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/repository-group-header-label.tsx",
      "name": "CounterLabel",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted', ml: 2}}"
        }
      ],
      "line_start": 20,
      "line_end": 20,
      "text": "<CounterLabel sx={{color: 'fg.muted', ml: 2}}>{rowCount}</CounterLabel>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/table-group-contents.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        alignItems: 'center',\n        height: `${TABLE_GROUP_FOOTER_HEIGHT}px`,\n        width: '100%',\n        pl: '12px',\n        bg: shouldDisableFooter ? 'canvas.subtle' : 'canvas.default',\n        color: shouldDisableFooter ? 'fg.muted' : 'inherit',\n        backdropFilter: 'unset',\n        pointerEvents: 'none',\n        borderBottom: 'unset',\n        borderBottomColor: 'unset',\n        boxShadow: 'unset',\n        left: 0,\n        // this is to make room for row selection boundary at end of a group:\n        marginTop: `${TABLE_GROUP_FOOTER_MARGIN_TOP}px`,\n        position: 'sticky',\n        display: 'flex',\n\n        '>:first-child': {\n          pointerEvents: 'all'\n        }\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`table-group-footer-${title}`)}"
        }
      ],
      "line_start": 73,
      "line_end": 108,
      "text": "\n    <Box\n      sx={{\n        alignItems: 'center',\n        height: `${TABLE_GROUP_FOOTER_HEIGHT}px`,\n        width: '100%',\n        pl: '12px',\n        bg: shouldDisableFooter ? 'canvas.subtle' : 'canvas.default',\n        color: shouldDisableFooter ? 'fg.muted' : 'inherit',\n        backdropFilter: 'unset',\n        pointerEvents: 'none',\n        borderBottom: 'unset',\n        borderBottomColor: 'unset',\n        boxShadow: 'unset',\n        left: 0,\n        // this is to make room for row selection boundary at end of a group:\n        marginTop: `${TABLE_GROUP_FOOTER_MARGIN_TOP}px`,\n        position: 'sticky',\n        display: 'flex',\n\n        '>:first-child': {\n          pointerEvents: 'all'\n        }\n      }}\n      {...testIdProps(`table-group-footer-${title}`)}\n    >\n      <Omnibar\n        ref={omnibarRef}\n        role=\"row\"\n        isFixed={false}\n        newItemAttributes={newItemAttributes}\n        defaultPlaceholder={footerPlaceholder}\n        onKeyDown={onKeyDown}\n        onFocus={onFocus}\n        disabled={shouldDisableFooter}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/group/table-group-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', display: 'flex'}}"
        }
      ],
      "line_start": 99,
      "line_end": 99,
      "text": "<Box sx={{alignItems: 'center', display: 'flex'}}>{children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/dummy-table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...headerProps}"
        }
      ],
      "line_start": 25,
      "line_end": 38,
      "text": "\n    <Box {...headerProps}>\n      <Box sx={{alignItems: 'center', height: '38px', pb: '3px', pl: 4, display: 'flex'}}>\n        <Box\n          sx={{\n            opacity: isSearchVisible ? '0' : '1',\n            transition: 'opacity 0.1s ease-out',\n            position: 'relative',\n            top: '-2px'\n          }}\n        >\n          <TableSearchButton {...testIdProps('search-button-table-header-row')} tabIndex={!isSearchVisible ? 0 : -1} />\n        </Box>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/dummy-table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', height: '38px', pb: '3px', pl: 4, display: 'flex'}}"
        }
      ],
      "line_start": 26,
      "line_end": 37,
      "text": "<Box sx={{alignItems: 'center', height: '38px', pb: '3px', pl: 4, display: 'flex'}}>\n        <Box\n          sx={{\n            opacity: isSearchVisible ? '0' : '1',\n            transition: 'opacity 0.1s ease-out',\n            position: 'relative',\n            top: '-2px'\n          }}\n        >\n          <TableSearchButton {...testIdProps('search-button-table-header-row')} tabIndex={!isSearchVisible ? 0 : -1} />\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/dummy-table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            opacity: isSearchVisible ? '0' : '1',\n            transition: 'opacity 0.1s ease-out',\n            position: 'relative',\n            top: '-2px'\n          }}"
        }
      ],
      "line_start": 27,
      "line_end": 36,
      "text": "<Box\n          sx={{\n            opacity: isSearchVisible ? '0' : '1',\n            transition: 'opacity 0.1s ease-out',\n            position: 'relative',\n            top: '-2px'\n          }}\n        >\n          <TableSearchButton {...testIdProps('search-button-table-header-row')} tabIndex={!isSearchVisible ? 0 : -1} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            color: 'fg.muted',\n            bg: 'canvas.default'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`grouped-label-${columnModel.name}`)}"
        }
      ],
      "line_start": 197,
      "line_end": 205,
      "text": "\n        <Box\n          sx={{\n            color: 'fg.muted',\n            bg: 'canvas.default'\n          }}\n          {...testIdProps(`grouped-label-${columnModel.name}`)}\n        >\n          <StyledOcticon icon={RowsIcon} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            color: 'fg.muted',\n            bg: 'canvas.default'\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`sorted-label-${columnModel.id}`)}"
        }
      ],
      "line_start": 215,
      "line_end": 223,
      "text": "\n        <Box\n          sx={{\n            color: 'fg.muted',\n            bg: 'canvas.default'\n          }}\n          {...testIdProps(`sorted-label-${columnModel.id}`)}\n        >\n          <StyledOcticon icon={isSortedDesc ? ArrowDownIcon : ArrowUpIcon} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`sort-ascending-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSortAscending}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: isSortedAscending ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`sort-toggle-asc-${columnModel.id}`)}"
        }
      ],
      "line_start": 240,
      "line_end": 250,
      "text": "\n        <ActionList.Item\n          key={`sort-ascending-${columnModel.id}`}\n          onSelect={onSortAscending}\n          sx={{fontWeight: isSortedAscending ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}\n          {...testIdProps(`sort-toggle-asc-${columnModel.id}`)}\n        >\n          <ActionList.LeadingVisual>\n            <SortAscIcon />\n          </ActionList.LeadingVisual>\n          {isSortedAscending ? `Sorted ascending ${ascendingDescription}` : `Sort ascending ${ascendingDescription}`}\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 246,
      "line_end": 248,
      "text": "<ActionList.LeadingVisual>\n            <SortAscIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`sort-descending-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSortDescending}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: isSortedDescending ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`sort-toggle-asc-${columnModel.id}`)}"
        }
      ],
      "line_start": 251,
      "line_end": 263,
      "text": "\n        <ActionList.Item\n          key={`sort-descending-${columnModel.id}`}\n          onSelect={onSortDescending}\n          sx={{fontWeight: isSortedDescending ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}\n          {...testIdProps(`sort-toggle-asc-${columnModel.id}`)}\n        >\n          <ActionList.LeadingVisual>\n            <SortDescIcon />\n          </ActionList.LeadingVisual>\n          {isSortedDescending\n            ? `Sorted descending ${descendingDescription}`\n            : `Sort descending ${descendingDescription}`}\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 257,
      "line_end": 259,
      "text": "<ActionList.LeadingVisual>\n            <SortDescIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`edit-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{() => {\n            navigate({\n              pathname: PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                projectNumber,\n                fieldId: columnModel.id\n              })\n            })\n\n            postStats({\n              name: SettingsOpenField,\n              ui: SettingsOpenColumnHeaderUI,\n              memexProjectColumnId: columnModel.id\n            })\n            setMenuState(false)\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`edit-${columnModel.id}`)}"
        }
      ],
      "line_start": 288,
      "line_end": 311,
      "text": "\n        <ActionList.Item\n          key={`edit-${columnModel.id}`}\n          onSelect={() => {\n            navigate({\n              pathname: PROJECT_SETTINGS_FIELD_ROUTE.generatePath({\n                projectNumber,\n                fieldId: columnModel.id\n              })\n            })\n\n            postStats({\n              name: SettingsOpenField,\n              ui: SettingsOpenColumnHeaderUI,\n              memexProjectColumnId: columnModel.id\n            })\n            setMenuState(false)\n          }}\n          {...testIdProps(`edit-${columnModel.id}`)}\n        >\n          <ActionList.LeadingVisual>\n            <PencilIcon />\n          </ActionList.LeadingVisual>\n          {Resources.editField}\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 307,
      "line_end": 309,
      "text": "<ActionList.LeadingVisual>\n            <PencilIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`filter-by-values-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{event => {\n          onCreateFilter(name, event)\n          setMenuState(false)\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('create-filter-trigger')}"
        }
      ],
      "line_start": 333,
      "line_end": 345,
      "text": "\n      <ActionList.Item\n        key={`filter-by-values-${columnModel.id}`}\n        onSelect={event => {\n          onCreateFilter(name, event)\n          setMenuState(false)\n        }}\n        {...testIdProps('create-filter-trigger')}\n      >\n        <ActionList.LeadingVisual>\n          <FilterIcon />\n        </ActionList.LeadingVisual>\n        Filter by values\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 341,
      "line_end": 343,
      "text": "<ActionList.LeadingVisual>\n          <FilterIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`filter-by-is-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{event => {\n            onCreateFilter('is', event)\n            setMenuState(false)\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('create-is-filter-trigger')}"
        }
      ],
      "line_start": 349,
      "line_end": 361,
      "text": "\n        <ActionList.Item\n          key={`filter-by-is-${columnModel.id}`}\n          onSelect={event => {\n            onCreateFilter('is', event)\n            setMenuState(false)\n          }}\n          {...testIdProps('create-is-filter-trigger')}\n        >\n          <ActionList.LeadingVisual>\n            <FilterIcon />\n          </ActionList.LeadingVisual>\n          Filter by item state or type\n        </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 357,
      "line_end": 359,
      "text": "<ActionList.LeadingVisual>\n            <FilterIcon />\n          </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{`group-by-${columnModel.id}`}"
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onGroupByColumn}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: props.header.isGrouped ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps(`group-by-trigger`)}"
        }
      ],
      "line_start": 378,
      "line_end": 389,
      "text": "\n      <ActionList.Item\n        key={`group-by-${columnModel.id}`}\n        onSelect={onGroupByColumn}\n        sx={{fontWeight: props.header.isGrouped ? themeGet('fontWeights.bold') : themeGet('fontWeights.normal')}}\n        {...testIdProps(`group-by-trigger`)}\n      >\n        <ActionList.LeadingVisual>\n          <RowsIcon />\n        </ActionList.LeadingVisual>\n        {props.header.isGrouped ? 'Grouped by field' : 'Group by values'}\n        <ActionList.TrailingVisual>{props.header.isGrouped && <XIcon />}</ActionList.TrailingVisual>\n      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 384,
      "line_end": 386,
      "text": "<ActionList.LeadingVisual>\n          <RowsIcon />\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.TrailingVisual",
      "parent": "ActionList",
      "child": "TrailingVisual",
      "props": [],
      "line_start": 388,
      "line_end": 388,
      "text": "<ActionList.TrailingVisual>{props.header.isGrouped && <XIcon />}</ActionList.TrailingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative', px: 2, pt: 2}}"
        }
      ],
      "line_start": 449,
      "line_end": 482,
      "text": "\n      <Box sx={{position: 'relative', px: 2, pt: 2}}>\n        <form ref={formRef} onSubmit={e => e.preventDefault()}>\n          <FormControl id=\"update-column-name-input\">\n            <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n            <EmojiPicker sx={{display: 'block', width: '100%'}}>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <TextInput\n                id=\"update-column-name-input\"\n                ref={inputRef}\n                value={name}\n                tabIndex={-1}\n                block\n                placeholder=\"Column name\"\n                onChange={onChangeField}\n                onFocus={onFocusField}\n                {...inputCompositionProps}\n                disabled={!hasWritePermissions}\n                validationStatus={!isTitleValid ? 'error' : undefined}\n                aria-invalid={!isTitleValid}\n                aria-describedby=\"update-column-name-input-invalid\"\n              />\n            </EmojiPicker>\n            {!isTitleValid && (\n              <FormControl.Validation\n                id=\"update-column-name-input-invalid\"\n                variant=\"error\"\n                sx={{maxWidth: formSize?.clientWidth ? `${formSize.clientWidth}px` : 'unset'}}\n              >\n                {validationMessage}\n              </FormControl.Validation>\n            )}\n          </FormControl>\n        </form>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "FormControl",
      "props": [
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"update-column-name-input\""
        }
      ],
      "line_start": 451,
      "line_end": 480,
      "text": "<FormControl id=\"update-column-name-input\">\n            <FormControl.Label visuallyHidden>Column name</FormControl.Label>\n            <EmojiPicker sx={{display: 'block', width: '100%'}}>\n              {/* id and aria-describedby must be provided to the input, as the FormControl does not propagate this for our EmojiPicker wrapped input */}\n              <TextInput\n                id=\"update-column-name-input\"\n                ref={inputRef}\n                value={name}\n                tabIndex={-1}\n                block\n                placeholder=\"Column name\"\n                onChange={onChangeField}\n                onFocus={onFocusField}\n                {...inputCompositionProps}\n                disabled={!hasWritePermissions}\n                validationStatus={!isTitleValid ? 'error' : undefined}\n                aria-invalid={!isTitleValid}\n                aria-describedby=\"update-column-name-input-invalid\"\n              />\n            </EmojiPicker>\n            {!isTitleValid && (\n              <FormControl.Validation\n                id=\"update-column-name-input-invalid\"\n                variant=\"error\"\n                sx={{maxWidth: formSize?.clientWidth ? `${formSize.clientWidth}px` : 'unset'}}\n              >\n                {validationMessage}\n              </FormControl.Validation>\n            )}\n          </FormControl>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "FormControl.Label",
      "parent": "FormControl",
      "child": "Label",
      "props": [
        {
          "name": "visuallyHidden"
        }
      ],
      "line_start": 452,
      "line_end": 452,
      "text": "<FormControl.Label visuallyHidden>Column name</FormControl.Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "FormControl.Validation",
      "parent": "FormControl",
      "child": "Validation",
      "props": [
        {
          "name": "id",
          "kind": "StringLiteral",
          "text": "\"update-column-name-input-invalid\""
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"error\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{maxWidth: formSize?.clientWidth ? `${formSize.clientWidth}px` : 'unset'}}"
        }
      ],
      "line_start": 472,
      "line_end": 478,
      "text": "\n              <FormControl.Validation\n                id=\"update-column-name-input-invalid\"\n                variant=\"error\"\n                sx={{maxWidth: formSize?.clientWidth ? `${formSize.clientWidth}px` : 'unset'}}\n              >\n                {validationMessage}\n              </FormControl.Validation>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              color: !isNewMemex ? 'fg.muted' : undefined,\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              textAlign: 'left',\n              flexGrow: 1\n            }}"
        }
      ],
      "line_start": 508,
      "line_end": 518,
      "text": "<Text\n            sx={{\n              color: !isNewMemex ? 'fg.muted' : undefined,\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              textAlign: 'left',\n              flexGrow: 1\n            }}\n          >\n            {props.header.render('Header')}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              px: 0,\n              py: 0,\n              gap: 1\n            }}"
        }
      ],
      "line_start": 519,
      "line_end": 584,
      "text": "<Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              px: 0,\n              py: 0,\n              gap: 1\n            }}\n          >\n            <SortedLabel />\n            <GroupedLabel />\n            {!isNewMemex ? (\n              <ActionMenu open={menuOpen} onOpenChange={open => setMenuState(open)}>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={KebabHorizontalIcon}\n                    variant=\"invisible\"\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      px: 0,\n                      py: 0,\n                      height: 18,\n                      width: 20,\n                      color: 'fg.muted'\n                    }}\n                    aria-label={`${columnModel.name} column options`}\n                    {...testIdProps(`${columnModel.name}-column-menu-trigger`)}\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay {...testIdProps(`${columnModel.name}-column-menu`)}>\n                  <>{columnModel.userDefined && textField}</>\n                  <ActionList>\n                    {columnModel.userDefined && <ActionMenu.Divider sx={{mt: 0}} />}\n                    {sortMenuOptions}\n                    {itemOperations.length > 0 && <ActionMenu.Divider />}\n                    {itemOperations}\n                    <ActionMenu.Divider />\n                    <ActionList.Item\n                      onSelect={onHideColumn}\n                      disabled={columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}\n                    >\n                      <ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>\n                      Hide field\n                    </ActionList.Item>\n                    {hasWritePermissions && (\n                      <ActionList.Item\n                        variant=\"danger\"\n                        onSelect={openDialog}\n                        disabled={!columnModel.userDefined || !hasWritePermissions}\n                      >\n                        <ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>\n                        Delete field\n                      </ActionList.Item>\n                    )}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>\n            ) : null}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{menuOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{open => setMenuState(open)}"
        }
      ],
      "line_start": 532,
      "line_end": 582,
      "text": "\n              <ActionMenu open={menuOpen} onOpenChange={open => setMenuState(open)}>\n                <ActionMenu.Anchor>\n                  <IconButton\n                    icon={KebabHorizontalIcon}\n                    variant=\"invisible\"\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      px: 0,\n                      py: 0,\n                      height: 18,\n                      width: 20,\n                      color: 'fg.muted'\n                    }}\n                    aria-label={`${columnModel.name} column options`}\n                    {...testIdProps(`${columnModel.name}-column-menu-trigger`)}\n                  />\n                </ActionMenu.Anchor>\n                <ActionMenu.Overlay {...testIdProps(`${columnModel.name}-column-menu`)}>\n                  <>{columnModel.userDefined && textField}</>\n                  <ActionList>\n                    {columnModel.userDefined && <ActionMenu.Divider sx={{mt: 0}} />}\n                    {sortMenuOptions}\n                    {itemOperations.length > 0 && <ActionMenu.Divider />}\n                    {itemOperations}\n                    <ActionMenu.Divider />\n                    <ActionList.Item\n                      onSelect={onHideColumn}\n                      disabled={columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}\n                    >\n                      <ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>\n                      Hide field\n                    </ActionList.Item>\n                    {hasWritePermissions && (\n                      <ActionList.Item\n                        variant=\"danger\"\n                        onSelect={openDialog}\n                        disabled={!columnModel.userDefined || !hasWritePermissions}\n                      >\n                        <ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>\n                        Delete field\n                      </ActionList.Item>\n                    )}\n                  </ActionList>\n                </ActionMenu.Overlay>\n              </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionMenu.Anchor",
      "parent": "ActionMenu",
      "child": "Anchor",
      "props": [],
      "line_start": 533,
      "line_end": 550,
      "text": "<ActionMenu.Anchor>\n                  <IconButton\n                    icon={KebabHorizontalIcon}\n                    variant=\"invisible\"\n                    sx={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      px: 0,\n                      py: 0,\n                      height: 18,\n                      width: 20,\n                      color: 'fg.muted'\n                    }}\n                    aria-label={`${columnModel.name} column options`}\n                    {...testIdProps(`${columnModel.name}-column-menu-trigger`)}\n                  />\n                </ActionMenu.Anchor>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`${columnModel.name}-column-menu`)}"
        }
      ],
      "line_start": 551,
      "line_end": 581,
      "text": "<ActionMenu.Overlay {...testIdProps(`${columnModel.name}-column-menu`)}>\n                  <>{columnModel.userDefined && textField}</>\n                  <ActionList>\n                    {columnModel.userDefined && <ActionMenu.Divider sx={{mt: 0}} />}\n                    {sortMenuOptions}\n                    {itemOperations.length > 0 && <ActionMenu.Divider />}\n                    {itemOperations}\n                    <ActionMenu.Divider />\n                    <ActionList.Item\n                      onSelect={onHideColumn}\n                      disabled={columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}\n                    >\n                      <ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>\n                      Hide field\n                    </ActionList.Item>\n                    {hasWritePermissions && (\n                      <ActionList.Item\n                        variant=\"danger\"\n                        onSelect={openDialog}\n                        disabled={!columnModel.userDefined || !hasWritePermissions}\n                      >\n                        <ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>\n                        Delete field\n                      </ActionList.Item>\n                    )}\n                  </ActionList>\n                </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList",
      "props": [],
      "line_start": 553,
      "line_end": 580,
      "text": "<ActionList>\n                    {columnModel.userDefined && <ActionMenu.Divider sx={{mt: 0}} />}\n                    {sortMenuOptions}\n                    {itemOperations.length > 0 && <ActionMenu.Divider />}\n                    {itemOperations}\n                    <ActionMenu.Divider />\n                    <ActionList.Item\n                      onSelect={onHideColumn}\n                      disabled={columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}\n                    >\n                      <ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>\n                      Hide field\n                    </ActionList.Item>\n                    {hasWritePermissions && (\n                      <ActionList.Item\n                        variant=\"danger\"\n                        onSelect={openDialog}\n                        disabled={!columnModel.userDefined || !hasWritePermissions}\n                      >\n                        <ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>\n                        Delete field\n                      </ActionList.Item>\n                    )}\n                  </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onHideColumn}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}"
        }
      ],
      "line_start": 559,
      "line_end": 567,
      "text": "<ActionList.Item\n                      onSelect={onHideColumn}\n                      disabled={columnModel.dataType === MemexColumnDataType.Title || isSortedByThisColumn}\n                    >\n                      <ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>\n                      Hide field\n                    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 563,
      "line_end": 565,
      "text": "<ActionList.LeadingVisual>\n                        <EyeClosedIcon />\n                      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        },
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{openDialog}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!columnModel.userDefined || !hasWritePermissions}"
        }
      ],
      "line_start": 569,
      "line_end": 578,
      "text": "\n                      <ActionList.Item\n                        variant=\"danger\"\n                        onSelect={openDialog}\n                        disabled={!columnModel.userDefined || !hasWritePermissions}\n                      >\n                        <ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>\n                        Delete field\n                      </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 574,
      "line_end": 576,
      "text": "<ActionList.LeadingVisual>\n                          <TrashIcon />\n                        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "Link",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onHideColumn}"
        }
      ],
      "line_start": 668,
      "line_end": 670,
      "text": "<Link as=\"button\" onClick={onHideColumn}>\n        hide this field\n      </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/header/table-header-cell.tsx",
      "name": "ConfirmationDialog",
      "props": [
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{closeDialog}"
        },
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Delete field?\""
        },
        {
          "name": "confirmButtonContent",
          "kind": "StringLiteral",
          "text": "\"Delete\""
        },
        {
          "name": "confirmButtonType",
          "kind": "StringLiteral",
          "text": "\"danger\""
        }
      ],
      "line_start": 749,
      "line_end": 756,
      "text": "\n    <ConfirmationDialog\n      onClose={closeDialog}\n      title=\"Delete field?\"\n      confirmButtonContent=\"Delete\"\n      confirmButtonType=\"danger\"\n    >\n      <BodyText columnModel={columnModel} onHideColumn={hideColumn} showPreserveText={showPreserveText} />\n    </ConfirmationDialog>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/iteration-renderer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{overflow: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 58,
      "line_end": 62,
      "text": "<Box sx={{overflow: 'hidden', display: 'flex'}}>\n        <Label sx={{bg: 'canvas.subtle', color: 'fg.muted', my: 0}} ref={ref}>\n          <SanitizedHtmlSpan>{currentValue.value.titleHtml}</SanitizedHtmlSpan>\n        </Label>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/iteration-renderer.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{bg: 'canvas.subtle', color: 'fg.muted', my: 0}}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        }
      ],
      "line_start": 59,
      "line_end": 61,
      "text": "<Label sx={{bg: 'canvas.subtle', color: 'fg.muted', my: 0}} ref={ref}>\n          <SanitizedHtmlSpan>{currentValue.value.titleHtml}</SanitizedHtmlSpan>\n        </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/single-select-renderer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{overflow: 'hidden', display: 'flex'}}"
        }
      ],
      "line_start": 59,
      "line_end": 63,
      "text": "<Box sx={{overflow: 'hidden', display: 'flex'}}>\n          <Label sx={{bg: 'canvas.subtle', color: 'fg.muted', my: 0}} ref={ref}>\n            <SanitizedHtmlSpan>{matchingOption.nameHtml}</SanitizedHtmlSpan>\n          </Label>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/single-select-renderer.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{bg: 'canvas.subtle', color: 'fg.muted', my: 0}}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        }
      ],
      "line_start": 60,
      "line_end": 62,
      "text": "<Label sx={{bg: 'canvas.subtle', color: 'fg.muted', my: 0}} ref={ref}>\n            <SanitizedHtmlSpan>{matchingOption.nameHtml}</SanitizedHtmlSpan>\n          </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/title-renderer.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexShrink: 0, mr: 2, display: 'flex'}}"
        }
      ],
      "line_start": 24,
      "line_end": 26,
      "text": "<Box sx={{flexShrink: 0, mr: 2, display: 'flex'}}>\n          <MemexItemIcon titleColumn={currentValue} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/react_table/renderers/tracks-renderer.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          p: 0,\n          borderRadius: 3,\n          '&:hover:not([disabled]), &:focus:not([disabled])': {backgroundColor: 'transparent', color: 'fg.default'}\n        }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{-1}"
        }
      ],
      "line_start": 55,
      "line_end": 66,
      "text": "<Button\n        variant=\"invisible\"\n        sx={{\n          p: 0,\n          borderRadius: 3,\n          '&:hover:not([disabled]), &:focus:not([disabled])': {backgroundColor: 'transparent', color: 'fg.default'}\n        }}\n        onClick={onClick}\n        tabIndex={-1}\n      >\n        <TracksCell progress={currentValue.value} />\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/access-settings-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', flexGrow: 1, display: 'flex', paddingBottom: 5}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('access-settings')}"
        }
      ],
      "line_start": 16,
      "line_end": 30,
      "text": "\n      <Box\n        sx={{flexDirection: 'column', flexGrow: 1, display: 'flex', paddingBottom: 5}}\n        {...testIdProps('access-settings')}\n      >\n        <Heading as=\"h2\" sx={{mb: 3, fontSize: 4, fontWeight: 'normal'}}>\n          Who has access\n        </Heading>\n\n        <PrivacySettings />\n        <AddCollaborators />\n\n        <CollaboratorsFilterProvider>\n          <CollaboratorsTable />\n        </CollaboratorsFilterProvider>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/access-settings-view.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 3, fontSize: 4, fontWeight: 'normal'}}"
        }
      ],
      "line_start": 20,
      "line_end": 22,
      "text": "<Heading as=\"h2\" sx={{mb: 3, fontSize: 4, fontWeight: 'normal'}}>\n          Who has access\n        </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"success-message\""
        }
      ],
      "line_start": 38,
      "line_end": 41,
      "text": "\n    <Box data-test-id=\"success-message\">\n      <StyledOcticon icon={CheckIcon} sx={{ml: 3, color: 'success.fg'}} />\n      <Text> {collaboratorsAddedCount} successfully added </Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Text",
      "props": [],
      "line_start": 40,
      "line_end": 40,
      "text": "<Text> {collaboratorsAddedCount} successfully added </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"failure-message\""
        }
      ],
      "line_start": 48,
      "line_end": 51,
      "text": "\n    <Box data-test-id=\"failure-message\">\n      <StyledOcticon icon={StopIcon} sx={{ml: 3, color: 'danger.fg'}} />\n      <Text> Unable to add some users </Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Text",
      "props": [],
      "line_start": 50,
      "line_end": 50,
      "text": "<Text> Unable to add some users </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: suggestion.isCollaborator ? 'fg.muted' : 'fg.default'}}"
        }
      ],
      "line_start": 254,
      "line_end": 256,
      "text": "<Text sx={{color: suggestion.isCollaborator ? 'fg.muted' : 'fg.default'}}>\n          {suggestion.name} <Text sx={{color: 'fg.subtle', mx: 1}}>{displayValue}</Text>\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.subtle', mx: 1}}"
        }
      ],
      "line_start": 255,
      "line_end": 255,
      "text": "<Text sx={{color: 'fg.subtle', mx: 1}}>{displayValue}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.subtle', fontSize: 12}}"
        }
      ],
      "line_start": 258,
      "line_end": 258,
      "text": "\n          <Text sx={{color: 'fg.subtle', fontSize: 12}}>&#183; Already a collaborator</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', flexGrow: 1, display: 'flex'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('add-collaborators')}"
        }
      ],
      "line_start": 269,
      "line_end": 388,
      "text": "\n    <Box sx={{flexDirection: 'column', flexGrow: 1, display: 'flex'}} {...testIdProps('add-collaborators')}>\n      <FormControl sx={{mb: 5}}>\n        <FormControl.Label visuallyHidden>Add Collaborators</FormControl.Label>\n        <Box\n          sx={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            my: 2\n          }}\n        >\n          <Heading as=\"h4\" sx={{fontSize: 4, fontWeight: 'normal'}}>\n            Invite collaborators\n          </Heading>\n          <Box>\n            <div aria-live=\"polite\">\n              {invitationRequestState === CommitState.Successful && (\n                <AddCollaboratorSuccess\n                  setInvitationRequestState={setInvitationRequestState}\n                  collaboratorsAddedCount={collaboratorsAddedCount}\n                />\n              )}\n              {invitationRequestState === CommitState.Failed && <AddCollaboratorError />}\n            </div>\n          </Box>\n        </Box>\n        <Box sx={{flexDirection: 'row', alignItems: 'flex-start', flexWrap: 'nowrap', display: 'flex'}}>\n          <Box\n            ref={containerRef}\n            onClick={() => inputRef.current && inputRef.current.focus()}\n            sx={{\n              flex: 1,\n              width: '100%',\n              display: 'flex',\n              boxShadow: theme => isInputActive && theme.shadows.btn.focusShadow,\n              flexDirection: 'row',\n              borderRadius: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: isInputActive ? 'accent.emphasis' : 'border.default'\n            }}\n          >\n            <StyledOcticon icon={PersonIcon} sx={{m: 2, color: 'fg.muted'}} />\n            <Box\n              sx={{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}\n            >\n              {selectedCollaborators.map(collaborator => {\n                const {id, avatarUrl, actor_type} = collaborator\n                return (\n                  <CollaboratorPill\n                    key={id}\n                    avatarUrl={avatarUrl}\n                    login={getCollaboratorDisplayValue(collaborator)}\n                    id={id}\n                    onRemove={() => onPillRemoved(id, actor_type)}\n                  />\n                )\n              })}\n\n              <BorderlessTextInput\n                role=\"combobox\"\n                aria-haspopup=\"listbox\"\n                aria-expanded={showCollaboratorSuggestionsList}\n                aria-autocomplete=\"list\"\n                aria-controls={FILTER_COLLABORATORS_LIST_ID}\n                aria-label={addCollaboratorsLabel}\n                style={{\n                  flex: 1,\n                  width: 'auto',\n                  display: 'inline'\n                }}\n                autoComplete=\"off\"\n                ref={inputRef}\n                onInput={onInput}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onKeyDown={onKeyDown}\n                placeholder={addCollaboratorsLabel}\n                id=\"add-collaborators-input\"\n                {...testIdProps('add-collaborators-input')}\n              />\n\n              {showCollaboratorSuggestionsList && (\n                <SuggestionsList\n                  testId={FILTER_COLLABORATORS_LIST_ID}\n                  listRef={listRef}\n                  controllingElementRef={inputRef}\n                  xOriginEdgeAlign=\"left\"\n                  style={{width: '400px'}}\n                  items={suggestedCollaborators.map(collaborator => {\n                    return {\n                      renderItem: () => renderCollabSuggestionItem(collaborator),\n                      key: collaborator.id,\n                      value: getCollaboratorDisplayValue(collaborator),\n                      asHTML: true,\n                      onSelect: () => onSuggestionSelect(collaborator),\n                      testId: `collaborator-suggestion-item-${getCollaboratorDisplayValue(collaborator)}`\n                    }\n                  })}\n                />\n              )}\n            </Box>\n          </Box>\n          <Box sx={{mx: 2}}>\n            <CollaboratorRoleDropDown selectedRoles={[selectedRole]} handleOnClick={setSelectedRole} />\n          </Box>\n          <Button variant=\"primary\" onClick={onSubmit} {...testIdProps('add-collaborators-invite-button')}>\n            Invite\n          </Button>\n        </Box>\n      </FormControl>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "FormControl",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 5}}"
        }
      ],
      "line_start": 270,
      "line_end": 387,
      "text": "<FormControl sx={{mb: 5}}>\n        <FormControl.Label visuallyHidden>Add Collaborators</FormControl.Label>\n        <Box\n          sx={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            my: 2\n          }}\n        >\n          <Heading as=\"h4\" sx={{fontSize: 4, fontWeight: 'normal'}}>\n            Invite collaborators\n          </Heading>\n          <Box>\n            <div aria-live=\"polite\">\n              {invitationRequestState === CommitState.Successful && (\n                <AddCollaboratorSuccess\n                  setInvitationRequestState={setInvitationRequestState}\n                  collaboratorsAddedCount={collaboratorsAddedCount}\n                />\n              )}\n              {invitationRequestState === CommitState.Failed && <AddCollaboratorError />}\n            </div>\n          </Box>\n        </Box>\n        <Box sx={{flexDirection: 'row', alignItems: 'flex-start', flexWrap: 'nowrap', display: 'flex'}}>\n          <Box\n            ref={containerRef}\n            onClick={() => inputRef.current && inputRef.current.focus()}\n            sx={{\n              flex: 1,\n              width: '100%',\n              display: 'flex',\n              boxShadow: theme => isInputActive && theme.shadows.btn.focusShadow,\n              flexDirection: 'row',\n              borderRadius: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: isInputActive ? 'accent.emphasis' : 'border.default'\n            }}\n          >\n            <StyledOcticon icon={PersonIcon} sx={{m: 2, color: 'fg.muted'}} />\n            <Box\n              sx={{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}\n            >\n              {selectedCollaborators.map(collaborator => {\n                const {id, avatarUrl, actor_type} = collaborator\n                return (\n                  <CollaboratorPill\n                    key={id}\n                    avatarUrl={avatarUrl}\n                    login={getCollaboratorDisplayValue(collaborator)}\n                    id={id}\n                    onRemove={() => onPillRemoved(id, actor_type)}\n                  />\n                )\n              })}\n\n              <BorderlessTextInput\n                role=\"combobox\"\n                aria-haspopup=\"listbox\"\n                aria-expanded={showCollaboratorSuggestionsList}\n                aria-autocomplete=\"list\"\n                aria-controls={FILTER_COLLABORATORS_LIST_ID}\n                aria-label={addCollaboratorsLabel}\n                style={{\n                  flex: 1,\n                  width: 'auto',\n                  display: 'inline'\n                }}\n                autoComplete=\"off\"\n                ref={inputRef}\n                onInput={onInput}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onKeyDown={onKeyDown}\n                placeholder={addCollaboratorsLabel}\n                id=\"add-collaborators-input\"\n                {...testIdProps('add-collaborators-input')}\n              />\n\n              {showCollaboratorSuggestionsList && (\n                <SuggestionsList\n                  testId={FILTER_COLLABORATORS_LIST_ID}\n                  listRef={listRef}\n                  controllingElementRef={inputRef}\n                  xOriginEdgeAlign=\"left\"\n                  style={{width: '400px'}}\n                  items={suggestedCollaborators.map(collaborator => {\n                    return {\n                      renderItem: () => renderCollabSuggestionItem(collaborator),\n                      key: collaborator.id,\n                      value: getCollaboratorDisplayValue(collaborator),\n                      asHTML: true,\n                      onSelect: () => onSuggestionSelect(collaborator),\n                      testId: `collaborator-suggestion-item-${getCollaboratorDisplayValue(collaborator)}`\n                    }\n                  })}\n                />\n              )}\n            </Box>\n          </Box>\n          <Box sx={{mx: 2}}>\n            <CollaboratorRoleDropDown selectedRoles={[selectedRole]} handleOnClick={setSelectedRole} />\n          </Box>\n          <Button variant=\"primary\" onClick={onSubmit} {...testIdProps('add-collaborators-invite-button')}>\n            Invite\n          </Button>\n        </Box>\n      </FormControl>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "FormControl.Label",
      "parent": "FormControl",
      "child": "Label",
      "props": [
        {
          "name": "visuallyHidden"
        }
      ],
      "line_start": 271,
      "line_end": 271,
      "text": "<FormControl.Label visuallyHidden>Add Collaborators</FormControl.Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            my: 2\n          }}"
        }
      ],
      "line_start": 272,
      "line_end": 296,
      "text": "<Box\n          sx={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            my: 2\n          }}\n        >\n          <Heading as=\"h4\" sx={{fontSize: 4, fontWeight: 'normal'}}>\n            Invite collaborators\n          </Heading>\n          <Box>\n            <div aria-live=\"polite\">\n              {invitationRequestState === CommitState.Successful && (\n                <AddCollaboratorSuccess\n                  setInvitationRequestState={setInvitationRequestState}\n                  collaboratorsAddedCount={collaboratorsAddedCount}\n                />\n              )}\n              {invitationRequestState === CommitState.Failed && <AddCollaboratorError />}\n            </div>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontSize: 4, fontWeight: 'normal'}}"
        }
      ],
      "line_start": 282,
      "line_end": 284,
      "text": "<Heading as=\"h4\" sx={{fontSize: 4, fontWeight: 'normal'}}>\n            Invite collaborators\n          </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [],
      "line_start": 285,
      "line_end": 295,
      "text": "<Box>\n            <div aria-live=\"polite\">\n              {invitationRequestState === CommitState.Successful && (\n                <AddCollaboratorSuccess\n                  setInvitationRequestState={setInvitationRequestState}\n                  collaboratorsAddedCount={collaboratorsAddedCount}\n                />\n              )}\n              {invitationRequestState === CommitState.Failed && <AddCollaboratorError />}\n            </div>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', alignItems: 'flex-start', flexWrap: 'nowrap', display: 'flex'}}"
        }
      ],
      "line_start": 297,
      "line_end": 386,
      "text": "<Box sx={{flexDirection: 'row', alignItems: 'flex-start', flexWrap: 'nowrap', display: 'flex'}}>\n          <Box\n            ref={containerRef}\n            onClick={() => inputRef.current && inputRef.current.focus()}\n            sx={{\n              flex: 1,\n              width: '100%',\n              display: 'flex',\n              boxShadow: theme => isInputActive && theme.shadows.btn.focusShadow,\n              flexDirection: 'row',\n              borderRadius: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: isInputActive ? 'accent.emphasis' : 'border.default'\n            }}\n          >\n            <StyledOcticon icon={PersonIcon} sx={{m: 2, color: 'fg.muted'}} />\n            <Box\n              sx={{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}\n            >\n              {selectedCollaborators.map(collaborator => {\n                const {id, avatarUrl, actor_type} = collaborator\n                return (\n                  <CollaboratorPill\n                    key={id}\n                    avatarUrl={avatarUrl}\n                    login={getCollaboratorDisplayValue(collaborator)}\n                    id={id}\n                    onRemove={() => onPillRemoved(id, actor_type)}\n                  />\n                )\n              })}\n\n              <BorderlessTextInput\n                role=\"combobox\"\n                aria-haspopup=\"listbox\"\n                aria-expanded={showCollaboratorSuggestionsList}\n                aria-autocomplete=\"list\"\n                aria-controls={FILTER_COLLABORATORS_LIST_ID}\n                aria-label={addCollaboratorsLabel}\n                style={{\n                  flex: 1,\n                  width: 'auto',\n                  display: 'inline'\n                }}\n                autoComplete=\"off\"\n                ref={inputRef}\n                onInput={onInput}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onKeyDown={onKeyDown}\n                placeholder={addCollaboratorsLabel}\n                id=\"add-collaborators-input\"\n                {...testIdProps('add-collaborators-input')}\n              />\n\n              {showCollaboratorSuggestionsList && (\n                <SuggestionsList\n                  testId={FILTER_COLLABORATORS_LIST_ID}\n                  listRef={listRef}\n                  controllingElementRef={inputRef}\n                  xOriginEdgeAlign=\"left\"\n                  style={{width: '400px'}}\n                  items={suggestedCollaborators.map(collaborator => {\n                    return {\n                      renderItem: () => renderCollabSuggestionItem(collaborator),\n                      key: collaborator.id,\n                      value: getCollaboratorDisplayValue(collaborator),\n                      asHTML: true,\n                      onSelect: () => onSuggestionSelect(collaborator),\n                      testId: `collaborator-suggestion-item-${getCollaboratorDisplayValue(collaborator)}`\n                    }\n                  })}\n                />\n              )}\n            </Box>\n          </Box>\n          <Box sx={{mx: 2}}>\n            <CollaboratorRoleDropDown selectedRoles={[selectedRole]} handleOnClick={setSelectedRole} />\n          </Box>\n          <Button variant=\"primary\" onClick={onSubmit} {...testIdProps('add-collaborators-invite-button')}>\n            Invite\n          </Button>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{containerRef}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => inputRef.current && inputRef.current.focus()}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              flex: 1,\n              width: '100%',\n              display: 'flex',\n              boxShadow: theme => isInputActive && theme.shadows.btn.focusShadow,\n              flexDirection: 'row',\n              borderRadius: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: isInputActive ? 'accent.emphasis' : 'border.default'\n            }}"
        }
      ],
      "line_start": 298,
      "line_end": 379,
      "text": "<Box\n            ref={containerRef}\n            onClick={() => inputRef.current && inputRef.current.focus()}\n            sx={{\n              flex: 1,\n              width: '100%',\n              display: 'flex',\n              boxShadow: theme => isInputActive && theme.shadows.btn.focusShadow,\n              flexDirection: 'row',\n              borderRadius: 2,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: isInputActive ? 'accent.emphasis' : 'border.default'\n            }}\n          >\n            <StyledOcticon icon={PersonIcon} sx={{m: 2, color: 'fg.muted'}} />\n            <Box\n              sx={{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}\n            >\n              {selectedCollaborators.map(collaborator => {\n                const {id, avatarUrl, actor_type} = collaborator\n                return (\n                  <CollaboratorPill\n                    key={id}\n                    avatarUrl={avatarUrl}\n                    login={getCollaboratorDisplayValue(collaborator)}\n                    id={id}\n                    onRemove={() => onPillRemoved(id, actor_type)}\n                  />\n                )\n              })}\n\n              <BorderlessTextInput\n                role=\"combobox\"\n                aria-haspopup=\"listbox\"\n                aria-expanded={showCollaboratorSuggestionsList}\n                aria-autocomplete=\"list\"\n                aria-controls={FILTER_COLLABORATORS_LIST_ID}\n                aria-label={addCollaboratorsLabel}\n                style={{\n                  flex: 1,\n                  width: 'auto',\n                  display: 'inline'\n                }}\n                autoComplete=\"off\"\n                ref={inputRef}\n                onInput={onInput}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onKeyDown={onKeyDown}\n                placeholder={addCollaboratorsLabel}\n                id=\"add-collaborators-input\"\n                {...testIdProps('add-collaborators-input')}\n              />\n\n              {showCollaboratorSuggestionsList && (\n                <SuggestionsList\n                  testId={FILTER_COLLABORATORS_LIST_ID}\n                  listRef={listRef}\n                  controllingElementRef={inputRef}\n                  xOriginEdgeAlign=\"left\"\n                  style={{width: '400px'}}\n                  items={suggestedCollaborators.map(collaborator => {\n                    return {\n                      renderItem: () => renderCollabSuggestionItem(collaborator),\n                      key: collaborator.id,\n                      value: getCollaboratorDisplayValue(collaborator),\n                      asHTML: true,\n                      onSelect: () => onSuggestionSelect(collaborator),\n                      testId: `collaborator-suggestion-item-${getCollaboratorDisplayValue(collaborator)}`\n                    }\n                  })}\n                />\n              )}\n            </Box>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}"
        }
      ],
      "line_start": 314,
      "line_end": 378,
      "text": "<Box\n              sx={{\n                flexDirection: 'row',\n                display: 'flex',\n                flex: 1,\n                flexWrap: 'wrap',\n                cursor: 'text'\n              }}\n            >\n              {selectedCollaborators.map(collaborator => {\n                const {id, avatarUrl, actor_type} = collaborator\n                return (\n                  <CollaboratorPill\n                    key={id}\n                    avatarUrl={avatarUrl}\n                    login={getCollaboratorDisplayValue(collaborator)}\n                    id={id}\n                    onRemove={() => onPillRemoved(id, actor_type)}\n                  />\n                )\n              })}\n\n              <BorderlessTextInput\n                role=\"combobox\"\n                aria-haspopup=\"listbox\"\n                aria-expanded={showCollaboratorSuggestionsList}\n                aria-autocomplete=\"list\"\n                aria-controls={FILTER_COLLABORATORS_LIST_ID}\n                aria-label={addCollaboratorsLabel}\n                style={{\n                  flex: 1,\n                  width: 'auto',\n                  display: 'inline'\n                }}\n                autoComplete=\"off\"\n                ref={inputRef}\n                onInput={onInput}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onKeyDown={onKeyDown}\n                placeholder={addCollaboratorsLabel}\n                id=\"add-collaborators-input\"\n                {...testIdProps('add-collaborators-input')}\n              />\n\n              {showCollaboratorSuggestionsList && (\n                <SuggestionsList\n                  testId={FILTER_COLLABORATORS_LIST_ID}\n                  listRef={listRef}\n                  controllingElementRef={inputRef}\n                  xOriginEdgeAlign=\"left\"\n                  style={{width: '400px'}}\n                  items={suggestedCollaborators.map(collaborator => {\n                    return {\n                      renderItem: () => renderCollabSuggestionItem(collaborator),\n                      key: collaborator.id,\n                      value: getCollaboratorDisplayValue(collaborator),\n                      asHTML: true,\n                      onSelect: () => onSuggestionSelect(collaborator),\n                      testId: `collaborator-suggestion-item-${getCollaboratorDisplayValue(collaborator)}`\n                    }\n                  })}\n                />\n              )}\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mx: 2}}"
        }
      ],
      "line_start": 380,
      "line_end": 382,
      "text": "<Box sx={{mx: 2}}>\n            <CollaboratorRoleDropDown selectedRoles={[selectedRole]} handleOnClick={setSelectedRole} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/add-collaborators.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onSubmit}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('add-collaborators-invite-button')}"
        }
      ],
      "line_start": 383,
      "line_end": 385,
      "text": "<Button variant=\"primary\" onClick={onSubmit} {...testIdProps('add-collaborators-invite-button')}>\n            Invite\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "name": "Box",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{id}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        m: 1,\n        pl: '2px',\n        pr: 1,\n        pt: '2px',\n        pb: '2px',\n        display: 'flex',\n        borderRadius: '20px',\n        bg: 'accent.subtle',\n        flexDirection: 'row',\n        alignItems: 'center'\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`collaborator-pill-${login}`)}"
        }
      ],
      "line_start": 15,
      "line_end": 36,
      "text": "\n    <Box\n      key={id}\n      sx={{\n        m: 1,\n        pl: '2px',\n        pr: 1,\n        pt: '2px',\n        pb: '2px',\n        display: 'flex',\n        borderRadius: '20px',\n        bg: 'accent.subtle',\n        flexDirection: 'row',\n        alignItems: 'center'\n      }}\n      {...testIdProps(`collaborator-pill-${login}`)}\n    >\n      <Avatar alt={login} src={avatarUrl} sx={{mr: 1}} />\n      <Text sx={{mr: 1, color: 'accent.fg'}}>{login}</Text>\n      <Button variant=\"invisible\" onClick={() => onRemove(id)} sx={{p: 0}}>\n        <XIcon />\n      </Button>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 1, color: 'accent.fg'}}"
        }
      ],
      "line_start": 32,
      "line_end": 32,
      "text": "<Text sx={{mr: 1, color: 'accent.fg'}}>{login}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-pill.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onRemove(id)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 0}}"
        }
      ],
      "line_start": 33,
      "line_end": 35,
      "text": "<Button variant=\"invisible\" onClick={() => onRemove(id)} sx={{p: 0}}>\n        <XIcon />\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{0}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{selected}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClickHandler}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{(e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n          onClickHandler()\n          onClose()\n        }\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps(`collaborators-role-dropdown-item-${permission}`)}"
        }
      ],
      "line_start": 32,
      "line_end": 46,
      "text": "\n    <ActionList.Item\n      tabIndex={0}\n      selected={selected}\n      onClick={onClickHandler}\n      onKeyDown={(e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') {\n          onClickHandler()\n          onClose()\n        }\n      }}\n      {...testIdProps(`collaborators-role-dropdown-item-${permission}`)}\n    >\n      {displayName}\n      <ActionList.Description variant=\"block\">{description}</ActionList.Description>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"block\""
        }
      ],
      "line_start": 45,
      "line_end": 45,
      "text": "<ActionList.Description variant=\"block\">{description}</ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative'}}"
        }
      ],
      "line_start": 107,
      "line_end": 131,
      "text": "\n    <Box sx={{position: 'relative'}}>\n      <ActionMenu open={isOpen} onOpenChange={open => setIsOpen(open)} {...testIdProps('collaborators-role-dropdown')}>\n        <ActionMenu.Button onClick={handleDropDownButtonClick} {...testIdProps('collaborators-role-dropdown-button')}>\n          {isOrganizationRole ? null : <span style={{fontWeight: 400}}>Role: </span>}\n          {selectedRole}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay anchorSide={align}>\n          <ActionList ref={combinedRef} selectionVariant=\"single\">\n            {roles.map(role => (\n              <CollaboratorRoleDropDownItem\n                permission={role.value}\n                description={role.description}\n                displayName={role.displayName}\n                onClose={() => setIsOpen(false)}\n                selected={selectedRolesTitleCased.has(role.displayName)}\n                handleOnClick={(newRole: Permission) => {\n                  handleOnClick(newRole)\n                }}\n                key={role.value}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{open => setIsOpen(open)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-role-dropdown')}"
        }
      ],
      "line_start": 108,
      "line_end": 130,
      "text": "<ActionMenu open={isOpen} onOpenChange={open => setIsOpen(open)} {...testIdProps('collaborators-role-dropdown')}>\n        <ActionMenu.Button onClick={handleDropDownButtonClick} {...testIdProps('collaborators-role-dropdown-button')}>\n          {isOrganizationRole ? null : <span style={{fontWeight: 400}}>Role: </span>}\n          {selectedRole}\n        </ActionMenu.Button>\n        <ActionMenu.Overlay anchorSide={align}>\n          <ActionList ref={combinedRef} selectionVariant=\"single\">\n            {roles.map(role => (\n              <CollaboratorRoleDropDownItem\n                permission={role.value}\n                description={role.description}\n                displayName={role.displayName}\n                onClose={() => setIsOpen(false)}\n                selected={selectedRolesTitleCased.has(role.displayName)}\n                handleOnClick={(newRole: Permission) => {\n                  handleOnClick(newRole)\n                }}\n                key={role.value}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{handleDropDownButtonClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-role-dropdown-button')}"
        }
      ],
      "line_start": 109,
      "line_end": 112,
      "text": "<ActionMenu.Button onClick={handleDropDownButtonClick} {...testIdProps('collaborators-role-dropdown-button')}>\n          {isOrganizationRole ? null : <span style={{fontWeight: 400}}>Role: </span>}\n          {selectedRole}\n        </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [
        {
          "name": "anchorSide",
          "kind": "JsxExpression",
          "text": "{align}"
        }
      ],
      "line_start": 113,
      "line_end": 129,
      "text": "<ActionMenu.Overlay anchorSide={align}>\n          <ActionList ref={combinedRef} selectionVariant=\"single\">\n            {roles.map(role => (\n              <CollaboratorRoleDropDownItem\n                permission={role.value}\n                description={role.description}\n                displayName={role.displayName}\n                onClose={() => setIsOpen(false)}\n                selected={selectedRolesTitleCased.has(role.displayName)}\n                handleOnClick={(newRole: Permission) => {\n                  handleOnClick(newRole)\n                }}\n                key={role.value}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborator-role-drop-down.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{combinedRef}"
        },
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 114,
      "line_end": 128,
      "text": "<ActionList ref={combinedRef} selectionVariant=\"single\">\n            {roles.map(role => (\n              <CollaboratorRoleDropDownItem\n                permission={role.value}\n                description={role.description}\n                displayName={role.displayName}\n                onClose={() => setIsOpen(false)}\n                selected={selectedRolesTitleCased.has(role.displayName)}\n                handleOnClick={(newRole: Permission) => {\n                  handleOnClick(newRole)\n                }}\n                key={role.value}\n              />\n            ))}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flex: 'auto', alignItems: 'center'}}"
        }
      ],
      "line_start": 94,
      "line_end": 152,
      "text": "<Box sx={{display: 'flex', flex: 'auto', alignItems: 'center'}}>\n        <Box sx={{mr: 3}}>\n          <input\n            type=\"checkbox\"\n            checked={isSelected}\n            name={actorIdentifier(collaborator)}\n            onChange={onCheckboxChange}\n            {...testIdProps(`collaborators-checkbox-${displayValue}`)}\n          />\n        </Box>\n        <Box sx={{display: 'flex', alignItems: 'center', flex: 'auto'}}>\n          <Avatar\n            alt={displayValue}\n            src={collaborator.avatarUrl}\n            size={32}\n            sx={{mr: 3}}\n            data-hovercard-type={collaborator.actor_type}\n            data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n          />\n          <Box sx={{display: 'flex', flexDirection: 'column'}}>\n            <Link\n              data-hovercard-type={collaborator.actor_type}\n              data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n              sx={{cursor: 'pointer', textDecoration: 'none', fontWeight: 'bold'}}\n              href={getCollaboratorUrl(collaborator, projectOwner)}\n            >\n              {collaborator.name}\n            </Link>\n\n            <Text sx={{color: 'fg.muted'}} data-test-id=\"collaborator-login\">\n              {displayValue}\n            </Text>\n          </Box>\n        </Box>\n        <CollaboratorRoleDropDown\n          selectedRoles={[roleAssigned]}\n          handleOnClick={(role: Permission) => onDropDownClick(role, new Set([actorIdentifier(collaborator)]))}\n        />\n        <Button\n          variant=\"invisible\"\n          onClick={() => onRemoveButtonClick(new Set([actorIdentifier(collaborator)]))}\n          {...testIdProps(`remove-collaborator-${displayValue}`)}\n          sx={{\n            color: 'fg.muted',\n            border: '1px solid',\n            borderColor: 'transparent',\n            boxShadow: 'none',\n            '&:hover:not([disabled]), &:focus:not([disabled])': {\n              color: 'btn.danger.text',\n              border: '1px solid',\n              borderColor: 'btn.border'\n            },\n            marginLeft: 2\n          }}\n          aria-label={Resources.removeTitle}\n        >\n          {Resources.removeTitle}\n        </Button>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 3}}"
        }
      ],
      "line_start": 95,
      "line_end": 103,
      "text": "<Box sx={{mr: 3}}>\n          <input\n            type=\"checkbox\"\n            checked={isSelected}\n            name={actorIdentifier(collaborator)}\n            onChange={onCheckboxChange}\n            {...testIdProps(`collaborators-checkbox-${displayValue}`)}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', flex: 'auto'}}"
        }
      ],
      "line_start": 104,
      "line_end": 127,
      "text": "<Box sx={{display: 'flex', alignItems: 'center', flex: 'auto'}}>\n          <Avatar\n            alt={displayValue}\n            src={collaborator.avatarUrl}\n            size={32}\n            sx={{mr: 3}}\n            data-hovercard-type={collaborator.actor_type}\n            data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n          />\n          <Box sx={{display: 'flex', flexDirection: 'column'}}>\n            <Link\n              data-hovercard-type={collaborator.actor_type}\n              data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n              sx={{cursor: 'pointer', textDecoration: 'none', fontWeight: 'bold'}}\n              href={getCollaboratorUrl(collaborator, projectOwner)}\n            >\n              {collaborator.name}\n            </Link>\n\n            <Text sx={{color: 'fg.muted'}} data-test-id=\"collaborator-login\">\n              {displayValue}\n            </Text>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexDirection: 'column'}}"
        }
      ],
      "line_start": 113,
      "line_end": 126,
      "text": "<Box sx={{display: 'flex', flexDirection: 'column'}}>\n            <Link\n              data-hovercard-type={collaborator.actor_type}\n              data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n              sx={{cursor: 'pointer', textDecoration: 'none', fontWeight: 'bold'}}\n              href={getCollaboratorUrl(collaborator, projectOwner)}\n            >\n              {collaborator.name}\n            </Link>\n\n            <Text sx={{color: 'fg.muted'}} data-test-id=\"collaborator-login\">\n              {displayValue}\n            </Text>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Link",
      "props": [
        {
          "name": "data-hovercard-type",
          "kind": "JsxExpression",
          "text": "{collaborator.actor_type}"
        },
        {
          "name": "data-hovercard-url",
          "kind": "JsxExpression",
          "text": "{getCollaboratorHovercardUrl(collaborator, projectOwner)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{cursor: 'pointer', textDecoration: 'none', fontWeight: 'bold'}}"
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{getCollaboratorUrl(collaborator, projectOwner)}"
        }
      ],
      "line_start": 114,
      "line_end": 121,
      "text": "<Link\n              data-hovercard-type={collaborator.actor_type}\n              data-hovercard-url={getCollaboratorHovercardUrl(collaborator, projectOwner)}\n              sx={{cursor: 'pointer', textDecoration: 'none', fontWeight: 'bold'}}\n              href={getCollaboratorUrl(collaborator, projectOwner)}\n            >\n              {collaborator.name}\n            </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"collaborator-login\""
        }
      ],
      "line_start": 123,
      "line_end": 125,
      "text": "<Text sx={{color: 'fg.muted'}} data-test-id=\"collaborator-login\">\n              {displayValue}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onRemoveButtonClick(new Set([actorIdentifier(collaborator)]))}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps(`remove-collaborator-${displayValue}`)}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            color: 'fg.muted',\n            border: '1px solid',\n            borderColor: 'transparent',\n            boxShadow: 'none',\n            '&:hover:not([disabled]), &:focus:not([disabled])': {\n              color: 'btn.danger.text',\n              border: '1px solid',\n              borderColor: 'btn.border'\n            },\n            marginLeft: 2\n          }}"
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{Resources.removeTitle}"
        }
      ],
      "line_start": 132,
      "line_end": 151,
      "text": "<Button\n          variant=\"invisible\"\n          onClick={() => onRemoveButtonClick(new Set([actorIdentifier(collaborator)]))}\n          {...testIdProps(`remove-collaborator-${displayValue}`)}\n          sx={{\n            color: 'fg.muted',\n            border: '1px solid',\n            borderColor: 'transparent',\n            boxShadow: 'none',\n            '&:hover:not([disabled]), &:focus:not([disabled])': {\n              color: 'btn.danger.text',\n              border: '1px solid',\n              borderColor: 'btn.border'\n            },\n            marginLeft: 2\n          }}\n          aria-label={Resources.removeTitle}\n        >\n          {Resources.removeTitle}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-list-item.tsx",
      "name": "Box",
      "line_start": 157,
      "line_end": 157,
      "text": " styled(Box)`\n  animation: fadeOut 2s ease-out;\n\n  @keyframes fadeOut {\n    from {\n      background: ${themeGet('colors.neutral.subtle')};\n    }\n    to {\n      background: ${themeGet('colors.canvas.default')};\n    }\n  }\n`",
      "type": "CallExpression"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{boxHeaderStyles}"
        }
      ],
      "line_start": 138,
      "line_end": 186,
      "text": "<Box sx={boxHeaderStyles}>\n        <Box sx={{display: 'flex', alignItems: 'center', flex: '1 1 0'}}>\n          <Box sx={{mr: 2}}>\n            <input\n              type=\"checkbox\"\n              ref={checkboxRef}\n              onChange={_onCheckBoxChange}\n              {...testIdProps('collaborators-checkbox-bulk')}\n            />\n          </Box>\n          <Box>\n            <Text sx={{color: 'fg.muted'}} {...testIdProps('collaborators-table-counter')}>\n              {selectedCount > 0 ? `${selectedCount} selected` : collabString}\n            </Text>\n          </Box>\n        </Box>\n        <Box sx={{display: 'flex', alignItems: 'center'}}>\n          <div aria-live=\"polite\">{selectedCount > 1 && showError && renderError()}</div>\n\n          <Box {...testIdProps('collaborators-header-dropdown')}>\n            {selectedCount > 1 ? (\n              renderRoleBulkSetDropdown(\n                selectedRoles,\n                selectedCollaboratorIds,\n                _onDropDownItemClick,\n                _onDropDownButtonClick\n              )\n            ) : (\n              <Box sx={{display: 'flex'}}>\n                <CollaboratorsFilterTypeDropdown />\n                <CollaboratorsFilterRoleDropdown />\n              </Box>\n            )}\n          </Box>\n\n          {selectedCount > 1 && (\n            <Button\n              sx={{\n                ml: 2,\n                '&:hover:not([disabled]), &:focus:not([disabled])': {color: 'btn.danger.text'}\n              }}\n              onClick={() => _onRemoveButtonClick(selectedCollaboratorIds)}\n              {...testIdProps('collaborators-remove-bulk')}\n            >\n              {Resources.removeTitle}\n            </Button>\n          )}\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', flex: '1 1 0'}}"
        }
      ],
      "line_start": 139,
      "line_end": 153,
      "text": "<Box sx={{display: 'flex', alignItems: 'center', flex: '1 1 0'}}>\n          <Box sx={{mr: 2}}>\n            <input\n              type=\"checkbox\"\n              ref={checkboxRef}\n              onChange={_onCheckBoxChange}\n              {...testIdProps('collaborators-checkbox-bulk')}\n            />\n          </Box>\n          <Box>\n            <Text sx={{color: 'fg.muted'}} {...testIdProps('collaborators-table-counter')}>\n              {selectedCount > 0 ? `${selectedCount} selected` : collabString}\n            </Text>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2}}"
        }
      ],
      "line_start": 140,
      "line_end": 147,
      "text": "<Box sx={{mr: 2}}>\n            <input\n              type=\"checkbox\"\n              ref={checkboxRef}\n              onChange={_onCheckBoxChange}\n              {...testIdProps('collaborators-checkbox-bulk')}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [],
      "line_start": 148,
      "line_end": 152,
      "text": "<Box>\n            <Text sx={{color: 'fg.muted'}} {...testIdProps('collaborators-table-counter')}>\n              {selectedCount > 0 ? `${selectedCount} selected` : collabString}\n            </Text>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-table-counter')}"
        }
      ],
      "line_start": 149,
      "line_end": 151,
      "text": "<Text sx={{color: 'fg.muted'}} {...testIdProps('collaborators-table-counter')}>\n              {selectedCount > 0 ? `${selectedCount} selected` : collabString}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 154,
      "line_end": 185,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n          <div aria-live=\"polite\">{selectedCount > 1 && showError && renderError()}</div>\n\n          <Box {...testIdProps('collaborators-header-dropdown')}>\n            {selectedCount > 1 ? (\n              renderRoleBulkSetDropdown(\n                selectedRoles,\n                selectedCollaboratorIds,\n                _onDropDownItemClick,\n                _onDropDownButtonClick\n              )\n            ) : (\n              <Box sx={{display: 'flex'}}>\n                <CollaboratorsFilterTypeDropdown />\n                <CollaboratorsFilterRoleDropdown />\n              </Box>\n            )}\n          </Box>\n\n          {selectedCount > 1 && (\n            <Button\n              sx={{\n                ml: 2,\n                '&:hover:not([disabled]), &:focus:not([disabled])': {color: 'btn.danger.text'}\n              }}\n              onClick={() => _onRemoveButtonClick(selectedCollaboratorIds)}\n              {...testIdProps('collaborators-remove-bulk')}\n            >\n              {Resources.removeTitle}\n            </Button>\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-header-dropdown')}"
        }
      ],
      "line_start": 157,
      "line_end": 171,
      "text": "<Box {...testIdProps('collaborators-header-dropdown')}>\n            {selectedCount > 1 ? (\n              renderRoleBulkSetDropdown(\n                selectedRoles,\n                selectedCollaboratorIds,\n                _onDropDownItemClick,\n                _onDropDownButtonClick\n              )\n            ) : (\n              <Box sx={{display: 'flex'}}>\n                <CollaboratorsFilterTypeDropdown />\n                <CollaboratorsFilterRoleDropdown />\n              </Box>\n            )}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 166,
      "line_end": 169,
      "text": "\n              <Box sx={{display: 'flex'}}>\n                <CollaboratorsFilterTypeDropdown />\n                <CollaboratorsFilterRoleDropdown />\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Button",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                ml: 2,\n                '&:hover:not([disabled]), &:focus:not([disabled])': {color: 'btn.danger.text'}\n              }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => _onRemoveButtonClick(selectedCollaboratorIds)}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('collaborators-remove-bulk')}"
        }
      ],
      "line_start": 174,
      "line_end": 183,
      "text": "\n            <Button\n              sx={{\n                ml: 2,\n                '&:hover:not([disabled]), &:focus:not([disabled])': {color: 'btn.danger.text'}\n              }}\n              onClick={() => _onRemoveButtonClick(selectedCollaboratorIds)}\n              {...testIdProps('collaborators-remove-bulk')}\n            >\n              {Resources.removeTitle}\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 3}}"
        }
      ],
      "line_start": 187,
      "line_end": 189,
      "text": "<Box sx={{p: 3}}>\n        <CollaboratorsFilterInput />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"failure-message\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2}}"
        }
      ],
      "line_start": 196,
      "line_end": 199,
      "text": "\n    <Box data-test-id=\"failure-message\" sx={{mr: 2}}>\n      <StyledOcticon icon={StopIcon} sx={{mr: 1, color: 'danger.fg'}} />\n      <Text>Something went wrong</Text>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Text",
      "props": [],
      "line_start": 198,
      "line_end": 198,
      "text": "<Text>Something went wrong</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: '1 1 100%'}}"
        },
        {
          "name": "data-test-id",
          "kind": "StringLiteral",
          "text": "\"filter-collaborators\""
        }
      ],
      "line_start": 243,
      "line_end": 256,
      "text": "\n    <Box sx={{flex: '1 1 100%'}} data-test-id=\"filter-collaborators\">\n      <TextInput\n        placeholder={\n          projectOwner && projectOwner.type === 'organization'\n            ? ManageAccessResources.collaboratorFilterPlaceholderOrgProject\n            : ManageAccessResources.collaboratorFilterPlaceholderUserProject\n        }\n        value={localQuery}\n        contrast\n        onChange={onInputChange}\n        {...testIdProps('filter-collaborators-input')}\n        sx={{width: '100%'}}\n      />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{open => setIsOpen(open)}"
        }
      ],
      "line_start": 289,
      "line_end": 310,
      "text": "\n    <ActionMenu open={isOpen} onOpenChange={open => setIsOpen(open)}>\n      <ActionMenu.Button {...testIdProps('collaborators-header-type-filter-button')}>\n        <Text sx={{color: 'fg.muted'}}>Type</Text>\n      </ActionMenu.Button>\n      <ActionMenu.Overlay>\n        <ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-type-filter-menu')}\n        >\n          {types.map(type => (\n            <FilterDropdownItem\n              key={type}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={type}\n              filter={typeFilter}\n            />\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-header-type-filter-button')}"
        }
      ],
      "line_start": 290,
      "line_end": 292,
      "text": "<ActionMenu.Button {...testIdProps('collaborators-header-type-filter-button')}>\n        <Text sx={{color: 'fg.muted'}}>Type</Text>\n      </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 291,
      "line_end": 291,
      "text": "<Text sx={{color: 'fg.muted'}}>Type</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 293,
      "line_end": 309,
      "text": "<ActionMenu.Overlay>\n        <ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-type-filter-menu')}\n        >\n          {types.map(type => (\n            <FilterDropdownItem\n              key={type}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={type}\n              filter={typeFilter}\n            />\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{combinedRef}"
        },
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('collaborators-header-type-filter-menu')}"
        }
      ],
      "line_start": 294,
      "line_end": 308,
      "text": "<ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-type-filter-menu')}\n        >\n          {types.map(type => (\n            <FilterDropdownItem\n              key={type}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={type}\n              filter={typeFilter}\n            />\n          ))}\n        </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu",
      "props": [
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{isOpen}"
        },
        {
          "name": "onOpenChange",
          "kind": "JsxExpression",
          "text": "{open => setIsOpen(open)}"
        }
      ],
      "line_start": 343,
      "line_end": 364,
      "text": "\n    <ActionMenu open={isOpen} onOpenChange={open => setIsOpen(open)}>\n      <ActionMenu.Button {...testIdProps('collaborators-header-role-filter-button')} sx={{ml: 2}}>\n        <Text sx={{color: 'fg.muted'}}>Role</Text>\n      </ActionMenu.Button>\n      <ActionMenu.Overlay>\n        <ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-role-filter-menu')}\n        >\n          {roles.map(role => (\n            <FilterDropdownItem\n              key={role}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={role}\n              filter={roleFilter}\n            />\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>\n    </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('collaborators-header-role-filter-button')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 344,
      "line_end": 346,
      "text": "<ActionMenu.Button {...testIdProps('collaborators-header-role-filter-button')} sx={{ml: 2}}>\n        <Text sx={{color: 'fg.muted'}}>Role</Text>\n      </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 345,
      "line_end": 345,
      "text": "<Text sx={{color: 'fg.muted'}}>Role</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 347,
      "line_end": 363,
      "text": "<ActionMenu.Overlay>\n        <ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-role-filter-menu')}\n        >\n          {roles.map(role => (\n            <FilterDropdownItem\n              key={role}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={role}\n              filter={roleFilter}\n            />\n          ))}\n        </ActionList>\n      </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{combinedRef}"
        },
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('collaborators-header-role-filter-menu')}"
        }
      ],
      "line_start": 348,
      "line_end": 362,
      "text": "<ActionList\n          ref={combinedRef}\n          selectionVariant=\"single\"\n          {...testIdProps('collaborators-header-role-filter-menu')}\n        >\n          {roles.map(role => (\n            <FilterDropdownItem\n              key={role}\n              onClickHandler={onClickHandler}\n              onClose={() => setIsOpen(false)}\n              value={role}\n              filter={roleFilter}\n            />\n          ))}\n        </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table-header.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "tabIndex",
          "kind": "JsxExpression",
          "text": "{0}"
        },
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{value}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "onKeyDown",
          "kind": "JsxExpression",
          "text": "{e => {\n        if (e.key === 'Enter') {\n          onClick()\n          onClose()\n        }\n      }}"
        },
        {
          "name": "selected",
          "kind": "JsxExpression",
          "text": "{isSelected}"
        },
        {
          "name": "data-test-id",
          "kind": "JsxExpression",
          "text": "{`filter-${value.toLowerCase()}`}"
        }
      ],
      "line_start": 395,
      "line_end": 409,
      "text": "\n    <ActionList.Item\n      tabIndex={0}\n      key={value}\n      onClick={onClick}\n      onKeyDown={e => {\n        if (e.key === 'Enter') {\n          onClick()\n          onClose()\n        }\n      }}\n      selected={isSelected}\n      data-test-id={`filter-${value.toLowerCase()}`}\n    >\n      {value}\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h4\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 2, fontSize: 4, fontWeight: 'normal'}}"
        }
      ],
      "line_start": 160,
      "line_end": 162,
      "text": "<Heading as=\"h4\" sx={{mb: 2, fontSize: 4, fontWeight: 'normal'}}>\n          Manage access\n        </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('collaborators-table')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{borderRadius: 2, border: '1px solid', borderColor: 'border.subtle', bg: 'canvas.default'}}"
        },
        {
          "name": "data-team-hovercards-enabled"
        }
      ],
      "line_start": 163,
      "line_end": 198,
      "text": "<Box\n          {...testIdProps('collaborators-table')}\n          sx={{borderRadius: 2, border: '1px solid', borderColor: 'border.subtle', bg: 'canvas.default'}}\n          data-team-hovercards-enabled\n        >\n          <CollaboratorsTableHeader\n            userCount={userCount}\n            teamCount={teamCount}\n            selectedCollaboratorIds={selectedCollaboratorIds}\n            showError={headerActionRequestState === CommitState.Failed}\n            onCheckBoxChange={onBulkCheckboxChange}\n            onDropDownItemClick={onRoleDropDownItemClick}\n            onRemoveButtonClick={onRemoveButtonClick}\n            onDropDownButtonClick={onHeaderDropDownButtonClick}\n          />\n          {isLoading ? (\n            <Box sx={{justifyContent: 'center', my: 4, display: 'flex'}}>\n              <Box sx={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n                <Box sx={{mb: 2}}>\n                  <Spinner size=\"medium\" />\n                </Box>\n                <span>Loading collaborators...</span>\n              </Box>\n            </Box>\n          ) : hasError ? (\n            renderBlankslate(CollaboratorsTableBlankslate.Error)\n          ) : rows.length === 0 ? (\n            query.length > 0 ? (\n              renderBlankslate(CollaboratorsTableBlankslate.Filtering)\n            ) : (\n              renderBlankslate(CollaboratorsTableBlankslate.NoCollaborators)\n            )\n          ) : (\n            rows\n          )}\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{justifyContent: 'center', my: 4, display: 'flex'}}"
        }
      ],
      "line_start": 179,
      "line_end": 186,
      "text": "\n            <Box sx={{justifyContent: 'center', my: 4, display: 'flex'}}>\n              <Box sx={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n                <Box sx={{mb: 2}}>\n                  <Spinner size=\"medium\" />\n                </Box>\n                <span>Loading collaborators...</span>\n              </Box>\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center', flexDirection: 'column'}}"
        }
      ],
      "line_start": 180,
      "line_end": 185,
      "text": "<Box sx={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n                <Box sx={{mb: 2}}>\n                  <Spinner size=\"medium\" />\n                </Box>\n                <span>Loading collaborators...</span>\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 2}}"
        }
      ],
      "line_start": 181,
      "line_end": 183,
      "text": "<Box sx={{mb: 2}}>\n                  <Spinner size=\"medium\" />\n                </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/collaborators-table.tsx",
      "name": "Box",
      "props": [
        {
          "name": "className",
          "kind": "StringLiteral",
          "text": "\"blankslate\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`collaborators-table-blankslate-${blankslate}`)}"
        }
      ],
      "line_start": 228,
      "line_end": 231,
      "text": "\n    <Box className=\"blankslate\" {...testIdProps(`collaborators-table-blankslate-${blankslate}`)}>\n      <h3 {...testIdProps('collaborators-table-empty-title')}>{object.title}</h3>\n      <p {...testIdProps('collaborators-table-empty-message')}>{object.message}</p>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 47,
      "line_end": 47,
      "text": " <Text sx={{color: 'fg.muted'}}>{ManageAccessResources.privacySettingsAdmin}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 50,
      "line_end": 56,
      "text": "\n        <Text sx={{color: 'fg.muted'}}>\n          Everyone in the organization can see and edit this project.\n          <Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mx: 1}}>\n            Owners\n          </Link>\n          are admins of this project.\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{`https://github.com/orgs/${owner}/people?query=role%3Aowner`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mx: 1}}"
        }
      ],
      "line_start": 52,
      "line_end": 54,
      "text": "<Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mx: 1}}>\n            Owners\n          </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 60,
      "line_end": 66,
      "text": "\n        <Text sx={{color: 'fg.muted'}}>\n          Everyone in the organization can see this project.\n          <Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mx: 1}}>\n            Owners\n          </Link>\n          are admins of this project.\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{`https://github.com/orgs/${owner}/people?query=role%3Aowner`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mx: 1}}"
        }
      ],
      "line_start": 62,
      "line_end": 64,
      "text": "<Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mx: 1}}>\n            Owners\n          </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 70,
      "line_end": 76,
      "text": "\n        <Text sx={{color: 'fg.muted'}}>\n          Only those with direct access and{' '}\n          <Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mr: 1}}>\n            owners\n          </Link>\n          can see this project. Owners are also admins of this project.\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Link",
      "props": [
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{`https://github.com/orgs/${owner}/people?query=role%3Aowner`}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 1}}"
        }
      ],
      "line_start": 72,
      "line_end": 74,
      "text": "<Link href={`https://github.com/orgs/${owner}/people?query=role%3Aowner`} sx={{mr: 1}}>\n            owners\n          </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('initial-org-access-request-failure-message')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 104,
      "line_end": 110,
      "text": "\n        <Box {...testIdProps('initial-org-access-request-failure-message')} sx={{ml: 2}}>\n          <StyledOcticon icon={StopIcon} sx={{mr: 1, color: 'danger.fg'}} />\n          <Text>Something went wrong.</Text>{' '}\n          <Link as=\"button\" onClick={() => loadOrganizationAccess()}>\n            Try again\n          </Link>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [],
      "line_start": 106,
      "line_end": 106,
      "text": "<Text>Something went wrong.</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Link",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => loadOrganizationAccess()}"
        }
      ],
      "line_start": 107,
      "line_end": 109,
      "text": "<Link as=\"button\" onClick={() => loadOrganizationAccess()}>\n            Try again\n          </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('update-org-access-request-failure-message')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 114,
      "line_end": 117,
      "text": "\n        <Box {...testIdProps('update-org-access-request-failure-message')} sx={{ml: 2}}>\n          <StyledOcticon icon={StopIcon} sx={{mr: 1, color: 'danger.fg'}} />\n          <Text>Something went wrong</Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [],
      "line_start": 116,
      "line_end": 116,
      "text": "<Text>Something went wrong</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('org-access-request-success-message')}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 2}}"
        }
      ],
      "line_start": 121,
      "line_end": 124,
      "text": "\n        <Box {...testIdProps('org-access-request-success-message')} sx={{ml: 2}}>\n          <StyledOcticon icon={CheckIcon} sx={{mr: 1, color: 'success.fg'}} />\n          <Text>Changes saved</Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [],
      "line_start": 123,
      "line_end": 123,
      "text": "<Text>Changes saved</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', flexWrap: 'wrap'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('privacy-settings')}"
        }
      ],
      "line_start": 130,
      "line_end": 200,
      "text": "\n    <Box sx={{display: 'flex', flexWrap: 'wrap'}} {...testIdProps('privacy-settings')}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          backgroundColor: 'canvas.subtle',\n          borderRadius: 2,\n          flex: 1,\n          p: 3,\n          mr: isOrganization ? 2 : 0\n        }}\n        {...testIdProps('privacy-settings-manage-visibility')}\n      >\n        <Box sx={{mb: 3}}>\n          <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n            <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n              {isPublicProject ? 'Public project' : 'Private project'}\n            </Heading>\n            <StyledOcticon icon={isPublicProject ? GlobeIcon : LockIcon} sx={{color: 'fg.muted'}} />\n          </Box>\n          <Text sx={{color: 'fg.muted'}}>\n            {isPublicProject\n              ? 'This project is public and visible to anyone.'\n              : 'Only those with access to this project can view it.'}\n          </Text>\n        </Box>\n        <Box>\n          <Button onClick={manageAccessClick} {...testIdProps('privacy-settings-manage-access-link')}>\n            Manage\n          </Button>\n        </Box>\n      </Box>\n\n      {isOrganization && (\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n            backgroundColor: 'canvas.subtle',\n            borderRadius: 2,\n            flex: 1,\n            padding: 3\n          }}\n          {...testIdProps('privacy-settings-organization-access')}\n        >\n          <Box sx={{mb: 3}}>\n            <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n              <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n                Base role\n              </Heading>\n              <StyledOcticon icon={OrganizationIcon} sx={{color: 'fg.muted'}} />\n            </Box>\n            {selectedRoleText()}\n          </Box>\n          <Box sx={{display: 'flex', alignItems: 'center'}}>\n            {initialOrgAccessRequestState === CommitState.Failed ? (\n              <Button disabled trailingIcon={DropdownCaret}>\n                {toTitleCase(organizationAccessRole)}\n              </Button>\n            ) : (\n              renderOrgAccessDropDown()\n            )}\n            <div aria-live=\"polite\" {...testIdProps('org-access-update-status')}>\n              {renderStatus()}\n            </div>\n          </Box>\n        </Box>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          backgroundColor: 'canvas.subtle',\n          borderRadius: 2,\n          flex: 1,\n          p: 3,\n          mr: isOrganization ? 2 : 0\n        }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('privacy-settings-manage-visibility')}"
        }
      ],
      "line_start": 131,
      "line_end": 162,
      "text": "<Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          backgroundColor: 'canvas.subtle',\n          borderRadius: 2,\n          flex: 1,\n          p: 3,\n          mr: isOrganization ? 2 : 0\n        }}\n        {...testIdProps('privacy-settings-manage-visibility')}\n      >\n        <Box sx={{mb: 3}}>\n          <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n            <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n              {isPublicProject ? 'Public project' : 'Private project'}\n            </Heading>\n            <StyledOcticon icon={isPublicProject ? GlobeIcon : LockIcon} sx={{color: 'fg.muted'}} />\n          </Box>\n          <Text sx={{color: 'fg.muted'}}>\n            {isPublicProject\n              ? 'This project is public and visible to anyone.'\n              : 'Only those with access to this project can view it.'}\n          </Text>\n        </Box>\n        <Box>\n          <Button onClick={manageAccessClick} {...testIdProps('privacy-settings-manage-access-link')}>\n            Manage\n          </Button>\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 3}}"
        }
      ],
      "line_start": 144,
      "line_end": 156,
      "text": "<Box sx={{mb: 3}}>\n          <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n            <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n              {isPublicProject ? 'Public project' : 'Private project'}\n            </Heading>\n            <StyledOcticon icon={isPublicProject ? GlobeIcon : LockIcon} sx={{color: 'fg.muted'}} />\n          </Box>\n          <Text sx={{color: 'fg.muted'}}>\n            {isPublicProject\n              ? 'This project is public and visible to anyone.'\n              : 'Only those with access to this project can view it.'}\n          </Text>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 145,
      "line_end": 150,
      "text": "<Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n            <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n              {isPublicProject ? 'Public project' : 'Private project'}\n            </Heading>\n            <StyledOcticon icon={isPublicProject ? GlobeIcon : LockIcon} sx={{color: 'fg.muted'}} />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2, fontSize: 2, fontWeight: 'semibold'}}"
        }
      ],
      "line_start": 146,
      "line_end": 148,
      "text": "<Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n              {isPublicProject ? 'Public project' : 'Private project'}\n            </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.muted'}}"
        }
      ],
      "line_start": 151,
      "line_end": 155,
      "text": "<Text sx={{color: 'fg.muted'}}>\n            {isPublicProject\n              ? 'This project is public and visible to anyone.'\n              : 'Only those with access to this project can view it.'}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [],
      "line_start": 157,
      "line_end": 161,
      "text": "<Box>\n          <Button onClick={manageAccessClick} {...testIdProps('privacy-settings-manage-access-link')}>\n            Manage\n          </Button>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Button",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{manageAccessClick}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('privacy-settings-manage-access-link')}"
        }
      ],
      "line_start": 158,
      "line_end": 160,
      "text": "<Button onClick={manageAccessClick} {...testIdProps('privacy-settings-manage-access-link')}>\n            Manage\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n            backgroundColor: 'canvas.subtle',\n            borderRadius: 2,\n            flex: 1,\n            padding: 3\n          }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('privacy-settings-organization-access')}"
        }
      ],
      "line_start": 165,
      "line_end": 198,
      "text": "\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n            backgroundColor: 'canvas.subtle',\n            borderRadius: 2,\n            flex: 1,\n            padding: 3\n          }}\n          {...testIdProps('privacy-settings-organization-access')}\n        >\n          <Box sx={{mb: 3}}>\n            <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n              <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n                Base role\n              </Heading>\n              <StyledOcticon icon={OrganizationIcon} sx={{color: 'fg.muted'}} />\n            </Box>\n            {selectedRoleText()}\n          </Box>\n          <Box sx={{display: 'flex', alignItems: 'center'}}>\n            {initialOrgAccessRequestState === CommitState.Failed ? (\n              <Button disabled trailingIcon={DropdownCaret}>\n                {toTitleCase(organizationAccessRole)}\n              </Button>\n            ) : (\n              renderOrgAccessDropDown()\n            )}\n            <div aria-live=\"polite\" {...testIdProps('org-access-update-status')}>\n              {renderStatus()}\n            </div>\n          </Box>\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 3}}"
        }
      ],
      "line_start": 177,
      "line_end": 185,
      "text": "<Box sx={{mb: 3}}>\n            <Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n              <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n                Base role\n              </Heading>\n              <StyledOcticon icon={OrganizationIcon} sx={{color: 'fg.muted'}} />\n            </Box>\n            {selectedRoleText()}\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 178,
      "line_end": 183,
      "text": "<Box sx={{mb: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between'}}>\n              <Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n                Base role\n              </Heading>\n              <StyledOcticon icon={OrganizationIcon} sx={{color: 'fg.muted'}} />\n            </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Heading",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"h2\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2, fontSize: 2, fontWeight: 'semibold'}}"
        }
      ],
      "line_start": 179,
      "line_end": 181,
      "text": "<Heading as=\"h2\" sx={{mr: 2, fontSize: 2, fontWeight: 'semibold'}}>\n                Base role\n              </Heading>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        }
      ],
      "line_start": 186,
      "line_end": 197,
      "text": "<Box sx={{display: 'flex', alignItems: 'center'}}>\n            {initialOrgAccessRequestState === CommitState.Failed ? (\n              <Button disabled trailingIcon={DropdownCaret}>\n                {toTitleCase(organizationAccessRole)}\n              </Button>\n            ) : (\n              renderOrgAccessDropDown()\n            )}\n            <div aria-live=\"polite\" {...testIdProps('org-access-update-status')}>\n              {renderStatus()}\n            </div>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/access-settings/privacy-settings.tsx",
      "name": "Button",
      "props": [
        {
          "name": "disabled"
        },
        {
          "name": "trailingIcon",
          "kind": "JsxExpression",
          "text": "{DropdownCaret}"
        }
      ],
      "line_start": 188,
      "line_end": 190,
      "text": "\n              <Button disabled trailingIcon={DropdownCaret}>\n                {toTitleCase(organizationAccessRole)}\n              </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/add-break-button.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        p: 2,\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        transform: 'translateY(-50%)',\n        display: 'flex',\n        alignItems: 'center',\n        zIndex: 1,\n        justifyContent: 'flex-end',\n        pr: '20%',\n        // Hide the button if the user is not hovering over this element or the button container\n        '&:not(:hover):not(:focus-within) > :not(:hover)': {\n          opacity: 0\n        }\n      }}"
        }
      ],
      "line_start": 15,
      "line_end": 51,
      "text": "\n    <Box\n      sx={{\n        p: 2,\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        transform: 'translateY(-50%)',\n        display: 'flex',\n        alignItems: 'center',\n        zIndex: 1,\n        justifyContent: 'flex-end',\n        pr: '20%',\n        // Hide the button if the user is not hovering over this element or the button container\n        '&:not(:hover):not(:focus-within) > :not(:hover)': {\n          opacity: 0\n        }\n      }}\n    >\n      <Box sx={{p: 3, position: 'absolute'}}>\n        <Label\n          sx={{\n            color: 'fg.muted',\n            backgroundColor: 'canvas.default',\n            cursor: 'pointer',\n            ':hover': {\n              color: 'accent.fg'\n            }\n          }}\n          onClick={onClick}\n          as=\"button\"\n          type=\"button\"\n          {...testIdProps('add-break-button')}\n        >\n          Insert break\n        </Label>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/add-break-button.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 3, position: 'absolute'}}"
        }
      ],
      "line_start": 33,
      "line_end": 50,
      "text": "<Box sx={{p: 3, position: 'absolute'}}>\n        <Label\n          sx={{\n            color: 'fg.muted',\n            backgroundColor: 'canvas.default',\n            cursor: 'pointer',\n            ':hover': {\n              color: 'accent.fg'\n            }\n          }}\n          onClick={onClick}\n          as=\"button\"\n          type=\"button\"\n          {...testIdProps('add-break-button')}\n        >\n          Insert break\n        </Label>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/add-break-button.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            color: 'fg.muted',\n            backgroundColor: 'canvas.default',\n            cursor: 'pointer',\n            ':hover': {\n              color: 'accent.fg'\n            }\n          }}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('add-break-button')}"
        }
      ],
      "line_start": 34,
      "line_end": 49,
      "text": "<Label\n          sx={{\n            color: 'fg.muted',\n            backgroundColor: 'canvas.default',\n            cursor: 'pointer',\n            ':hover': {\n              color: 'accent.fg'\n            }\n          }}\n          onClick={onClick}\n          as=\"button\"\n          type=\"button\"\n          {...testIdProps('add-break-button')}\n        >\n          Insert break\n        </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2, ...(sx ?? {})}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...(testId ? testIdProps(testId) : {})}"
        }
      ],
      "line_start": 26,
      "line_end": 56,
      "text": "\n    <Text sx={{mr: 2, ...(sx ?? {})}} {...(testId ? testIdProps(testId) : {})}>\n      {originalValue === updatedValue ? (\n        <Text>{renderUpdatedValue(updatedValue)}</Text>\n      ) : (\n        <>\n          {originalValue && (\n            <>\n              <Text\n                as=\"del\"\n                sx={{color: 'fg.subtle', textDecoration: 'line-through'}}\n                {...testIdProps('original-value')}\n              >\n                {renderOriginalValue(originalValue)}\n              </Text>\n            </>\n          )}\n          {originalValue && updatedValue && <Text sx={{mr: 2}}> </Text>}\n          {updatedValue && (\n            <Text\n              as=\"ins\"\n              sx={{\n                textDecoration: 'none'\n              }}\n              {...testIdProps('updated-value')}\n            >\n              {renderUpdatedValue(updatedValue)}\n            </Text>\n          )}\n        </>\n      )}\n    </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "name": "Text",
      "props": [],
      "line_start": 28,
      "line_end": 28,
      "text": "\n        <Text>{renderUpdatedValue(updatedValue)}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"del\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.subtle', textDecoration: 'line-through'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n                {...testIdProps('original-value')}"
        }
      ],
      "line_start": 33,
      "line_end": 39,
      "text": "<Text\n                as=\"del\"\n                sx={{color: 'fg.subtle', textDecoration: 'line-through'}}\n                {...testIdProps('original-value')}\n              >\n                {renderOriginalValue(originalValue)}\n              </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mr: 2}}"
        }
      ],
      "line_start": 42,
      "line_end": 42,
      "text": " <Text sx={{mr: 2}}> </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-diff-value.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"ins\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n                textDecoration: 'none'\n              }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('updated-value')}"
        }
      ],
      "line_start": 44,
      "line_end": 52,
      "text": "\n            <Text\n              as=\"ins\"\n              sx={{\n                textDecoration: 'none'\n              }}\n              {...testIdProps('updated-value')}\n            >\n              {renderUpdatedValue(updatedValue)}\n            </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexGrow: 1, alignItems: 'center', display: inline ? 'inline-flex' : 'flex'}}"
        },
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"group\""
        },
        {
          "name": "aria-label",
          "kind": "JsxExpression",
          "text": "{inline ? Resources.iterationDurationLabel : undefined}"
        },
        {
          "name": "aria-labelledby",
          "kind": "JsxExpression",
          "text": "{inline ? undefined : groupLabelId}"
        }
      ],
      "line_start": 118,
      "line_end": 198,
      "text": "\n    <Box\n      sx={{flexGrow: 1, alignItems: 'center', display: inline ? 'inline-flex' : 'flex'}}\n      role=\"group\"\n      aria-label={inline ? Resources.iterationDurationLabel : undefined}\n      aria-labelledby={inline ? undefined : groupLabelId}\n    >\n      {!inline && (\n        <Text sx={{fontWeight: '400', mr: 2}}>\n          <span id={groupLabelId}>{Resources.iterationDurationLabel}</span>:\n        </Text>\n      )}\n\n      <Box sx={{position: 'relative'}}>\n        <TextInput\n          type=\"number\"\n          min={MIN_QTY}\n          max={MAX_QTY}\n          step={1}\n          required\n          value={Number.isNaN(value.quantity) ? '' : value.quantity}\n          onChange={onQtyChange}\n          onKeyDown={ignoreNonDigitNumberChars}\n          aria-invalid={!qtyValidity.isValid}\n          aria-describedby={qtyValidity.message && qtyValidationMessageId}\n          aria-label=\"Duration quantity\"\n          sx={{\n            '&.error': {\n              borderColor: 'danger.emphasis',\n              boxShadow: 'none'\n            },\n            mr: 2,\n            '& > input': {\n              textAlign: 'center',\n              pr: 0.5,\n              pl: 0.5,\n              width: '5ch'\n            }\n          }}\n          className={qtyValidity.isValid ? '' : 'error'}\n          {...testIdProps('duration-quantity-input')}\n        />\n\n        <ValidationErrorPopover\n          message={qtyValidity.message}\n          id={qtyValidationMessageId}\n          testId=\"duration-quantity-validation-message\"\n        />\n      </Box>\n\n      <ActionMenu>\n        <ActionMenu.Button\n          sx={{\n            flex: 1,\n            gridTemplateColumns: 'min-content 1fr min-content',\n            '[data-component=text]': {textAlign: 'left'},\n            ...(inline ? HiddenButtonStyle : {})\n          }}\n          aria-label=\"Units\"\n          {...testIdProps('duration-units-button')}\n        >\n          <Text\n            sx={inline ? {color: 'fg.muted', fontWeight: 400} : {flex: 1, textAlign: 'left'}}\n            {...testIdProps('duration-units-value')}\n          >\n            {value.units}\n          </Text>\n        </ActionMenu.Button>\n        <ActionMenu.Overlay>\n          <ActionList selectionVariant=\"single\">\n            {unitItems.map((unitItem, index) => (\n              <ActionList.Item\n                {...unitItem}\n                key={unitItem.key}\n                selected={unitItem.key === value.units}\n                onSelect={() => onUnitsChange(unitItem)}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: '400', mr: 2}}"
        }
      ],
      "line_start": 125,
      "line_end": 127,
      "text": "\n        <Text sx={{fontWeight: '400', mr: 2}}>\n          <span id={groupLabelId}>{Resources.iterationDurationLabel}</span>:\n        </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{position: 'relative'}}"
        }
      ],
      "line_start": 130,
      "line_end": 165,
      "text": "<Box sx={{position: 'relative'}}>\n        <TextInput\n          type=\"number\"\n          min={MIN_QTY}\n          max={MAX_QTY}\n          step={1}\n          required\n          value={Number.isNaN(value.quantity) ? '' : value.quantity}\n          onChange={onQtyChange}\n          onKeyDown={ignoreNonDigitNumberChars}\n          aria-invalid={!qtyValidity.isValid}\n          aria-describedby={qtyValidity.message && qtyValidationMessageId}\n          aria-label=\"Duration quantity\"\n          sx={{\n            '&.error': {\n              borderColor: 'danger.emphasis',\n              boxShadow: 'none'\n            },\n            mr: 2,\n            '& > input': {\n              textAlign: 'center',\n              pr: 0.5,\n              pl: 0.5,\n              width: '5ch'\n            }\n          }}\n          className={qtyValidity.isValid ? '' : 'error'}\n          {...testIdProps('duration-quantity-input')}\n        />\n\n        <ValidationErrorPopover\n          message={qtyValidity.message}\n          id={qtyValidationMessageId}\n          testId=\"duration-quantity-validation-message\"\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "ActionMenu",
      "props": [],
      "line_start": 167,
      "line_end": 197,
      "text": "<ActionMenu>\n        <ActionMenu.Button\n          sx={{\n            flex: 1,\n            gridTemplateColumns: 'min-content 1fr min-content',\n            '[data-component=text]': {textAlign: 'left'},\n            ...(inline ? HiddenButtonStyle : {})\n          }}\n          aria-label=\"Units\"\n          {...testIdProps('duration-units-button')}\n        >\n          <Text\n            sx={inline ? {color: 'fg.muted', fontWeight: 400} : {flex: 1, textAlign: 'left'}}\n            {...testIdProps('duration-units-value')}\n          >\n            {value.units}\n          </Text>\n        </ActionMenu.Button>\n        <ActionMenu.Overlay>\n          <ActionList selectionVariant=\"single\">\n            {unitItems.map((unitItem, index) => (\n              <ActionList.Item\n                {...unitItem}\n                key={unitItem.key}\n                selected={unitItem.key === value.units}\n                onSelect={() => onUnitsChange(unitItem)}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>\n      </ActionMenu>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "ActionMenu.Button",
      "parent": "ActionMenu",
      "child": "Button",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            flex: 1,\n            gridTemplateColumns: 'min-content 1fr min-content',\n            '[data-component=text]': {textAlign: 'left'},\n            ...(inline ? HiddenButtonStyle : {})\n          }}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Units\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('duration-units-button')}"
        }
      ],
      "line_start": 168,
      "line_end": 184,
      "text": "<ActionMenu.Button\n          sx={{\n            flex: 1,\n            gridTemplateColumns: 'min-content 1fr min-content',\n            '[data-component=text]': {textAlign: 'left'},\n            ...(inline ? HiddenButtonStyle : {})\n          }}\n          aria-label=\"Units\"\n          {...testIdProps('duration-units-button')}\n        >\n          <Text\n            sx={inline ? {color: 'fg.muted', fontWeight: 400} : {flex: 1, textAlign: 'left'}}\n            {...testIdProps('duration-units-value')}\n          >\n            {value.units}\n          </Text>\n        </ActionMenu.Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{inline ? {color: 'fg.muted', fontWeight: 400} : {flex: 1, textAlign: 'left'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('duration-units-value')}"
        }
      ],
      "line_start": 178,
      "line_end": 183,
      "text": "<Text\n            sx={inline ? {color: 'fg.muted', fontWeight: 400} : {flex: 1, textAlign: 'left'}}\n            {...testIdProps('duration-units-value')}\n          >\n            {value.units}\n          </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "ActionMenu.Overlay",
      "parent": "ActionMenu",
      "child": "Overlay",
      "props": [],
      "line_start": 185,
      "line_end": 196,
      "text": "<ActionMenu.Overlay>\n          <ActionList selectionVariant=\"single\">\n            {unitItems.map((unitItem, index) => (\n              <ActionList.Item\n                {...unitItem}\n                key={unitItem.key}\n                selected={unitItem.key === value.units}\n                onSelect={() => onUnitsChange(unitItem)}\n              />\n            ))}\n          </ActionList>\n        </ActionMenu.Overlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-duration-input.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "selectionVariant",
          "kind": "StringLiteral",
          "text": "\"single\""
        }
      ],
      "line_start": 186,
      "line_end": 195,
      "text": "<ActionList selectionVariant=\"single\">\n            {unitItems.map((unitItem, index) => (\n              <ActionList.Item\n                {...unitItem}\n                key={unitItem.key}\n                selected={unitItem.key === value.units}\n                onSelect={() => onUnitsChange(unitItem)}\n              />\n            ))}\n          </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...SelectedStyle, ...sx}}"
        }
      ],
      "line_start": 34,
      "line_end": 34,
      "text": " <Label sx={{...SelectedStyle, ...sx}}>{Resources.iterationLabel.current}</Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        mr: 3,\n        width: '5.5rem',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        gap: 1,\n        ...(sx ?? {})\n      }}"
        }
      ],
      "line_start": 47,
      "line_end": 61,
      "text": "\n    <Box\n      sx={{\n        mr: 3,\n        width: '5.5rem',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        gap: 1,\n        ...(sx ?? {})\n      }}\n    >\n      <Label sx={{mt: 0.75, textDecoration: 'inherit', ...style}} as=\"span\">\n        {text}\n      </Label>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-label.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 0.75, textDecoration: 'inherit', ...style}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"span\""
        }
      ],
      "line_start": 58,
      "line_end": 60,
      "text": "<Label sx={{mt: 0.75, textDecoration: 'inherit', ...style}} as=\"span\">\n        {text}\n      </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Box",
      "props": [
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => ref.current?.focus()}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        px: 1,\n        ml: -1,\n        display: 'inline-block',\n        borderRadius: '2',\n        cursor: 'text',\n        '&:focus-within': {\n          boxShadow: 'primer.shadow.focus'\n        },\n        '&:hover:not(:focus-within)': {\n          boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`\n        }\n      }}"
        }
      ],
      "line_start": 98,
      "line_end": 127,
      "text": "\n    <Box\n      onClick={() => ref.current?.focus()}\n      sx={{\n        px: 1,\n        ml: -1,\n        display: 'inline-block',\n        borderRadius: '2',\n        cursor: 'text',\n        '&:focus-within': {\n          boxShadow: 'primer.shadow.focus'\n        },\n        '&:hover:not(:focus-within)': {\n          boxShadow: theme => `0 0 0 3px ${theme.colors.border.default}`\n        }\n      }}\n    >\n      <EmojiPicker>\n        <AutosizeTextInput\n          as={BorderlessTextInput}\n          autoComplete=\"off\"\n          value={inputValue}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\n          onBlur={apply}\n          aria-label=\"Edit iteration name\"\n          ref={ref}\n          {...titleInputComposingProps}\n          {...testIdProps('iteration-title')}\n        />\n      </EmojiPicker>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Link",
      "props": [
        {
          "name": "muted"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...p}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'inherit'}}"
        },
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"button\""
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"Edit date range\""
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('iteration-or-break-dates')}"
        }
      ],
      "line_start": 154,
      "line_end": 163,
      "text": "\n        <Link\n          muted\n          {...p}\n          sx={{color: 'inherit'}}\n          as=\"button\"\n          aria-label=\"Edit date range\"\n          {...testIdProps('iteration-or-break-dates')}\n        >\n          {intervalDatesDescription(value)}\n        </Link>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Box",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"row\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        ...BaseIterationRowStyle,\n        backgroundColor: (theme: FixMeTheme) =>\n          labelType === 'break' ? theme.colors.canvas.subtle : theme.colors.canvas.default,\n        boxShadow: (theme: FixMeTheme) => (isDirty ? `2px 0 0 ${theme.colors.accent.fg} inset` : undefined)\n      }}"
        }
      ],
      "line_start": 215,
      "line_end": 262,
      "text": "\n    <Box\n      role=\"row\"\n      sx={{\n        ...BaseIterationRowStyle,\n        backgroundColor: (theme: FixMeTheme) =>\n          labelType === 'break' ? theme.colors.canvas.subtle : theme.colors.canvas.default,\n        boxShadow: (theme: FixMeTheme) => (isDirty ? `2px 0 0 ${theme.colors.accent.fg} inset` : undefined)\n      }}\n    >\n      <IterationRowLabel labelType={labelType} sx={{pt: localTitle ? '2px' : undefined}} />\n\n      <Box sx={{flexDirection: 'column', display: 'flex', alignItems: 'flex-start', gap: 1}}>\n        {(localTitle || originalTitle) && (\n          <Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n            <DiffValue\n              sx={{fontWeight: 600, fontSize: 2}}\n              originalValue={originalTitle}\n              updatedValue={localTitle}\n              testId=\"iteration-title-diff\"\n              renderUpdatedValue={_ => <TitleInput value={localTitle} onChange={onTitleChange} />}\n            />\n          </Box>\n        )}\n\n        <Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n          <DiffValue\n            originalValue={intervalDatesDescription(originalInterval)}\n            updatedValue={intervalDatesDescription(localInterval)}\n            testId=\"iteration-dates-diff\"\n            renderOriginalValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(originalInterval)}</Text>\n                &nbsp;&nbsp;\n                <Text>{intervalDatesDescription(originalInterval)}</Text>\n              </>\n            )}\n            renderUpdatedValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(localInterval)}</Text>&nbsp;&nbsp;\n                <IntervalDatePicker value={localInterval} onChange={onIntervalChange} minDate={minAllowedDate} />\n              </>\n            )}\n          />\n        </Box>\n      </Box>\n\n      <DeleteButton onClick={onRemove} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'column', display: 'flex', alignItems: 'flex-start', gap: 1}}"
        }
      ],
      "line_start": 226,
      "line_end": 259,
      "text": "<Box sx={{flexDirection: 'column', display: 'flex', alignItems: 'flex-start', gap: 1}}>\n        {(localTitle || originalTitle) && (\n          <Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n            <DiffValue\n              sx={{fontWeight: 600, fontSize: 2}}\n              originalValue={originalTitle}\n              updatedValue={localTitle}\n              testId=\"iteration-title-diff\"\n              renderUpdatedValue={_ => <TitleInput value={localTitle} onChange={onTitleChange} />}\n            />\n          </Box>\n        )}\n\n        <Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n          <DiffValue\n            originalValue={intervalDatesDescription(originalInterval)}\n            updatedValue={intervalDatesDescription(localInterval)}\n            testId=\"iteration-dates-diff\"\n            renderOriginalValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(originalInterval)}</Text>\n                &nbsp;&nbsp;\n                <Text>{intervalDatesDescription(originalInterval)}</Text>\n              </>\n            )}\n            renderUpdatedValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(localInterval)}</Text>&nbsp;&nbsp;\n                <IntervalDatePicker value={localInterval} onChange={onIntervalChange} minDate={minAllowedDate} />\n              </>\n            )}\n          />\n        </Box>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 228,
      "line_end": 236,
      "text": "\n          <Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n            <DiffValue\n              sx={{fontWeight: 600, fontSize: 2}}\n              originalValue={originalTitle}\n              updatedValue={localTitle}\n              testId=\"iteration-title-diff\"\n              renderUpdatedValue={_ => <TitleInput value={localTitle} onChange={onTitleChange} />}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}"
        }
      ],
      "line_start": 239,
      "line_end": 258,
      "text": "<Box sx={{flexDirection: 'row', display: 'flex', justifyContent: 'space-between'}}>\n          <DiffValue\n            originalValue={intervalDatesDescription(originalInterval)}\n            updatedValue={intervalDatesDescription(localInterval)}\n            testId=\"iteration-dates-diff\"\n            renderOriginalValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(originalInterval)}</Text>\n                &nbsp;&nbsp;\n                <Text>{intervalDatesDescription(originalInterval)}</Text>\n              </>\n            )}\n            renderUpdatedValue={() => (\n              <>\n                <Text sx={{fontWeight: 600}}>{intervalDurationDescription(localInterval)}</Text>&nbsp;&nbsp;\n                <IntervalDatePicker value={localInterval} onChange={onIntervalChange} minDate={minAllowedDate} />\n              </>\n            )}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 600}}"
        }
      ],
      "line_start": 246,
      "line_end": 246,
      "text": "<Text sx={{fontWeight: 600}}>{intervalDurationDescription(originalInterval)}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Text",
      "props": [],
      "line_start": 248,
      "line_end": 248,
      "text": "<Text>{intervalDatesDescription(originalInterval)}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iteration-row-skeleton.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 600}}"
        }
      ],
      "line_start": 253,
      "line_end": 253,
      "text": "<Text sx={{fontWeight: 600}}>{intervalDurationDescription(localInterval)}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "role",
          "kind": "StringLiteral",
          "text": "\"tablist\""
        },
        {
          "name": "aria-disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        ...BaseIterationRowStyle,\n        bg: 'canvas.subtle',\n        p: 0,\n        alignItems: 'center'\n      }}"
        }
      ],
      "line_start": 44,
      "line_end": 91,
      "text": "\n    <Box\n      role=\"tablist\"\n      aria-disabled={disabled}\n      sx={{\n        ...BaseIterationRowStyle,\n        bg: 'canvas.subtle',\n        p: 0,\n        alignItems: 'center'\n      }}\n    >\n      <StyledButton\n        key=\"active\"\n        role=\"tab\"\n        selected={selectedTab === 'active'}\n        {...testIdProps('active-iterations')}\n        onClick={() => {\n          if (!disabled) setSelectedTab('active')\n        }}\n        aria-label=\"Active iterations\"\n        aria-disabled={disabled}\n        disabled={disabled}\n      >\n        <StyledOcticon icon={ClockIcon} sx={{color: 'inherit', mr: 2}} aria-label=\"Active iterations\" />\n        <Text>{activeIterationsCount} Active</Text>\n      </StyledButton>\n\n      <StyledButton\n        key=\"completed\"\n        role=\"tab\"\n        selected={selectedTab === 'completed'}\n        {...testIdProps('completed-iterations')}\n        onClick={() => {\n          if (!disabled) setSelectedTab('completed')\n        }}\n        aria-label=\"Completed iterations\"\n        aria-disabled={disabled}\n        disabled={disabled}\n      >\n        <StyledOcticon icon={ArchiveIcon} sx={{color: 'inherit', mr: 2}} aria-label=\"Completed iterations\" />\n        <Text>{completedIterationsCount} Completed</Text>\n      </StyledButton>\n\n      {selectedTab === 'active' && (\n        <Box sx={{ml: 'auto', mr: 3}}>\n          <NewIterationModalButton {...addButtonProps} />\n        </Box>\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "name": "Text",
      "props": [],
      "line_start": 67,
      "line_end": 67,
      "text": "<Text>{activeIterationsCount} Active</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "name": "Text",
      "props": [],
      "line_start": 83,
      "line_end": 83,
      "text": "<Text>{completedIterationsCount} Completed</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/iterations-header.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{ml: 'auto', mr: 3}}"
        }
      ],
      "line_start": 87,
      "line_end": 89,
      "text": "\n        <Box sx={{ml: 'auto', mr: 3}}>\n          <NewIterationModalButton {...addButtonProps} />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "ButtonGroup",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 65,
      "line_end": 133,
      "text": "\n    <ButtonGroup sx={{display: 'flex'}}>\n      <Button\n        size=\"small\"\n        onClick={() => onCreate(minimumStartDate, defaultDuration)}\n        leadingIcon={PlusIcon}\n        sx={{display: 'flex', alignItems: 'center'}}\n        {...testIdProps('add-default-iteration-button')}\n      >\n        Add iteration\n      </Button>\n\n      <AnchoredOverlay\n        renderAnchor={props => (\n          <Button\n            trailingIcon={TriangleDownIcon}\n            size=\"small\"\n            sx={{lineHeight: '22px'}}\n            {...testIdProps('add-custom-iteration-button')}\n            {...props}\n          >\n            More options\n          </Button>\n        )}\n        width=\"medium\"\n        open={overlayOpen}\n        onOpen={openOverlay}\n        onClose={closeOverlay}\n        focusZoneSettings={{bindKeys: FocusKeys.Tab}}\n        align=\"end\"\n        overlayProps={{...testIdProps('custom-iteration-modal'), sx: {overflow: 'visible'}}}\n      >\n        <form onSubmit={onSave}>\n          <Box sx={{p: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}>\n            <NewIterationOptions\n              startDate={selectedStartDate}\n              onStartDateChange={setSelectedStartDate}\n              duration={selectedDuration}\n              onDurationChange={setSelectedDuration}\n              onValidChange={setInputValid}\n              minStartDate={minimumStartDate}\n            />\n          </Box>\n\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              p: 3,\n              pt: 2,\n              pb: 2,\n              gap: 2\n            }}\n          >\n            <Button size=\"small\" onClick={closeOverlay} {...testIdProps('cancel-add-custom-iteration')} type=\"button\">\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              type=\"submit\"\n              disabled={!inputValid}\n              {...testIdProps('save-add-custom-iteration')}\n            >\n              Add\n            </Button>\n          </Box>\n        </form>\n      </AnchoredOverlay>\n    </ButtonGroup>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{() => onCreate(minimumStartDate, defaultDuration)}"
        },
        {
          "name": "leadingIcon",
          "kind": "JsxExpression",
          "text": "{PlusIcon}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', alignItems: 'center'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('add-default-iteration-button')}"
        }
      ],
      "line_start": 66,
      "line_end": 74,
      "text": "<Button\n        size=\"small\"\n        onClick={() => onCreate(minimumStartDate, defaultDuration)}\n        leadingIcon={PlusIcon}\n        sx={{display: 'flex', alignItems: 'center'}}\n        {...testIdProps('add-default-iteration-button')}\n      >\n        Add iteration\n      </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "AnchoredOverlay",
      "props": [
        {
          "name": "renderAnchor",
          "kind": "JsxExpression",
          "text": "{props => (\n          <Button\n            trailingIcon={TriangleDownIcon}\n            size=\"small\"\n            sx={{lineHeight: '22px'}}\n            {...testIdProps('add-custom-iteration-button')}\n            {...props}\n          >\n            More options\n          </Button>\n        )}"
        },
        {
          "name": "width",
          "kind": "StringLiteral",
          "text": "\"medium\""
        },
        {
          "name": "open",
          "kind": "JsxExpression",
          "text": "{overlayOpen}"
        },
        {
          "name": "onOpen",
          "kind": "JsxExpression",
          "text": "{openOverlay}"
        },
        {
          "name": "onClose",
          "kind": "JsxExpression",
          "text": "{closeOverlay}"
        },
        {
          "name": "focusZoneSettings",
          "kind": "JsxExpression",
          "text": "{{bindKeys: FocusKeys.Tab}}"
        },
        {
          "name": "align",
          "kind": "StringLiteral",
          "text": "\"end\""
        },
        {
          "name": "overlayProps",
          "kind": "JsxExpression",
          "text": "{{...testIdProps('custom-iteration-modal'), sx: {overflow: 'visible'}}}"
        }
      ],
      "line_start": 76,
      "line_end": 132,
      "text": "<AnchoredOverlay\n        renderAnchor={props => (\n          <Button\n            trailingIcon={TriangleDownIcon}\n            size=\"small\"\n            sx={{lineHeight: '22px'}}\n            {...testIdProps('add-custom-iteration-button')}\n            {...props}\n          >\n            More options\n          </Button>\n        )}\n        width=\"medium\"\n        open={overlayOpen}\n        onOpen={openOverlay}\n        onClose={closeOverlay}\n        focusZoneSettings={{bindKeys: FocusKeys.Tab}}\n        align=\"end\"\n        overlayProps={{...testIdProps('custom-iteration-modal'), sx: {overflow: 'visible'}}}\n      >\n        <form onSubmit={onSave}>\n          <Box sx={{p: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}>\n            <NewIterationOptions\n              startDate={selectedStartDate}\n              onStartDateChange={setSelectedStartDate}\n              duration={selectedDuration}\n              onDurationChange={setSelectedDuration}\n              onValidChange={setInputValid}\n              minStartDate={minimumStartDate}\n            />\n          </Box>\n\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              p: 3,\n              pt: 2,\n              pb: 2,\n              gap: 2\n            }}\n          >\n            <Button size=\"small\" onClick={closeOverlay} {...testIdProps('cancel-add-custom-iteration')} type=\"button\">\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              type=\"submit\"\n              disabled={!inputValid}\n              {...testIdProps('save-add-custom-iteration')}\n            >\n              Add\n            </Button>\n          </Box>\n        </form>\n      </AnchoredOverlay>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Button",
      "props": [
        {
          "name": "trailingIcon",
          "kind": "JsxExpression",
          "text": "{TriangleDownIcon}"
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{lineHeight: '22px'}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...testIdProps('add-custom-iteration-button')}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n            {...props}"
        }
      ],
      "line_start": 78,
      "line_end": 86,
      "text": "\n          <Button\n            trailingIcon={TriangleDownIcon}\n            size=\"small\"\n            sx={{lineHeight: '22px'}}\n            {...testIdProps('add-custom-iteration-button')}\n            {...props}\n          >\n            More options\n          </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{p: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}"
        }
      ],
      "line_start": 97,
      "line_end": 106,
      "text": "<Box sx={{p: 3, borderBottom: '1px solid', borderColor: 'border.muted'}}>\n            <NewIterationOptions\n              startDate={selectedStartDate}\n              onStartDateChange={setSelectedStartDate}\n              duration={selectedDuration}\n              onDurationChange={setSelectedDuration}\n              onValidChange={setInputValid}\n              minStartDate={minimumStartDate}\n            />\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              p: 3,\n              pt: 2,\n              pb: 2,\n              gap: 2\n            }}"
        }
      ],
      "line_start": 108,
      "line_end": 130,
      "text": "<Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-end',\n              p: 3,\n              pt: 2,\n              pb: 2,\n              gap: 2\n            }}\n          >\n            <Button size=\"small\" onClick={closeOverlay} {...testIdProps('cancel-add-custom-iteration')} type=\"button\">\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              type=\"submit\"\n              disabled={!inputValid}\n              {...testIdProps('save-add-custom-iteration')}\n            >\n              Add\n            </Button>\n          </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Button",
      "props": [
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{closeOverlay}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('cancel-add-custom-iteration')}"
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"button\""
        }
      ],
      "line_start": 118,
      "line_end": 120,
      "text": "<Button size=\"small\" onClick={closeOverlay} {...testIdProps('cancel-add-custom-iteration')} type=\"button\">\n              Cancel\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-modal-button.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "type",
          "kind": "StringLiteral",
          "text": "\"submit\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{!inputValid}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n              {...testIdProps('save-add-custom-iteration')}"
        }
      ],
      "line_start": 121,
      "line_end": 129,
      "text": "<Button\n              variant=\"primary\"\n              size=\"small\"\n              type=\"submit\"\n              disabled={!inputValid}\n              {...testIdProps('save-add-custom-iteration')}\n            >\n              Add\n            </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-options.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{alignItems: 'center', display: 'flex', mb: 2}}"
        }
      ],
      "line_start": 46,
      "line_end": 57,
      "text": "<Box sx={{alignItems: 'center', display: 'flex', mb: 2}}>\n        <Text sx={{fontWeight: '400', mr: 2}}>{Resources.iterationStartDateLabel}:</Text>\n\n        <DatePicker\n          variant=\"single\"\n          value={startDate}\n          onChange={onDatePickerChange}\n          minDate={minStartDate}\n          showTodayButton={false}\n          anchorSx={{width: '100%'}}\n        />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-options.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: '400', mr: 2}}"
        }
      ],
      "line_start": 47,
      "line_end": 47,
      "text": "<Text sx={{fontWeight: '400', mr: 2}}>{Resources.iterationStartDateLabel}:</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/settings/iteration/new-iteration-options.tsx",
      "name": "Box",
      "props": [],
      "line_start": 59,
      "line_end": 61,
      "text": "<Box>\n        <IterationDurationInput value={duration} onChange={onDurationChange} onValidChange={onValidChange} />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"invisible\""
        },
        {
          "name": "size",
          "kind": "StringLiteral",
          "text": "\"small\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        },
        {
          "name": "aria-label",
          "kind": "StringLiteral",
          "text": "\"search\""
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{disabled}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        paddingTop: '2px',\n        paddingBottom: 0,\n        margin: '0 2px',\n        color: disabled ? 'accent.muted' : 'accent.fg'\n      }}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...testIdProps('bulk-add-search-button')}"
        }
      ],
      "line_start": 17,
      "line_end": 32,
      "text": "\n    <Button\n      variant=\"invisible\"\n      size=\"small\"\n      onClick={onClick}\n      aria-label=\"search\"\n      disabled={disabled}\n      sx={{\n        paddingTop: '2px',\n        paddingBottom: 0,\n        margin: '0 2px',\n        color: disabled ? 'accent.muted' : 'accent.fg'\n      }}\n      {...testIdProps('bulk-add-search-button')}\n    >\n      Search ⏎\n    </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: 'canvas.default',\n        width: '100%',\n        overflow: 'auto',\n        justifyContent: 'space-between'\n      }}"
        }
      ],
      "line_start": 104,
      "line_end": 173,
      "text": "\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: 'canvas.default',\n        width: '100%',\n        overflow: 'auto',\n        justifyContent: 'space-between'\n      }}\n    >\n      <Box sx={{mt: 4, mx: [3, '', 4]}}>\n        <Box sx={{display: 'flex', justifyContent: 'space-between', mb: 3}}>\n          <Text sx={{fontWeight: '600', fontSize: 3}}>Add from repository</Text>\n          <IconButton\n            variant=\"invisible\"\n            icon={XIcon}\n            sx={{color: 'fg.default', px: 0}}\n            onClick={onClose}\n            {...testIdProps('side-panel-button-close')}\n          />\n        </Box>\n        <Box sx={{display: 'flex', justifyContent: 'flex-start'}}>\n          <RepoSuggestions key=\"repoSuggestions\" />\n          <TextInput\n            sx={{flex: 1, ml: 2}}\n            disabled={!hasRepos}\n            leadingVisual={SearchIcon}\n            aria-label=\"Search for issues and pull requests\"\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"Search for issues and pull requests\"\n            onChange={onSearchInputChange}\n            onFocus={onSearchInputFocus}\n            onBlur={onSearchInputBlur}\n            {...searchInputProps}\n            size=\"small\"\n            trailingAction={\n              searchButtonVisible ? (\n                <SearchButton onClick={onSearchButtonClick} disabled={searchButtonDisabled} />\n              ) : undefined\n            }\n            {...testIdProps('suggested-items-search-input')}\n          />\n        </Box>\n        <ItemSuggestionsList />\n      </Box>\n      <Box\n        sx={{\n          position: 'sticky',\n          zIndex: '1',\n          display: 'flex',\n          justifyContent: 'flex-end',\n          bottom: '0',\n          backgroundColor: 'canvas.default',\n          borderTop: '1px solid',\n          borderColor: 'border.default',\n          width: '100%'\n        }}\n      >\n        <Button\n          variant=\"primary\"\n          onClick={addSelectedItems}\n          {...testIdProps('bulk-add-button')}\n          disabled={loading || addingItems || items?.length === 0 || selectedItems.length === 0}\n          sx={{my: 3, mr: 4}}\n        >\n          {!addingItems ? 'Add selected items' : selectedItems.length === 1 ? 'Adding item...' : 'Adding items...'}\n        </Button>\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{mt: 4, mx: [3, '', 4]}}"
        }
      ],
      "line_start": 114,
      "line_end": 149,
      "text": "<Box sx={{mt: 4, mx: [3, '', 4]}}>\n        <Box sx={{display: 'flex', justifyContent: 'space-between', mb: 3}}>\n          <Text sx={{fontWeight: '600', fontSize: 3}}>Add from repository</Text>\n          <IconButton\n            variant=\"invisible\"\n            icon={XIcon}\n            sx={{color: 'fg.default', px: 0}}\n            onClick={onClose}\n            {...testIdProps('side-panel-button-close')}\n          />\n        </Box>\n        <Box sx={{display: 'flex', justifyContent: 'flex-start'}}>\n          <RepoSuggestions key=\"repoSuggestions\" />\n          <TextInput\n            sx={{flex: 1, ml: 2}}\n            disabled={!hasRepos}\n            leadingVisual={SearchIcon}\n            aria-label=\"Search for issues and pull requests\"\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"Search for issues and pull requests\"\n            onChange={onSearchInputChange}\n            onFocus={onSearchInputFocus}\n            onBlur={onSearchInputBlur}\n            {...searchInputProps}\n            size=\"small\"\n            trailingAction={\n              searchButtonVisible ? (\n                <SearchButton onClick={onSearchButtonClick} disabled={searchButtonDisabled} />\n              ) : undefined\n            }\n            {...testIdProps('suggested-items-search-input')}\n          />\n        </Box>\n        <ItemSuggestionsList />\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'space-between', mb: 3}}"
        }
      ],
      "line_start": 115,
      "line_end": 124,
      "text": "<Box sx={{display: 'flex', justifyContent: 'space-between', mb: 3}}>\n          <Text sx={{fontWeight: '600', fontSize: 3}}>Add from repository</Text>\n          <IconButton\n            variant=\"invisible\"\n            icon={XIcon}\n            sx={{color: 'fg.default', px: 0}}\n            onClick={onClose}\n            {...testIdProps('side-panel-button-close')}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: '600', fontSize: 3}}"
        }
      ],
      "line_start": 116,
      "line_end": 116,
      "text": "<Text sx={{fontWeight: '600', fontSize: 3}}>Add from repository</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', justifyContent: 'flex-start'}}"
        }
      ],
      "line_start": 125,
      "line_end": 147,
      "text": "<Box sx={{display: 'flex', justifyContent: 'flex-start'}}>\n          <RepoSuggestions key=\"repoSuggestions\" />\n          <TextInput\n            sx={{flex: 1, ml: 2}}\n            disabled={!hasRepos}\n            leadingVisual={SearchIcon}\n            aria-label=\"Search for issues and pull requests\"\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"Search for issues and pull requests\"\n            onChange={onSearchInputChange}\n            onFocus={onSearchInputFocus}\n            onBlur={onSearchInputBlur}\n            {...searchInputProps}\n            size=\"small\"\n            trailingAction={\n              searchButtonVisible ? (\n                <SearchButton onClick={onSearchButtonClick} disabled={searchButtonDisabled} />\n              ) : undefined\n            }\n            {...testIdProps('suggested-items-search-input')}\n          />\n        </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          position: 'sticky',\n          zIndex: '1',\n          display: 'flex',\n          justifyContent: 'flex-end',\n          bottom: '0',\n          backgroundColor: 'canvas.default',\n          borderTop: '1px solid',\n          borderColor: 'border.default',\n          width: '100%'\n        }}"
        }
      ],
      "line_start": 150,
      "line_end": 172,
      "text": "<Box\n        sx={{\n          position: 'sticky',\n          zIndex: '1',\n          display: 'flex',\n          justifyContent: 'flex-end',\n          bottom: '0',\n          backgroundColor: 'canvas.default',\n          borderTop: '1px solid',\n          borderColor: 'border.default',\n          width: '100%'\n        }}\n      >\n        <Button\n          variant=\"primary\"\n          onClick={addSelectedItems}\n          {...testIdProps('bulk-add-button')}\n          disabled={loading || addingItems || items?.length === 0 || selectedItems.length === 0}\n          sx={{my: 3, mr: 4}}\n        >\n          {!addingItems ? 'Add selected items' : selectedItems.length === 1 ? 'Adding item...' : 'Adding items...'}\n        </Button>\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/bulk-add/bulk-add-view.tsx",
      "name": "Button",
      "props": [
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"primary\""
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{addSelectedItems}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n          {...testIdProps('bulk-add-button')}"
        },
        {
          "name": "disabled",
          "kind": "JsxExpression",
          "text": "{loading || addingItems || items?.length === 0 || selectedItems.length === 0}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{my: 3, mr: 4}}"
        }
      ],
      "line_start": 163,
      "line_end": 171,
      "text": "<Button\n          variant=\"primary\"\n          onClick={addSelectedItems}\n          {...testIdProps('bulk-add-button')}\n          disabled={loading || addingItems || items?.length === 0 || selectedItems.length === 0}\n          sx={{my: 3, mr: 4}}\n        >\n          {!addingItems ? 'Add selected items' : selectedItems.length === 1 ? 'Adding item...' : 'Adding items...'}\n        </Button>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"aside\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      borderRightWidth: 0,\n      borderBottomWidth: 0,\n      borderLeftWidth: ['0', '0', '1px', '1px'],\n      borderTopWidth: ['1px', '0', '0', '0'],\n      borderStyle: 'solid',\n      borderColor: 'border.muted',\n      width: ['100%', '', '', '33%'],\n      maxWidth: ['', '', '', '300px', '400px'],\n      minWidth: ['', '', '', '280px', '400px']\n    }}"
        }
      ],
      "line_start": 22,
      "line_end": 38,
      "text": "\n  <Box\n    as=\"aside\"\n    sx={{\n      borderRightWidth: 0,\n      borderBottomWidth: 0,\n      borderLeftWidth: ['0', '0', '1px', '1px'],\n      borderTopWidth: ['1px', '0', '0', '0'],\n      borderStyle: 'solid',\n      borderColor: 'border.muted',\n      width: ['100%', '', '', '33%'],\n      maxWidth: ['', '', '', '300px', '400px'],\n      minWidth: ['', '', '', '280px', '400px']\n    }}\n  >\n    <SidePanelSidebarContent item={item} />\n    <SidePanelSidebarActions item={item} />\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 2}}"
        }
      ],
      "line_start": 120,
      "line_end": 130,
      "text": "\n  <Box sx={{px: 2}}>\n    <FieldValue\n      interactable\n      as=\"button\"\n      onClick={onToggle}\n      sx={{fontWeight: 'bold', fontSize: 0, textAlign: 'left', color: 'fg.default'}}\n      variant=\"invisible\"\n    >\n      {allFieldsVisible ? <FoldUpIcon /> : <FoldDownIcon />} {allFieldsVisible ? 'Hide extra' : 'Show all'} fields\n    </FieldValue>\n  </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList",
      "props": [
        {
          "name": "title",
          "kind": "StringLiteral",
          "text": "\"Actions\""
        }
      ],
      "line_start": 101,
      "line_end": 104,
      "text": "\n    <ActionList title=\"Actions\">\n      <ActionList.Divider />\n      {actions}\n    </ActionList>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onConvert}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('side-pane-convert-to-issue')}"
        }
      ],
      "line_start": 109,
      "line_end": 114,
      "text": "\n  <ActionList.Item onSelect={onConvert} ref={ref} {...testIdProps('side-pane-convert-to-issue')}>\n    <ActionList.LeadingVisual>\n      <IssueOpenedIcon />\n    </ActionList.LeadingVisual>\n    Convert to issue\n  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 110,
      "line_end": 112,
      "text": "<ActionList.LeadingVisual>\n      <IssueOpenedIcon />\n    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LinkItem",
      "parent": "ActionList",
      "child": "LinkItem",
      "props": [
        {
          "name": "target",
          "kind": "StringLiteral",
          "text": "\"_blank\""
        },
        {
          "name": "href",
          "kind": "JsxExpression",
          "text": "{itemUrl}"
        },
        {
          "name": "onClick",
          "kind": "JsxExpression",
          "text": "{onClick}"
        }
      ],
      "line_start": 119,
      "line_end": 124,
      "text": "\n  <ActionList.LinkItem target=\"_blank\" href={itemUrl} onClick={onClick}>\n    <ActionList.LeadingVisual>\n      <LinkExternalIcon />\n    </ActionList.LeadingVisual>\n    Open in new tab\n  </ActionList.LinkItem>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 120,
      "line_end": 122,
      "text": "<ActionList.LeadingVisual>\n      <LinkExternalIcon />\n    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onSelect}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps('copy-link-action')}"
        }
      ],
      "line_start": 138,
      "line_end": 143,
      "text": "\n    <ActionList.Item onSelect={onSelect} {...testIdProps('copy-link-action')}>\n      <ActionList.LeadingVisual>\n        {success ? <StyledOcticon icon={CheckIcon} sx={{color: 'success.fg'}} /> : <CopyIcon />}\n      </ActionList.LeadingVisual>\n      {success ? <Text sx={{fontWeight: 'bold', color: 'success.fg'}}>Copied!</Text> : 'Copy link'}\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 139,
      "line_end": 141,
      "text": "<ActionList.LeadingVisual>\n        {success ? <StyledOcticon icon={CheckIcon} sx={{color: 'success.fg'}} /> : <CopyIcon />}\n      </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold', color: 'success.fg'}}"
        }
      ],
      "line_start": 142,
      "line_end": 142,
      "text": " <Text sx={{fontWeight: 'bold', color: 'success.fg'}}>Copied!</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onArchive}"
        }
      ],
      "line_start": 148,
      "line_end": 153,
      "text": "\n  <ActionList.Item onSelect={onArchive}>\n    <ActionList.LeadingVisual>\n      <ArchiveIcon />\n    </ActionList.LeadingVisual>\n    Archive\n  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 149,
      "line_end": 151,
      "text": "<ActionList.LeadingVisual>\n      <ArchiveIcon />\n    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "onSelect",
          "kind": "JsxExpression",
          "text": "{onDelete}"
        },
        {
          "name": "variant",
          "kind": "StringLiteral",
          "text": "\"danger\""
        }
      ],
      "line_start": 157,
      "line_end": 162,
      "text": "\n  <ActionList.Item onSelect={onDelete} variant=\"danger\">\n    <ActionList.LeadingVisual>\n      <TrashIcon />\n    </ActionList.LeadingVisual>\n    Delete from project\n  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/sidebar-actions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 158,
      "line_end": 160,
      "text": "<ActionList.LeadingVisual>\n      <TrashIcon />\n    </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-emoji-suggestions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...itemProps}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...itemProps.sx, '& > span:first-child': {display: 'none'}}}"
        }
      ],
      "line_start": 26,
      "line_end": 29,
      "text": "\n  <ActionList.Item {...itemProps} sx={{...itemProps.sx, '& > span:first-child': {display: 'none'}}}>\n    <ActionList.LeadingVisual>{suggestion.character}</ActionList.LeadingVisual>\n    {suggestion.name}\n  </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-emoji-suggestions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 27,
      "line_end": 27,
      "text": "<ActionList.LeadingVisual>{suggestion.character}</ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...itemProps}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...itemProps.sx, '& > span': {display: 'none'}}}"
        }
      ],
      "line_start": 28,
      "line_end": 31,
      "text": "\n    <ActionList.Item {...itemProps} sx={{...itemProps.sx, '& > span': {display: 'none'}}}>\n      <Text sx={{fontWeight: 'bold'}}>{suggestion.identifier}</Text>{' '}\n      <ActionList.Description>{suggestion.descriptor}</ActionList.Description>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{fontWeight: 'bold'}}"
        }
      ],
      "line_start": 29,
      "line_end": 29,
      "text": "<Text sx={{fontWeight: 'bold'}}>{suggestion.identifier}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-mention-suggestions.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [],
      "line_start": 30,
      "line_end": 30,
      "text": "<ActionList.Description>{suggestion.descriptor}</ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-reference-suggestions.tsx",
      "name": "ActionList.Item",
      "parent": "ActionList",
      "child": "Item",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...itemProps}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{...itemProps.sx, '& > span:first-child': {display: 'none'}}}"
        }
      ],
      "line_start": 36,
      "line_end": 55,
      "text": "\n    <ActionList.Item {...itemProps} sx={{...itemProps.sx, '& > span:first-child': {display: 'none'}}}>\n      {icon && (\n        <ActionList.LeadingVisual>\n          <SanitizedHtmlSpan>{icon}</SanitizedHtmlSpan>\n        </ActionList.LeadingVisual>\n      )}\n      <SanitizedHtmlSpan\n        sx={{\n          fontWeight: 'bold',\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis',\n          display: 'block',\n          overflow: 'hidden',\n          maxWidth: 400\n        }}\n      >\n        {suggestion.titleHtml}\n      </SanitizedHtmlSpan>{' '}\n      <ActionList.Description>#{suggestion.number}</ActionList.Description>\n    </ActionList.Item>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-reference-suggestions.tsx",
      "name": "ActionList.LeadingVisual",
      "parent": "ActionList",
      "child": "LeadingVisual",
      "props": [],
      "line_start": 38,
      "line_end": 40,
      "text": "\n        <ActionList.LeadingVisual>\n          <SanitizedHtmlSpan>{icon}</SanitizedHtmlSpan>\n        </ActionList.LeadingVisual>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/common/inline-autocomplete/suggestions-hooks/use-reference-suggestions.tsx",
      "name": "ActionList.Description",
      "parent": "ActionList",
      "child": "Description",
      "props": [],
      "line_start": 54,
      "line_end": 54,
      "text": "<ActionList.Description>#{suggestion.number}</ActionList.Description>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/assignees-field.tsx",
      "name": "Box",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex'}}"
        }
      ],
      "line_start": 52,
      "line_end": 54,
      "text": "\n    <Box sx={{display: 'flex'}}>\n      <UserGroup users={users.map(itemFromAssignee)} isDisabled={true} />\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"dl\""
        }
      ],
      "line_start": 7,
      "line_end": 7,
      "text": " <Box as=\"dl\">{children}</Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"div\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{px: 2, py: 1, display: 'flex', gap: 1, flexDirection: ['row', '', '', 'column', 'row']}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n      {...props}"
        }
      ],
      "line_start": 16,
      "line_end": 25,
      "text": "\n    // div is default for Box, but PRC could change in the future and this is _required_ to be a div by HTML spec\n    <Box\n      as=\"div\"\n      sx={{px: 2, py: 1, display: 'flex', gap: 1, flexDirection: ['row', '', '', 'column', 'row']}}\n      {...props}\n    >\n      <FieldLabel>{label}</FieldLabel>\n      <Box as=\"dd\" sx={{flex: 1, overflow: 'hidden'}}>\n        {children}\n      </Box>\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"dd\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{flex: 1, overflow: 'hidden'}}"
        }
      ],
      "line_start": 22,
      "line_end": 24,
      "text": "<Box as=\"dd\" sx={{flex: 1, overflow: 'hidden'}}>\n        {children}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "name": "Text",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"dt\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n      px: 2,\n      pt: '6px',\n      width: ['33%', '', '', '100%', '33%'],\n      flexShrink: 0,\n      fontSize: 0,\n      fontWeight: 'bold',\n      color: 'fg.muted'\n    }}"
        }
      ],
      "line_start": 30,
      "line_end": 43,
      "text": "\n  <Text\n    as=\"dt\"\n    sx={{\n      px: 2,\n      pt: '6px',\n      width: ['33%', '', '', '100%', '33%'],\n      flexShrink: 0,\n      fontSize: 0,\n      fontWeight: 'bold',\n      color: 'fg.muted'\n    }}\n  >\n    {children}\n  </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/core.tsx",
      "name": "Box",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...props}"
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n          px: 2,\n          py: 1,\n          background: 'transparent',\n          border: 'none',\n          borderRadius: 1,\n          ':hover': interactStyles,\n          ':focus': interactStyles,\n          width: '100%',\n          textAlign: 'left',\n          ...sx\n        }}"
        },
        {
          "name": "ref",
          "kind": "JsxExpression",
          "text": "{ref}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": "\n        {...testIdProps('field-value')}"
        }
      ],
      "line_start": 53,
      "line_end": 71,
      "text": "\n      <Box\n        {...props}\n        sx={{\n          px: 2,\n          py: 1,\n          background: 'transparent',\n          border: 'none',\n          borderRadius: 1,\n          ':hover': interactStyles,\n          ':focus': interactStyles,\n          width: '100%',\n          textAlign: 'left',\n          ...sx\n        }}\n        ref={ref}\n        {...testIdProps('field-value')}\n      >\n        {children}\n      </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/index.tsx",
      "name": "Box",
      "props": [
        {
          "name": "key",
          "kind": "JsxExpression",
          "text": "{linkedPullRequest.id}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...testIdProps(`linked-pr-label`)}"
        }
      ],
      "line_start": 97,
      "line_end": 99,
      "text": "\n              <Box key={linkedPullRequest.id} {...testIdProps(`linked-pr-label`)}>\n                <LinkedPullRequestLabelLink linkedPullRequest={linkedPullRequest} sx={{mt: 0}} />\n              </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/iteration-field.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n        backgroundColor: 'canvas.subtle'\n      }}"
        }
      ],
      "line_start": 33,
      "line_end": 40,
      "text": "\n    <Label\n      sx={{\n        backgroundColor: 'canvas.subtle'\n      }}\n    >\n      <StyledOcticon icon={IterationsIcon} size={14} sx={{mr: 1}} />\n      <SanitizedHtmlSpan>{iteration.titleHtml}</SanitizedHtmlSpan>\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/labels-field.tsx",
      "name": "Box",
      "props": [
        {
          "name": "as",
          "kind": "StringLiteral",
          "text": "\"ul\""
        },
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{display: 'flex', gap: 1, flexWrap: 'wrap', listStyle: 'none'}}"
        }
      ],
      "line_start": 59,
      "line_end": 65,
      "text": "\n    <Box as=\"ul\" sx={{display: 'flex', gap: 1, flexWrap: 'wrap', listStyle: 'none'}}>\n      {labels?.map(label => (\n        <li key={label.id}>\n          <IssueLabel colorHex={label.color} url={label.url} nameHtml={label.nameHtml} />\n        </li>\n      ))}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/sidebar-text-input.tsx",
      "name": "PointerBox",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{\n            position: 'absolute',\n            zIndex: 100,\n            fontSize: 0,\n            mt: '12px',\n            py: 1,\n            px: 2,\n            bg: 'danger.subtle',\n            color: 'fg.default',\n            borderColor: 'danger.muted'\n          }}"
        },
        {
          "name": "caret",
          "kind": "StringLiteral",
          "text": "\"top-left\""
        },
        {
          "name": "id",
          "kind": "JsxExpression",
          "text": "{'foo'}"
        }
      ],
      "line_start": 90,
      "line_end": 106,
      "text": "\n        <PointerBox\n          sx={{\n            position: 'absolute',\n            zIndex: 100,\n            fontSize: 0,\n            mt: '12px',\n            py: 1,\n            px: 2,\n            bg: 'danger.subtle',\n            color: 'fg.default',\n            borderColor: 'danger.muted'\n          }}\n          caret=\"top-left\"\n          id={'foo'}\n        >\n          <span>{invalidMessage}</span>\n        </PointerBox>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/single-select-field.tsx",
      "name": "Label",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{backgroundColor: 'canvas.subtle'}}"
        }
      ],
      "line_start": 52,
      "line_end": 55,
      "text": "\n    <Label sx={{backgroundColor: 'canvas.subtle'}}>\n      {/* Label has display: inline-flex, so wrapping span prevents squishing spaces between elements (ie, between emoji and text) */}\n      <SanitizedHtmlSpan>{matchingOption.nameHtml}</SanitizedHtmlSpan>\n    </Label>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "name": "Text",
      "props": [
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...omit(props, 'text')}"
        }
      ],
      "line_start": 19,
      "line_end": 19,
      "text": " <Text {...omit(props, 'text')}>{props.text}</Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.subtle', ...sx}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...props}"
        }
      ],
      "line_start": 34,
      "line_end": 36,
      "text": "\n      <Text sx={{color: 'fg.subtle', ...sx}} {...props}>\n        {Resources.noPermissionEmptyColumnValue(columnName)}\n      </Text>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "name": "Box",
      "props": [],
      "line_start": 67,
      "line_end": 84,
      "text": "\n    <Box>\n      <Text sx={{color: 'fg.subtle', ...sx}} {...props}>\n        {emptyTextValue}\n      </Text>\n      {(columnType === MemexColumnDataType.Iteration || columnType === MemexColumnDataType.SingleSelect) && (\n        <StyledOcticon\n          icon={TriangleDownIcon}\n          size=\"small\"\n          sx={{\n            verticalAlign: 'middle',\n            color: 'fg.muted',\n            opacity: 0.3,\n            '.is-focused &': {opacity: 1},\n            ml: 2\n          }}\n        />\n      )}\n    </Box>",
      "type": "JsxOpeningElement"
    },
    {
      "path": "src/client/components/side-panel/sidebar/fields/text-value-with-fallback.tsx",
      "name": "Text",
      "props": [
        {
          "name": "sx",
          "kind": "JsxExpression",
          "text": "{{color: 'fg.subtle', ...sx}}"
        },
        {
          "name": "JsxSpreadAttribute",
          "kind": "JsxSpreadAttribute",
          "text": " {...props}"
        }
      ],
      "line_start": 68,
      "line_end": 70,
      "text": "<Text sx={{color: 'fg.subtle', ...sx}} {...props}>\n        {emptyTextValue}\n      </Text>",
      "type": "JsxOpeningElement"
    }
  ]
}